{"version":3,"sources":["../node_modules/symbol-observable/es/ponyfill.js","../node_modules/symbol-observable/es/index.js","../node_modules/redux/es/redux.js","../node_modules/rchain-toolkit/dist/grpc.js","../node_modules/stream-http/lib/capability.js","../node_modules/inherits/inherits_browser.js","../node_modules/process/browser.js","../node_modules/process-nextick-args/index.js","../node_modules/isarray/index.js","../node_modules/events/events.js","../node_modules/readable-stream/lib/internal/streams/stream-browser.js","../node_modules/base64-js/index.js","../node_modules/ieee754/index.js","../node_modules/buffer/index.js","../node_modules/safe-buffer/index.js","../node_modules/core-util-is/lib/util.js","../node_modules/readable-stream/lib/internal/streams/BufferList.js","../node_modules/readable-stream/lib/internal/streams/destroy.js","../node_modules/util-deprecate/browser.js","../node_modules/readable-stream/lib/_stream_writable.js","../node_modules/readable-stream/lib/_stream_duplex.js","../node_modules/string_decoder/lib/string_decoder.js","../node_modules/readable-stream/lib/_stream_readable.js","../node_modules/readable-stream/lib/_stream_transform.js","../node_modules/readable-stream/lib/_stream_passthrough.js","../node_modules/readable-stream/readable-browser.js","../node_modules/stream-http/lib/response.js","../node_modules/to-arraybuffer/index.js","../node_modules/stream-http/lib/request.js","../node_modules/xtend/immutable.js","../node_modules/builtin-status-codes/browser.js","../node_modules/node-libs-browser/node_modules/punycode/punycode.js","../node_modules/url/util.js","../node_modules/querystring-es3/decode.js","../node_modules/querystring-es3/encode.js","../node_modules/querystring-es3/index.js","../node_modules/url/url.js","../node_modules/stream-http/index.js","../node_modules/https-browserify/index.js","../node_modules/rchain-toolkit/dist/http.js","../node_modules/blakejs/util.js","../node_modules/blakejs/blake2b.js","../node_modules/blakejs/blake2s.js","../node_modules/blakejs/index.js","../node_modules/rchain-toolkit/node_modules/elliptic/package.json","../node_modules/bn.js/lib/bn.js","../node_modules/minimalistic-assert/index.js","../node_modules/minimalistic-crypto-utils/lib/utils.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/utils.js","../node_modules/brorand/index.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/curve/base.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/curve/short.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/curve/mont.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/curve/edwards.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/curve/index.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/curves.js","../node_modules/hmac-drbg/lib/hmac-drbg.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/ec/key.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/ec/signature.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/ec/index.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/eddsa/key.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/eddsa/signature.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic/eddsa/index.js","../node_modules/rchain-toolkit/node_modules/elliptic/lib/elliptic.js","../node_modules/js-sha3/src/sha3.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/utf8/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/protobufjs/src/util/longbits.js","../node_modules/protobufjs/src/util/minimal.js","../node_modules/protobufjs/src/writer.js","../node_modules/protobufjs/src/writer_buffer.js","../node_modules/protobufjs/src/reader.js","../node_modules/protobufjs/src/reader_buffer.js","../node_modules/protobufjs/src/rpc/service.js","../node_modules/protobufjs/src/rpc.js","../node_modules/protobufjs/src/roots.js","../node_modules/protobufjs/src/index-minimal.js","../node_modules/protobufjs/minimal.js","../node_modules/rchain-toolkit/dist/rnode-protos.js","../node_modules/rchain-toolkit/dist/base58.js","../node_modules/rchain-toolkit/dist/utils.js","../node_modules/rchain-toolkit/dist/index.js","common/actions.ts","common/index.ts","utils/buildUnforgeableNameQuery.ts","utils/generateSignature.ts","../node_modules/uuid/lib/rng-browser.js","../node_modules/uuid/lib/bytesToUuid.js","../node_modules/uuid/v4.js","utils/generateNonce.ts","dapp-sandboxed.ts"],"names":["symbolObservablePonyfill","root","result","Symbol","observable","self","window","global","module","Function","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","obj","Object","proto","getPrototypeOf","createStore","reducer","preloadedState","enhancer","_ref2","arguments","Error","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","index","indexOf","splice","dispatch","action","type","listeners","i","length","replaceReducer","nextReducer","$$observable","_ref","outerSubscribe","observer","TypeError","observeState","next","unsubscribe","warning","message","console","error","e","getUndefinedStateErrorMessage","key","actionType","String","getUnexpectedStateShapeWarningMessage","inputState","reducers","unexpectedKeyCache","reducerKeys","keys","argumentName","call","match","unexpectedKeys","filter","hasOwnProperty","forEach","assertReducerShape","combineReducers","finalReducers","finalReducerKeys","shapeAssertionError","state","warningMessage","hasChanged","nextState","_i","_key","previousStateForKey","nextStateForKey","errorMessage","bindActionCreator","actionCreator","apply","bindActionCreators","actionCreators","boundActionCreators","_defineProperty","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","_objectSpread2","target","source","getOwnPropertyDescriptors","defineProperties","compose","_len","funcs","Array","arg","reduce","a","b","applyMiddleware","middlewares","store","_dispatch","middlewareAPI","chain","map","middleware","isCrushed","cachedSetTimeout","cachedClearTimeout","process","exports","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","prototype","title","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","name","binding","cwd","chdir","dir","umask","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","ProcessEmitWarning","warn","getOwnPropertyNames","NumberIsNaN","Number","isNaN","EventEmitter","init","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","m","events","existing","create","newListener","unshift","warned","w","emitter","count","onceWrapper","fired","wrapFn","_onceWrap","wrapped","bind","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","listenerCount","arr","n","copy","spliceOne","list","pop","ret","Promise","resolve","reject","eventListener","errorListener","err","get","set","RangeError","setMaxListeners","getMaxListeners","doError","er","context","handler","position","originalListener","shift","rawListeners","eventNames","pna","require","WriteReq","chunk","encoding","cb","callback","CorkedRequest","_this","entry","finish","onCorkedFinish","Writable","Duplex","asyncWrite","WritableState","util","inherits","internalUtil","deprecate","Stream","Buffer","OurUint8Array","Uint8Array","_uint8ArrayToBuffer","from","_isUint8Array","isBuffer","realHasInstance","destroyImpl","nop","options","stream","isDuplex","objectMode","writableObjectMode","hwm","highWaterMark","writableHwm","writableHighWaterMark","defaultHwm","floor","finalCalled","needDrain","ending","ended","finished","destroyed","noDecode","decodeStrings","defaultEncoding","writing","corked","sync","bufferProcessing","onwrite","writecb","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","errorEmitted","bufferedRequestCount","corkedRequestsFree","_writableState","write","_write","writev","_writev","destroy","_destroy","final","_final","writeAfterEnd","validChunk","valid","decodeChunk","writeOrBuffer","isBuf","newChunk","last","doWrite","onwriteError","finishMaybe","onwriteStateUpdate","needFinish","clearBuffer","afterWrite","onwriteDrain","l","buffer","holder","allBuffers","callFinal","prefinish","need","endWritable","corkReq","getBuffer","current","out","_","hasInstance","pipe","cork","uncork","setDefaultEncoding","toLowerCase","end","_undestroy","undestroy","extend","prop","qs","sep","eq","regexp","maxKeys","x","kstr","vstr","k","v","replace","idx","substr","decodeURIComponent","isArray","xs","stringifyPrimitive","isFinite","objectKeys","ks","encodeURIComponent","f","res","decode","parse","encode","stringify"],"mappings":"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AAA,MAAA,UACA,KAAA,MAAA,OAAA;;AC7CA,IAAA,EAAA,QAEA,EAAA,MAAA,QAAA,gBACA,EAAA,OAAA,QAAA,iBACA,EAAA,IAAA,QAAA,cACA,EAAA,OAAA,QAAA,iBACA,EAAA,KAAA,QAAA,eAGA,EAAA,KAAA,EAAA,IAAA,KACA,EAAA,OAAA,EAAA,IAAA,OACA,EAAA,OAAA,EAAA,IAAA,OACA,EAAA,OAAA,EAAA,IAAA,OACA,EAAA,OAAA,EAAA,IAAA,OACA,EAAA,UAAA,EAAA,OAAA;;ACdA,OAAA,QAAA,CACA,QAAA,CACA,KAAA,EACA,OAAA,CACA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,kEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,sEAIA,IAAA,CACA,IAAA,EACA,OAAA,CACA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,iEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mE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EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,GAAA,GAAA,EAAA,IAAA,IACA,EAAA,IAAA,EACA,EAAA,IAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EAEA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,GACA,EAAA,EAAA,IAAA,EAAA,EAAA,KAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,GAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,GAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,GAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,GAAA,EAAA,KAAA,GAAA,EAAA,MAAA,EACA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,IAAA,GAAA,EAAA,KAAA,EACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,GAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GACA,EAAA,EAAA,KAAA,GAAA,EAAA,MAAA,GAEA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,GACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,GAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,EAAA,EACA,EAAA,IAAA,GAAA,GAAA,EACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,IAAA,IAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,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","file":"dapp-sandboxed.2a116ee1.js","sourceRoot":"../src","sourcesContent":["export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribelistener for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createStore };\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\nexports.getMethod = function (options, client, method) {\n    return new Promise(function (resolve, reject) {\n        client[method](options, function (err, resp) { return __awaiter(void 0, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(resp);\n                }\n                return [2 /*return*/];\n            });\n        }); });\n    });\n};\n// Get block\nexports.getBlock = function (options, client) {\n    return exports.getMethod(options, client, \"getBlock\");\n};\n// Get blocks\nexports.getBlocks = function (options, client) {\n    return exports.getMethod(options, client, \"getBlocks\");\n};\n// Get blocks\nexports.lastFinalizedBlock = function (client) {\n    return exports.getMethod(undefined, client, \"lastFinalizedBlock\");\n};\nexports.doDeploy = function (options, client) {\n    return exports.getMethod(options, client, \"doDeploy\");\n};\n// Preview private names\nexports.previewPrivateNames = function (options, client) {\n    return exports.getMethod(options, client, \"previewPrivateNames\");\n};\n// Propose\nexports.propose = function (options, client) {\n    return exports.getMethod(options, client, \"propose\");\n};\nexports.getClient = function (grpcEndPoint, grpc, protoLoader, protoService) {\n    var path = \"/protobuf/DeployServiceV1.proto\";\n    if (protoService === \"proposeService\") {\n        path = \"/protobuf/ProposeServiceV1.proto\";\n    }\n    return new Promise(function (resolve, reject) {\n        protoLoader\n            .load(__dirname + path, {\n            keepCase: true,\n            longs: String,\n            enums: String,\n            defaults: true,\n            oneofs: true\n        })\n            .then(function (packageDefinition) {\n            var packageObject = grpc.loadPackageDefinition(packageDefinition);\n            var client;\n            if (protoService === \"deployService\") {\n                client = new packageObject.casper.v1.DeployService(grpcEndPoint, grpc.credentials.createInsecure());\n            }\n            else {\n                client = new packageObject.casper.v1.ProposeService(grpcEndPoint, grpc.credentials.createInsecure());\n            }\n            resolve(client);\n        })[\"catch\"](function (err) {\n            reject(err);\n        });\n    });\n};\nexports.getGrpcProposeClient = function (grpcEndPoint, grpc, protoLoader) {\n    return exports.getClient(grpcEndPoint, grpc, protoLoader, \"proposeService\");\n};\n","exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\nexports.writableStream = isFunction(global.WritableStream)\n\nexports.abortController = isFunction(global.AbortController)\n\nexports.blobConstructor = false\ntry {\n\tnew Blob([new ArrayBuffer(1)])\n\texports.blobConstructor = true\n} catch (e) {}\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr\nfunction getXHR () {\n\t// Cache the xhr value\n\tif (xhr !== undefined) return xhr\n\n\tif (global.XMLHttpRequest) {\n\t\txhr = new global.XMLHttpRequest()\n\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t// Note: this doesn't actually make an http request.\n\t\ttry {\n\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t} catch(e) {\n\t\t\txhr = null\n\t\t}\n\t} else {\n\t\t// Service workers don't have XHR\n\t\txhr = null\n\t}\n\treturn xhr\n}\n\nfunction checkTypeSupport (type) {\n\tvar xhr = getXHR()\n\tif (!xhr) return false\n\ttry {\n\t\txhr.responseType = type\n\t\treturn xhr.responseType === type\n\t} catch (e) {}\n\treturn false\n}\n\n// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\nvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'\nvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')\nexports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&\n\tcheckTypeSupport('moz-chunked-arraybuffer')\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\nexports.vbArray = isFunction(global.VBArray)\n\nfunction isFunction (value) {\n\treturn typeof value === 'function'\n}\n\nxhr = null // Help gc\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nif (typeof process === 'undefined' ||\n    !process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function eventListener() {\n      if (errorListener !== undefined) {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n    var errorListener;\n\n    // Adding an error listener is not optional because\n    // if an error is thrown on an event emitter we cannot\n    // guarantee that the actual event we are waiting will\n    // be fired. The result could be a silent way to create\n    // memory or file descriptor leaks, which is something\n    // we should avoid.\n    if (name !== 'error') {\n      errorListener = function errorListener(err) {\n        emitter.removeListener(name, eventListener);\n        reject(err);\n      };\n\n      emitter.once('error', errorListener);\n    }\n\n    emitter.once(name, eventListener);\n  });\n}\n","module.exports = require('events').EventEmitter;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}","'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n","var capability = require('./capability')\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\nvar rStates = exports.readyStates = {\n\tUNSENT: 0,\n\tOPENED: 1,\n\tHEADERS_RECEIVED: 2,\n\tLOADING: 3,\n\tDONE: 4\n}\n\nvar IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, fetchTimer) {\n\tvar self = this\n\tstream.Readable.call(self)\n\n\tself._mode = mode\n\tself.headers = {}\n\tself.rawHeaders = []\n\tself.trailers = {}\n\tself.rawTrailers = []\n\n\t// Fake the 'close' event, but only once 'end' fires\n\tself.on('end', function () {\n\t\t// The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n\t\tprocess.nextTick(function () {\n\t\t\tself.emit('close')\n\t\t})\n\t})\n\n\tif (mode === 'fetch') {\n\t\tself._fetchResponse = response\n\n\t\tself.url = response.url\n\t\tself.statusCode = response.status\n\t\tself.statusMessage = response.statusText\n\t\t\n\t\tresponse.headers.forEach(function (header, key){\n\t\t\tself.headers[key.toLowerCase()] = header\n\t\t\tself.rawHeaders.push(key, header)\n\t\t})\n\n\t\tif (capability.writableStream) {\n\t\t\tvar writable = new WritableStream({\n\t\t\t\twrite: function (chunk) {\n\t\t\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\t\t\tif (self._destroyed) {\n\t\t\t\t\t\t\treject()\n\t\t\t\t\t\t} else if(self.push(new Buffer(chunk))) {\n\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself._resumeFetch = resolve\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\tclose: function () {\n\t\t\t\t\tglobal.clearTimeout(fetchTimer)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.push(null)\n\t\t\t\t},\n\t\t\t\tabort: function (err) {\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.emit('error', err)\n\t\t\t\t}\n\t\t\t})\n\n\t\t\ttry {\n\t\t\t\tresponse.body.pipeTo(writable).catch(function (err) {\n\t\t\t\t\tglobal.clearTimeout(fetchTimer)\n\t\t\t\t\tif (!self._destroyed)\n\t\t\t\t\t\tself.emit('error', err)\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this\n\t\t}\n\t\t// fallback for when writableStream or pipeTo aren't available\n\t\tvar reader = response.body.getReader()\n\t\tfunction read () {\n\t\t\treader.read().then(function (result) {\n\t\t\t\tif (self._destroyed)\n\t\t\t\t\treturn\n\t\t\t\tif (result.done) {\n\t\t\t\t\tglobal.clearTimeout(fetchTimer)\n\t\t\t\t\tself.push(null)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tself.push(new Buffer(result.value))\n\t\t\t\tread()\n\t\t\t}).catch(function (err) {\n\t\t\t\tglobal.clearTimeout(fetchTimer)\n\t\t\t\tif (!self._destroyed)\n\t\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t}\n\t\tread()\n\t} else {\n\t\tself._xhr = xhr\n\t\tself._pos = 0\n\n\t\tself.url = xhr.responseURL\n\t\tself.statusCode = xhr.status\n\t\tself.statusMessage = xhr.statusText\n\t\tvar headers = xhr.getAllResponseHeaders().split(/\\r?\\n/)\n\t\theaders.forEach(function (header) {\n\t\t\tvar matches = header.match(/^([^:]+):\\s*(.*)/)\n\t\t\tif (matches) {\n\t\t\t\tvar key = matches[1].toLowerCase()\n\t\t\t\tif (key === 'set-cookie') {\n\t\t\t\t\tif (self.headers[key] === undefined) {\n\t\t\t\t\t\tself.headers[key] = []\n\t\t\t\t\t}\n\t\t\t\t\tself.headers[key].push(matches[2])\n\t\t\t\t} else if (self.headers[key] !== undefined) {\n\t\t\t\t\tself.headers[key] += ', ' + matches[2]\n\t\t\t\t} else {\n\t\t\t\t\tself.headers[key] = matches[2]\n\t\t\t\t}\n\t\t\t\tself.rawHeaders.push(matches[1], matches[2])\n\t\t\t}\n\t\t})\n\n\t\tself._charset = 'x-user-defined'\n\t\tif (!capability.overrideMimeType) {\n\t\t\tvar mimeType = self.rawHeaders['mime-type']\n\t\t\tif (mimeType) {\n\t\t\t\tvar charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/)\n\t\t\t\tif (charsetMatch) {\n\t\t\t\t\tself._charset = charsetMatch[1].toLowerCase()\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!self._charset)\n\t\t\t\tself._charset = 'utf-8' // best guess\n\t\t}\n\t}\n}\n\ninherits(IncomingMessage, stream.Readable)\n\nIncomingMessage.prototype._read = function () {\n\tvar self = this\n\n\tvar resolve = self._resumeFetch\n\tif (resolve) {\n\t\tself._resumeFetch = null\n\t\tresolve()\n\t}\n}\n\nIncomingMessage.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tvar xhr = self._xhr\n\n\tvar response = null\n\tswitch (self._mode) {\n\t\tcase 'text:vbarray': // For IE9\n\t\t\tif (xhr.readyState !== rStates.DONE)\n\t\t\t\tbreak\n\t\t\ttry {\n\t\t\t\t// This fails in IE8\n\t\t\t\tresponse = new global.VBArray(xhr.responseBody).toArray()\n\t\t\t} catch (e) {}\n\t\t\tif (response !== null) {\n\t\t\t\tself.push(new Buffer(response))\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// Falls through in IE8\t\n\t\tcase 'text':\n\t\t\ttry { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4\n\t\t\t\tresponse = xhr.responseText\n\t\t\t} catch (e) {\n\t\t\t\tself._mode = 'text:vbarray'\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (response.length > self._pos) {\n\t\t\t\tvar newData = response.substr(self._pos)\n\t\t\t\tif (self._charset === 'x-user-defined') {\n\t\t\t\t\tvar buffer = new Buffer(newData.length)\n\t\t\t\t\tfor (var i = 0; i < newData.length; i++)\n\t\t\t\t\t\tbuffer[i] = newData.charCodeAt(i) & 0xff\n\n\t\t\t\t\tself.push(buffer)\n\t\t\t\t} else {\n\t\t\t\t\tself.push(newData, self._charset)\n\t\t\t\t}\n\t\t\t\tself._pos = response.length\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'arraybuffer':\n\t\t\tif (xhr.readyState !== rStates.DONE || !xhr.response)\n\t\t\t\tbreak\n\t\t\tresponse = xhr.response\n\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'moz-chunked-arraybuffer': // take whole\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING || !response)\n\t\t\t\tbreak\n\t\t\tself.push(new Buffer(new Uint8Array(response)))\n\t\t\tbreak\n\t\tcase 'ms-stream':\n\t\t\tresponse = xhr.response\n\t\t\tif (xhr.readyState !== rStates.LOADING)\n\t\t\t\tbreak\n\t\t\tvar reader = new global.MSStreamReader()\n\t\t\treader.onprogress = function () {\n\t\t\t\tif (reader.result.byteLength > self._pos) {\n\t\t\t\t\tself.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))\n\t\t\t\t\tself._pos = reader.result.byteLength\n\t\t\t\t}\n\t\t\t}\n\t\t\treader.onload = function () {\n\t\t\t\tself.push(null)\n\t\t\t}\n\t\t\t// reader.onerror = ??? // TODO: this\n\t\t\treader.readAsArrayBuffer(response)\n\t\t\tbreak\n\t}\n\n\t// The ms-stream case handles end separately in reader.onload()\n\tif (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n\t\tself.push(null)\n\t}\n}\n","var Buffer = require('buffer').Buffer\n\nmodule.exports = function (buf) {\n\t// If the buffer is backed by a Uint8Array, a faster version will work\n\tif (buf instanceof Uint8Array) {\n\t\t// If the buffer isn't a subarray, return the underlying ArrayBuffer\n\t\tif (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n\t\t\treturn buf.buffer\n\t\t} else if (typeof buf.buffer.slice === 'function') {\n\t\t\t// Otherwise we need to get a proper copy\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)\n\t\t}\n\t}\n\n\tif (Buffer.isBuffer(buf)) {\n\t\t// This is the slow version that will work with any Buffer\n\t\t// implementation (even in old browsers)\n\t\tvar arrayCopy = new Uint8Array(buf.length)\n\t\tvar len = buf.length\n\t\tfor (var i = 0; i < len; i++) {\n\t\t\tarrayCopy[i] = buf[i]\n\t\t}\n\t\treturn arrayCopy.buffer\n\t} else {\n\t\tthrow new Error('Argument must be a Buffer')\n\t}\n}\n","var capability = require('./capability')\nvar inherits = require('inherits')\nvar response = require('./response')\nvar stream = require('readable-stream')\nvar toArrayBuffer = require('to-arraybuffer')\n\nvar IncomingMessage = response.IncomingMessage\nvar rStates = response.readyStates\n\nfunction decideMode (preferBinary, useFetch) {\n\tif (capability.fetch && useFetch) {\n\t\treturn 'fetch'\n\t} else if (capability.mozchunkedarraybuffer) {\n\t\treturn 'moz-chunked-arraybuffer'\n\t} else if (capability.msstream) {\n\t\treturn 'ms-stream'\n\t} else if (capability.arraybuffer && preferBinary) {\n\t\treturn 'arraybuffer'\n\t} else if (capability.vbArray && preferBinary) {\n\t\treturn 'text:vbarray'\n\t} else {\n\t\treturn 'text'\n\t}\n}\n\nvar ClientRequest = module.exports = function (opts) {\n\tvar self = this\n\tstream.Writable.call(self)\n\n\tself._opts = opts\n\tself._body = []\n\tself._headers = {}\n\tif (opts.auth)\n\t\tself.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))\n\tObject.keys(opts.headers).forEach(function (name) {\n\t\tself.setHeader(name, opts.headers[name])\n\t})\n\n\tvar preferBinary\n\tvar useFetch = true\n\tif (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {\n\t\t// If the use of XHR should be preferred. Not typically needed.\n\t\tuseFetch = false\n\t\tpreferBinary = true\n\t} else if (opts.mode === 'prefer-streaming') {\n\t\t// If streaming is a high priority but binary compatibility and\n\t\t// the accuracy of the 'content-type' header aren't\n\t\tpreferBinary = false\n\t} else if (opts.mode === 'allow-wrong-content-type') {\n\t\t// If streaming is more important than preserving the 'content-type' header\n\t\tpreferBinary = !capability.overrideMimeType\n\t} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n\t\t// Use binary if text streaming may corrupt data or the content-type header, or for speed\n\t\tpreferBinary = true\n\t} else {\n\t\tthrow new Error('Invalid value for opts.mode')\n\t}\n\tself._mode = decideMode(preferBinary, useFetch)\n\tself._fetchTimer = null\n\n\tself.on('finish', function () {\n\t\tself._onFinish()\n\t})\n}\n\ninherits(ClientRequest, stream.Writable)\n\nClientRequest.prototype.setHeader = function (name, value) {\n\tvar self = this\n\tvar lowerName = name.toLowerCase()\n\t// This check is not necessary, but it prevents warnings from browsers about setting unsafe\n\t// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n\t// http-browserify did it, so I will too.\n\tif (unsafeHeaders.indexOf(lowerName) !== -1)\n\t\treturn\n\n\tself._headers[lowerName] = {\n\t\tname: name,\n\t\tvalue: value\n\t}\n}\n\nClientRequest.prototype.getHeader = function (name) {\n\tvar header = this._headers[name.toLowerCase()]\n\tif (header)\n\t\treturn header.value\n\treturn null\n}\n\nClientRequest.prototype.removeHeader = function (name) {\n\tvar self = this\n\tdelete self._headers[name.toLowerCase()]\n}\n\nClientRequest.prototype._onFinish = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\tvar opts = self._opts\n\n\tvar headersObj = self._headers\n\tvar body = null\n\tif (opts.method !== 'GET' && opts.method !== 'HEAD') {\n\t\tif (capability.arraybuffer) {\n\t\t\tbody = toArrayBuffer(Buffer.concat(self._body))\n\t\t} else if (capability.blobConstructor) {\n\t\t\tbody = new global.Blob(self._body.map(function (buffer) {\n\t\t\t\treturn toArrayBuffer(buffer)\n\t\t\t}), {\n\t\t\t\ttype: (headersObj['content-type'] || {}).value || ''\n\t\t\t})\n\t\t} else {\n\t\t\t// get utf8 string\n\t\t\tbody = Buffer.concat(self._body).toString()\n\t\t}\n\t}\n\n\t// create flattened list of headers\n\tvar headersList = []\n\tObject.keys(headersObj).forEach(function (keyName) {\n\t\tvar name = headersObj[keyName].name\n\t\tvar value = headersObj[keyName].value\n\t\tif (Array.isArray(value)) {\n\t\t\tvalue.forEach(function (v) {\n\t\t\t\theadersList.push([name, v])\n\t\t\t})\n\t\t} else {\n\t\t\theadersList.push([name, value])\n\t\t}\n\t})\n\n\tif (self._mode === 'fetch') {\n\t\tvar signal = null\n\t\tvar fetchTimer = null\n\t\tif (capability.abortController) {\n\t\t\tvar controller = new AbortController()\n\t\t\tsignal = controller.signal\n\t\t\tself._fetchAbortController = controller\n\n\t\t\tif ('requestTimeout' in opts && opts.requestTimeout !== 0) {\n\t\t\t\tself._fetchTimer = global.setTimeout(function () {\n\t\t\t\t\tself.emit('requestTimeout')\n\t\t\t\t\tif (self._fetchAbortController)\n\t\t\t\t\t\tself._fetchAbortController.abort()\n\t\t\t\t}, opts.requestTimeout)\n\t\t\t}\n\t\t}\n\n\t\tglobal.fetch(self._opts.url, {\n\t\t\tmethod: self._opts.method,\n\t\t\theaders: headersList,\n\t\t\tbody: body || undefined,\n\t\t\tmode: 'cors',\n\t\t\tcredentials: opts.withCredentials ? 'include' : 'same-origin',\n\t\t\tsignal: signal\n\t\t}).then(function (response) {\n\t\t\tself._fetchResponse = response\n\t\t\tself._connect()\n\t\t}, function (reason) {\n\t\t\tglobal.clearTimeout(self._fetchTimer)\n\t\t\tif (!self._destroyed)\n\t\t\t\tself.emit('error', reason)\n\t\t})\n\t} else {\n\t\tvar xhr = self._xhr = new global.XMLHttpRequest()\n\t\ttry {\n\t\t\txhr.open(self._opts.method, self._opts.url, true)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// Can't set responseType on really old browsers\n\t\tif ('responseType' in xhr)\n\t\t\txhr.responseType = self._mode.split(':')[0]\n\n\t\tif ('withCredentials' in xhr)\n\t\t\txhr.withCredentials = !!opts.withCredentials\n\n\t\tif (self._mode === 'text' && 'overrideMimeType' in xhr)\n\t\t\txhr.overrideMimeType('text/plain; charset=x-user-defined')\n\n\t\tif ('requestTimeout' in opts) {\n\t\t\txhr.timeout = opts.requestTimeout\n\t\t\txhr.ontimeout = function () {\n\t\t\t\tself.emit('requestTimeout')\n\t\t\t}\n\t\t}\n\n\t\theadersList.forEach(function (header) {\n\t\t\txhr.setRequestHeader(header[0], header[1])\n\t\t})\n\n\t\tself._response = null\n\t\txhr.onreadystatechange = function () {\n\t\t\tswitch (xhr.readyState) {\n\t\t\t\tcase rStates.LOADING:\n\t\t\t\tcase rStates.DONE:\n\t\t\t\t\tself._onXHRProgress()\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// Necessary for streaming in Firefox, since xhr.response is ONLY defined\n\t\t// in onprogress, not in onreadystatechange with xhr.readyState = 3\n\t\tif (self._mode === 'moz-chunked-arraybuffer') {\n\t\t\txhr.onprogress = function () {\n\t\t\t\tself._onXHRProgress()\n\t\t\t}\n\t\t}\n\n\t\txhr.onerror = function () {\n\t\t\tif (self._destroyed)\n\t\t\t\treturn\n\t\t\tself.emit('error', new Error('XHR error'))\n\t\t}\n\n\t\ttry {\n\t\t\txhr.send(body)\n\t\t} catch (err) {\n\t\t\tprocess.nextTick(function () {\n\t\t\t\tself.emit('error', err)\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t}\n}\n\n/**\n * Checks if xhr.status is readable and non-zero, indicating no error.\n * Even though the spec says it should be available in readyState 3,\n * accessing it throws an exception in IE8\n */\nfunction statusValid (xhr) {\n\ttry {\n\t\tvar status = xhr.status\n\t\treturn (status !== null && status !== 0)\n\t} catch (e) {\n\t\treturn false\n\t}\n}\n\nClientRequest.prototype._onXHRProgress = function () {\n\tvar self = this\n\n\tif (!statusValid(self._xhr) || self._destroyed)\n\t\treturn\n\n\tif (!self._response)\n\t\tself._connect()\n\n\tself._response._onXHRProgress()\n}\n\nClientRequest.prototype._connect = function () {\n\tvar self = this\n\n\tif (self._destroyed)\n\t\treturn\n\n\tself._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._fetchTimer)\n\tself._response.on('error', function(err) {\n\t\tself.emit('error', err)\n\t})\n\n\tself.emit('response', self._response)\n}\n\nClientRequest.prototype._write = function (chunk, encoding, cb) {\n\tvar self = this\n\n\tself._body.push(chunk)\n\tcb()\n}\n\nClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {\n\tvar self = this\n\tself._destroyed = true\n\tglobal.clearTimeout(self._fetchTimer)\n\tif (self._response)\n\t\tself._response._destroyed = true\n\tif (self._xhr)\n\t\tself._xhr.abort()\n\telse if (self._fetchAbortController)\n\t\tself._fetchAbortController.abort()\n}\n\nClientRequest.prototype.end = function (data, encoding, cb) {\n\tvar self = this\n\tif (typeof data === 'function') {\n\t\tcb = data\n\t\tdata = undefined\n\t}\n\n\tstream.Writable.prototype.end.call(self, data, encoding, cb)\n}\n\nClientRequest.prototype.flushHeaders = function () {}\nClientRequest.prototype.setTimeout = function () {}\nClientRequest.prototype.setNoDelay = function () {}\nClientRequest.prototype.setSocketKeepAlive = function () {}\n\n// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\nvar unsafeHeaders = [\n\t'accept-charset',\n\t'accept-encoding',\n\t'access-control-request-headers',\n\t'access-control-request-method',\n\t'connection',\n\t'content-length',\n\t'cookie',\n\t'cookie2',\n\t'date',\n\t'dnt',\n\t'expect',\n\t'host',\n\t'keep-alive',\n\t'origin',\n\t'referer',\n\t'te',\n\t'trailer',\n\t'transfer-encoding',\n\t'upgrade',\n\t'via'\n]\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","module.exports = {\n  \"100\": \"Continue\",\n  \"101\": \"Switching Protocols\",\n  \"102\": \"Processing\",\n  \"200\": \"OK\",\n  \"201\": \"Created\",\n  \"202\": \"Accepted\",\n  \"203\": \"Non-Authoritative Information\",\n  \"204\": \"No Content\",\n  \"205\": \"Reset Content\",\n  \"206\": \"Partial Content\",\n  \"207\": \"Multi-Status\",\n  \"208\": \"Already Reported\",\n  \"226\": \"IM Used\",\n  \"300\": \"Multiple Choices\",\n  \"301\": \"Moved Permanently\",\n  \"302\": \"Found\",\n  \"303\": \"See Other\",\n  \"304\": \"Not Modified\",\n  \"305\": \"Use Proxy\",\n  \"307\": \"Temporary Redirect\",\n  \"308\": \"Permanent Redirect\",\n  \"400\": \"Bad Request\",\n  \"401\": \"Unauthorized\",\n  \"402\": \"Payment Required\",\n  \"403\": \"Forbidden\",\n  \"404\": \"Not Found\",\n  \"405\": \"Method Not Allowed\",\n  \"406\": \"Not Acceptable\",\n  \"407\": \"Proxy Authentication Required\",\n  \"408\": \"Request Timeout\",\n  \"409\": \"Conflict\",\n  \"410\": \"Gone\",\n  \"411\": \"Length Required\",\n  \"412\": \"Precondition Failed\",\n  \"413\": \"Payload Too Large\",\n  \"414\": \"URI Too Long\",\n  \"415\": \"Unsupported Media Type\",\n  \"416\": \"Range Not Satisfiable\",\n  \"417\": \"Expectation Failed\",\n  \"418\": \"I'm a teapot\",\n  \"421\": \"Misdirected Request\",\n  \"422\": \"Unprocessable Entity\",\n  \"423\": \"Locked\",\n  \"424\": \"Failed Dependency\",\n  \"425\": \"Unordered Collection\",\n  \"426\": \"Upgrade Required\",\n  \"428\": \"Precondition Required\",\n  \"429\": \"Too Many Requests\",\n  \"431\": \"Request Header Fields Too Large\",\n  \"451\": \"Unavailable For Legal Reasons\",\n  \"500\": \"Internal Server Error\",\n  \"501\": \"Not Implemented\",\n  \"502\": \"Bad Gateway\",\n  \"503\": \"Service Unavailable\",\n  \"504\": \"Gateway Timeout\",\n  \"505\": \"HTTP Version Not Supported\",\n  \"506\": \"Variant Also Negotiates\",\n  \"507\": \"Insufficient Storage\",\n  \"508\": \"Loop Detected\",\n  \"509\": \"Bandwidth Limit Exceeded\",\n  \"510\": \"Not Extended\",\n  \"511\": \"Network Authentication Required\"\n}\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","var ClientRequest = require('./lib/request')\nvar response = require('./lib/response')\nvar extend = require('xtend')\nvar statusCodes = require('builtin-status-codes')\nvar url = require('url')\n\nvar http = exports\n\nhttp.request = function (opts, cb) {\n\tif (typeof opts === 'string')\n\t\topts = url.parse(opts)\n\telse\n\t\topts = extend(opts)\n\n\t// Normally, the page is loaded from http or https, so not specifying a protocol\n\t// will result in a (valid) protocol-relative url. However, this won't work if\n\t// the protocol is something else, like 'file:'\n\tvar defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''\n\n\tvar protocol = opts.protocol || defaultProtocol\n\tvar host = opts.hostname || opts.host\n\tvar port = opts.port\n\tvar path = opts.path || '/'\n\n\t// Necessary for IPv6 addresses\n\tif (host && host.indexOf(':') !== -1)\n\t\thost = '[' + host + ']'\n\n\t// This may be a relative url. The browser should always be able to interpret it correctly.\n\topts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path\n\topts.method = (opts.method || 'GET').toUpperCase()\n\topts.headers = opts.headers || {}\n\n\t// Also valid opts.auth, opts.mode\n\n\tvar req = new ClientRequest(opts)\n\tif (cb)\n\t\treq.on('response', cb)\n\treturn req\n}\n\nhttp.get = function get (opts, cb) {\n\tvar req = http.request(opts, cb)\n\treq.end()\n\treturn req\n}\n\nhttp.ClientRequest = ClientRequest\nhttp.IncomingMessage = response.IncomingMessage\n\nhttp.Agent = function () {}\nhttp.Agent.defaultMaxSockets = 4\n\nhttp.globalAgent = new http.Agent()\n\nhttp.STATUS_CODES = statusCodes\n\nhttp.METHODS = [\n\t'CHECKOUT',\n\t'CONNECT',\n\t'COPY',\n\t'DELETE',\n\t'GET',\n\t'HEAD',\n\t'LOCK',\n\t'M-SEARCH',\n\t'MERGE',\n\t'MKACTIVITY',\n\t'MKCOL',\n\t'MOVE',\n\t'NOTIFY',\n\t'OPTIONS',\n\t'PATCH',\n\t'POST',\n\t'PROPFIND',\n\t'PROPPATCH',\n\t'PURGE',\n\t'PUT',\n\t'REPORT',\n\t'SEARCH',\n\t'SUBSCRIBE',\n\t'TRACE',\n\t'UNLOCK',\n\t'UNSUBSCRIBE'\n]","var http = require('http')\nvar url = require('url')\n\nvar https = module.exports\n\nfor (var key in http) {\n  if (http.hasOwnProperty(key)) https[key] = http[key]\n}\n\nhttps.request = function (params, cb) {\n  params = validateParams(params)\n  return http.request.call(this, params, cb)\n}\n\nhttps.get = function (params, cb) {\n  params = validateParams(params)\n  return http.get.call(this, params, cb)\n}\n\nfunction validateParams (params) {\n  if (typeof params === 'string') {\n    params = url.parse(params)\n  }\n  if (!params.protocol) {\n    params.protocol = 'https:'\n  }\n  if (params.protocol !== 'https:') {\n    throw new Error('Protocol \"' + params.protocol + '\" not supported. Expected \"https:\"')\n  }\n  return params\n}\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexports.__esModule = true;\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar validateUrl = function (url) {\n    if (url.startsWith(\"http://\")) {\n        return {\n            protocol: \"http\",\n            host: url.substr(7).split(\":\")[0],\n            port: url.substr(7).split(\":\")[1],\n            lib: http\n        };\n    }\n    else if (url.startsWith(\"https://\")) {\n        return {\n            protocol: \"https\",\n            host: url.substr(8).split(\":\")[0],\n            port: url.substr(8).split(\":\")[1],\n            lib: https\n        };\n    }\n    else {\n        throw new Error(\"URL most be http://ip_or_domain:port or https://ip_or_domain:port\");\n    }\n};\nexports.deploy = function (url, options) {\n    var urlValidated = validateUrl(url);\n    return new Promise(function (resolve, reject) {\n        var req = urlValidated.lib.request(__assign({ headers: {\n                \"Content-Type\": \"application/json\"\n            }, method: \"POST\", path: \"/api/deploy\", host: urlValidated.host }, (urlValidated.port ? { port: urlValidated.port } : {})), function (res) {\n            var data = \"\";\n            res.on(\"data\", function (chunk) {\n                data += chunk;\n                res.on(\"end\", function () {\n                    resolve(data);\n                });\n            });\n        });\n        req.write(JSON.stringify(options));\n        req.end();\n        req.on(\"error\", function (e) {\n            reject(e);\n        });\n    });\n};\nexports.exploreDeploy = function (url, options) {\n    var urlValidated = validateUrl(url);\n    return new Promise(function (resolve, reject) {\n        var req = urlValidated.lib.request(__assign({ headers: {\n                \"Content-Type\": \"application/json\"\n            }, method: \"POST\", path: \"/api/explore-deploy\", host: urlValidated.host }, (urlValidated.port ? { port: urlValidated.port } : {})), function (res) {\n            var data = \"\";\n            res.on(\"data\", function (chunk) {\n                data += chunk;\n                res.on(\"end\", function () {\n                    resolve(data);\n                });\n            });\n        });\n        req.write(options.term);\n        req.end();\n        req.on(\"error\", function (e) {\n            reject(e);\n        });\n    });\n};\nexports.blocks = function (url, options) {\n    return new Promise(function (resolve, reject) {\n        var urlValidated = validateUrl(url);\n        var req = urlValidated.lib.request(__assign({ headers: {\n                \"Content-Type\": \"application/json\"\n            }, method: \"GET\", path: \"/api/blocks/\" + options.position, host: urlValidated.host }, (urlValidated.port ? { port: urlValidated.port } : {})), function (res) {\n            var data = \"\";\n            res.on(\"data\", function (chunk) {\n                data += chunk;\n                res.on(\"end\", function () {\n                    resolve(data);\n                });\n            });\n        });\n        req.end();\n        req.on(\"error\", function (e) {\n            reject(e);\n        });\n    });\n};\nexports.prepareDeploy = function (url, options) {\n    var urlValidated = validateUrl(url);\n    return new Promise(function (resolve, reject) {\n        var req = urlValidated.lib.request(__assign({ headers: {\n                \"Content-Type\": \"application/json\"\n            }, method: \"POST\", path: \"/api/prepare-deploy\", host: urlValidated.host }, (urlValidated.port ? { port: urlValidated.port } : {})), function (res) {\n            var data = \"\";\n            res.on(\"data\", function (chunk) {\n                data += chunk;\n                res.on(\"end\", function () {\n                    resolve(data);\n                });\n            });\n        });\n        req.write(JSON.stringify(options));\n        req.end();\n        req.on(\"error\", function (e) {\n            reject(e);\n        });\n    });\n};\nexports.dataAtName = function (url, options) {\n    var urlValidated = validateUrl(url);\n    return new Promise(function (resolve, reject) {\n        var req = urlValidated.lib.request(__assign({ headers: {\n                \"Content-Type\": \"application/json\"\n            }, method: \"POST\", path: \"/api/data-at-name\", host: urlValidated.host }, (urlValidated.port ? { port: urlValidated.port } : {})), function (res) {\n            var data = \"\";\n            res.on(\"data\", function (chunk) {\n                data += chunk;\n                res.on(\"end\", function () {\n                    resolve(data);\n                });\n            });\n        });\n        req.write(JSON.stringify(options));\n        req.end();\n        req.on(\"error\", function (e) {\n            reject(e);\n        });\n    });\n};\n","var ERROR_MSG_INPUT = 'Input must be an string, Buffer or Uint8Array'\n\n// For convenience, let people hash a string, not just a Uint8Array\nfunction normalizeInput (input) {\n  var ret\n  if (input instanceof Uint8Array) {\n    ret = input\n  } else if (input instanceof Buffer) {\n    ret = new Uint8Array(input)\n  } else if (typeof (input) === 'string') {\n    ret = new Uint8Array(Buffer.from(input, 'utf8'))\n  } else {\n    throw new Error(ERROR_MSG_INPUT)\n  }\n  return ret\n}\n\n// Converts a Uint8Array to a hexadecimal string\n// For example, toHex([255, 0, 255]) returns \"ff00ff\"\nfunction toHex (bytes) {\n  return Array.prototype.map.call(bytes, function (n) {\n    return (n < 16 ? '0' : '') + n.toString(16)\n  }).join('')\n}\n\n// Converts any value in [0...2^32-1] to an 8-character hex string\nfunction uint32ToHex (val) {\n  return (0x100000000 + val).toString(16).substring(1)\n}\n\n// For debugging: prints out hash state in the same format as the RFC\n// sample computation exactly, so that you can diff\nfunction debugPrint (label, arr, size) {\n  var msg = '\\n' + label + ' = '\n  for (var i = 0; i < arr.length; i += 2) {\n    if (size === 32) {\n      msg += uint32ToHex(arr[i]).toUpperCase()\n      msg += ' '\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n    } else if (size === 64) {\n      msg += uint32ToHex(arr[i + 1]).toUpperCase()\n      msg += uint32ToHex(arr[i]).toUpperCase()\n    } else throw new Error('Invalid size ' + size)\n    if (i % 6 === 4) {\n      msg += '\\n' + new Array(label.length + 4).join(' ')\n    } else if (i < arr.length - 2) {\n      msg += ' '\n    }\n  }\n  console.log(msg)\n}\n\n// For performance testing: generates N bytes of input, hashes M times\n// Measures and prints MB/second hash performance each time\nfunction testSpeed (hashFn, N, M) {\n  var startMs = new Date().getTime()\n\n  var input = new Uint8Array(N)\n  for (var i = 0; i < N; i++) {\n    input[i] = i % 256\n  }\n  var genMs = new Date().getTime()\n  console.log('Generated random input in ' + (genMs - startMs) + 'ms')\n  startMs = genMs\n\n  for (i = 0; i < M; i++) {\n    var hashHex = hashFn(input)\n    var hashMs = new Date().getTime()\n    var ms = hashMs - startMs\n    startMs = hashMs\n    console.log('Hashed in ' + ms + 'ms: ' + hashHex.substring(0, 20) + '...')\n    console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + ' MB PER SECOND')\n  }\n}\n\nmodule.exports = {\n  normalizeInput: normalizeInput,\n  toHex: toHex,\n  debugPrint: debugPrint,\n  testSpeed: testSpeed\n}\n","// Blake2B in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nvar util = require('./util')\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA (v, a, b) {\n  var o0 = v[a] + v[b]\n  var o1 = v[a + 1] + v[b + 1]\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC (v, a, b0, b1) {\n  var o0 = v[a] + b0\n  if (b0 < 0) {\n    o0 += 0x100000000\n  }\n  var o1 = v[a + 1] + b1\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// Little-endian byte access\nfunction B2B_GET32 (arr, i) {\n  return (arr[i] ^\n  (arr[i + 1] << 8) ^\n  (arr[i + 2] << 16) ^\n  (arr[i + 3] << 24))\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G (a, b, c, d, ix, iy) {\n  var x0 = m[ix]\n  var x1 = m[ix + 1]\n  var y0 = m[iy]\n  var y1 = m[iy + 1]\n\n  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  var xor0 = v[d] ^ v[a]\n  var xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = xor1\n  v[d + 1] = xor0\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor0 >>> 24) ^ (xor1 << 8)\n  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\n\n  ADD64AA(v, a, b)\n  ADD64AC(v, a, y0, y1)\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a]\n  xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = (xor0 >>> 16) ^ (xor1 << 16)\n  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor1 >>> 31) ^ (xor0 << 1)\n  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\n}\n\n// Initialization Vector\nvar BLAKE2B_IV32 = new Uint32Array([\n  0xF3BCC908, 0x6A09E667, 0x84CAA73B, 0xBB67AE85,\n  0xFE94F82B, 0x3C6EF372, 0x5F1D36F1, 0xA54FF53A,\n  0xADE682D1, 0x510E527F, 0x2B3E6C1F, 0x9B05688C,\n  0xFB41BD6B, 0x1F83D9AB, 0x137E2179, 0x5BE0CD19\n])\n\nvar SIGMA8 = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3\n]\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nvar SIGMA82 = new Uint8Array(SIGMA8.map(function (x) { return x * 2 }))\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nvar v = new Uint32Array(32)\nvar m = new Uint32Array(32)\nfunction blake2bCompress (ctx, last) {\n  var i = 0\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i]\n    v[i + 16] = BLAKE2B_IV32[i]\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t\n  v[25] = v[25] ^ (ctx.t / 0x100000000)\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28]\n    v[29] = ~v[29]\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i)\n  }\n\n  // twelve rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 64)\n  for (i = 0; i < 12; i++) {\n    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\n  }\n  // util.debugPrint('   (i=12) v[16]', v, 64)\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\n  }\n  // util.debugPrint('h[8]', ctx.h, 64)\n}\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\nfunction blake2bInit (outlen, key) {\n  if (outlen === 0 || outlen > 64) {\n    throw new Error('Illegal output length, expected 0 < length <= 64')\n  }\n  if (key && key.length > 64) {\n    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')\n  }\n\n  // state, 'param block'\n  var ctx = {\n    b: new Uint8Array(128),\n    h: new Uint32Array(16),\n    t: 0, // input count\n    c: 0, // pointer within buffer\n    outlen: outlen // output length in bytes\n  }\n\n  // initialize hash state\n  for (var i = 0; i < 16; i++) {\n    ctx.h[i] = BLAKE2B_IV32[i]\n  }\n  var keylen = key ? key.length : 0\n  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(ctx, key)\n    // at the end\n    ctx.c = 128\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate (ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 128) { // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2bCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n\n  while (ctx.c < 128) { // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2bCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  var out = new Uint8Array(ctx.outlen)\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\n  }\n  return out\n}\n\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2b (input, key, outlen) {\n  // preprocess inputs\n  outlen = outlen || 64\n  input = util.normalizeInput(input)\n\n  // do the math\n  var ctx = blake2bInit(outlen, key)\n  blake2bUpdate(ctx, input)\n  return blake2bFinal(ctx)\n}\n\n// Computes the BLAKE2B hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2bHex (input, key, outlen) {\n  var output = blake2b(input, key, outlen)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2b: blake2b,\n  blake2bHex: blake2bHex,\n  blake2bInit: blake2bInit,\n  blake2bUpdate: blake2bUpdate,\n  blake2bFinal: blake2bFinal\n}\n","// BLAKE2s hash function in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nvar util = require('./util')\n\n// Little-endian byte access.\n// Expects a Uint8Array and an index\n// Returns the little-endian uint32 at v[i..i+3]\nfunction B2S_GET32 (v, i) {\n  return v[i] ^ (v[i + 1] << 8) ^ (v[i + 2] << 16) ^ (v[i + 3] << 24)\n}\n\n// Mixing function G.\nfunction B2S_G (a, b, c, d, x, y) {\n  v[a] = v[a] + v[b] + x\n  v[d] = ROTR32(v[d] ^ v[a], 16)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 12)\n  v[a] = v[a] + v[b] + y\n  v[d] = ROTR32(v[d] ^ v[a], 8)\n  v[c] = v[c] + v[d]\n  v[b] = ROTR32(v[b] ^ v[c], 7)\n}\n\n// 32-bit right rotation\n// x should be a uint32\n// y must be between 1 and 31, inclusive\nfunction ROTR32 (x, y) {\n  return (x >>> y) ^ (x << (32 - y))\n}\n\n// Initialization Vector.\nvar BLAKE2S_IV = new Uint32Array([\n  0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n  0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19])\n\nvar SIGMA = new Uint8Array([\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,\n  11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,\n  7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,\n  9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,\n  2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,\n  12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,\n  13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,\n  6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,\n  10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0])\n\n// Compression function. \"last\" flag indicates last block\nvar v = new Uint32Array(16)\nvar m = new Uint32Array(16)\nfunction blake2sCompress (ctx, last) {\n  var i = 0\n  for (i = 0; i < 8; i++) { // init work variables\n    v[i] = ctx.h[i]\n    v[i + 8] = BLAKE2S_IV[i]\n  }\n\n  v[12] ^= ctx.t // low 32 bits of offset\n  v[13] ^= (ctx.t / 0x100000000) // high 32 bits\n  if (last) { // last block flag set ?\n    v[14] = ~v[14]\n  }\n\n  for (i = 0; i < 16; i++) { // get little-endian words\n    m[i] = B2S_GET32(ctx.b, 4 * i)\n  }\n\n  // ten rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 32)\n  for (i = 0; i < 10; i++) {\n    // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)\n    B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]])\n    B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]])\n    B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]])\n    B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]])\n    B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]])\n    B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]])\n    B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]])\n    B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]])\n  }\n  // util.debugPrint('   (i=10) v[16]', v, 32)\n\n  for (i = 0; i < 8; i++) {\n    ctx.h[i] ^= v[i] ^ v[i + 8]\n  }\n  // util.debugPrint('h[8]', ctx.h, 32)\n}\n\n// Creates a BLAKE2s hashing context\n// Requires an output length between 1 and 32 bytes\n// Takes an optional Uint8Array key\nfunction blake2sInit (outlen, key) {\n  if (!(outlen > 0 && outlen <= 32)) {\n    throw new Error('Incorrect output length, should be in [1, 32]')\n  }\n  var keylen = key ? key.length : 0\n  if (key && !(keylen > 0 && keylen <= 32)) {\n    throw new Error('Incorrect key length, should be in [1, 32]')\n  }\n\n  var ctx = {\n    h: new Uint32Array(BLAKE2S_IV), // hash state\n    b: new Uint32Array(64), // input block\n    c: 0, // pointer within block\n    t: 0, // input count\n    outlen: outlen // output length in bytes\n  }\n  ctx.h[0] ^= 0x01010000 ^ (keylen << 8) ^ outlen\n\n  if (keylen > 0) {\n    blake2sUpdate(ctx, key)\n    ctx.c = 64 // at the end\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2s streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2sUpdate (ctx, input) {\n  for (var i = 0; i < input.length; i++) {\n    if (ctx.c === 64) { // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2sCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2s streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2sFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n  while (ctx.c < 64) { // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2sCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  var out = new Uint8Array(ctx.outlen)\n  for (var i = 0; i < ctx.outlen; i++) {\n    out[i] = (ctx.h[i >> 2] >> (8 * (i & 3))) & 0xFF\n  }\n  return out\n}\n\n// Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2s (input, key, outlen) {\n  // preprocess inputs\n  outlen = outlen || 32\n  input = util.normalizeInput(input)\n\n  // do the math\n  var ctx = blake2sInit(outlen, key)\n  blake2sUpdate(ctx, input)\n  return blake2sFinal(ctx)\n}\n\n// Computes the BLAKE2S hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2sHex (input, key, outlen) {\n  var output = blake2s(input, key, outlen)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2s: blake2s,\n  blake2sHex: blake2sHex,\n  blake2sInit: blake2sInit,\n  blake2sUpdate: blake2sUpdate,\n  blake2sFinal: blake2sFinal\n}\n","var b2b = require('./blake2b')\nvar b2s = require('./blake2s')\n\nmodule.exports = {\n  blake2b: b2b.blake2b,\n  blake2bHex: b2b.blake2bHex,\n  blake2bInit: b2b.blake2bInit,\n  blake2bUpdate: b2b.blake2bUpdate,\n  blake2bFinal: b2b.blake2bFinal,\n  blake2s: b2s.blake2s,\n  blake2sHex: b2s.blake2sHex,\n  blake2sInit: b2s.blake2sInit,\n  blake2sUpdate: b2s.blake2sUpdate,\n  blake2sFinal: b2s.blake2sFinal\n}\n","module.exports={_args:[[\"elliptic@6.5.3\",\"/home/zebedee/dev/dappy\"]],_from:\"elliptic@6.5.3\",_id:\"elliptic@6.5.3\",_inBundle:!1,_integrity:\"sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw==\",_location:\"/rchain-toolkit/elliptic\",_phantomChildren:{},_requested:{type:\"version\",registry:!0,raw:\"elliptic@6.5.3\",name:\"elliptic\",escapedName:\"elliptic\",rawSpec:\"6.5.3\",saveSpec:null,fetchSpec:\"6.5.3\"},_requiredBy:[\"/rchain-toolkit\"],_resolved:\"https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz\",_spec:\"6.5.3\",_where:\"/home/zebedee/dev/dappy\",author:{name:\"Fedor Indutny\",email:\"fedor@indutny.com\"},bugs:{url:\"https://github.com/indutny/elliptic/issues\"},dependencies:{\"bn.js\":\"^4.4.0\",brorand:\"^1.0.1\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.0\",inherits:\"^2.0.1\",\"minimalistic-assert\":\"^1.0.0\",\"minimalistic-crypto-utils\":\"^1.0.0\"},description:\"EC cryptography\",devDependencies:{brfs:\"^1.4.3\",coveralls:\"^3.0.8\",grunt:\"^1.0.4\",\"grunt-browserify\":\"^5.0.0\",\"grunt-cli\":\"^1.2.0\",\"grunt-contrib-connect\":\"^1.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^1.0.1\",\"grunt-mocha-istanbul\":\"^3.0.1\",\"grunt-saucelabs\":\"^9.0.1\",istanbul:\"^0.4.2\",jscs:\"^3.0.7\",jshint:\"^2.10.3\",mocha:\"^6.2.2\"},files:[\"lib\"],homepage:\"https://github.com/indutny/elliptic\",keywords:[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],license:\"MIT\",main:\"lib/elliptic.js\",name:\"elliptic\",repository:{type:\"git\",url:\"git+ssh://git@github.com/indutny/elliptic.git\"},scripts:{jscs:\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",jshint:\"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js\",lint:\"npm run jscs && npm run jshint\",test:\"npm run lint && npm run unit\",unit:\"istanbul test _mocha --reporter=spec test/index.js\",version:\"grunt dist && git add dist/\"},version:\"6.5.3\"};","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","'use strict';\n\nvar utils = exports;\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n    return res;\n  }\n  if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0)\n      msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2)\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n  } else {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi)\n        res.push(hi, lo);\n      else\n        res.push(lo);\n    }\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n","'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  naf.fill(0);\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (var i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    []\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n           this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n                                     bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n","var r;\n\nmodule.exports = function rand(len) {\n  if (!r)\n    r = new Rand(null);\n\n  return r.generate(len);\n};\n\nfunction Rand(rand) {\n  this.rand = rand;\n}\nmodule.exports.Rand = Rand;\n\nRand.prototype.generate = function generate(len) {\n  return this._rand(len);\n};\n\n// Emulate crypto API using randy\nRand.prototype._rand = function _rand(n) {\n  if (this.rand.getBytes)\n    return this.rand.getBytes(n);\n\n  var res = new Uint8Array(n);\n  for (var i = 0; i < res.length; i++)\n    res[i] = this.rand.getByte();\n  return res;\n};\n\nif (typeof self === 'object') {\n  if (self.crypto && self.crypto.getRandomValues) {\n    // Modern browsers\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.crypto.getRandomValues(arr);\n      return arr;\n    };\n  } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n    // IE\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.msCrypto.getRandomValues(arr);\n      return arr;\n    };\n\n  // Safari's WebWorkers do not have `crypto`\n  } else if (typeof window === 'object') {\n    // Old junk\n    Rand.prototype._rand = function() {\n      throw new Error('Not implemented yet');\n    };\n  }\n} else {\n  // Node.js or Web worker with no crypto support\n  try {\n    var crypto = require('crypto');\n    if (typeof crypto.randomBytes !== 'function')\n      throw new Error('Not supported');\n\n    Rand.prototype._rand = function _rand(n) {\n      return crypto.randomBytes(n);\n    };\n  } catch (e) {\n  }\n}\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  for (var j = 0; j < naf.length; j += doubles.step) {\n    var nafW = 0;\n    for (var k = j + doubles.step - 1; k >= j; k--)\n      nafW = (nafW << 1) + naf[k];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (var j = 0; j < repr.length; j++) {\n      var nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var k = 0; i >= 0 && naf[i] === 0; i--)\n      k++;\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n                                                       points,\n                                                       coeffs,\n                                                       len,\n                                                       jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  for (var i = 0; i < len; i++) {\n    var p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (var i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b] /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (var j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (var i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (var j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (var j = 0; j < len; j++) {\n      var z = tmp[j];\n      var p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (var i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n                          bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction ShortCurve(conf) {\n  Base.call(this, 'short', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new BN(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new BN(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new BN(vec.a, 16),\n        b: new BN(vec.b, 16)\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : BN.mont(num);\n  var tinv = new BN(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n\n  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new BN(1);\n  var y1 = new BN(0);\n  var x2 = new BN(0);\n  var y2 = new BN(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  var r;\n  var x;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    r = v.sub(q.mul(u));\n    x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.negative) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.negative) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 }\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd =\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n  var npoints = this._endoWnafT1;\n  var ncoeffs = this._endoWnafT2;\n  for (var i = 0; i < points.length; i++) {\n    var split = this._endoSplit(coeffs[i]);\n    var p = points[i];\n    var beta = p._getBeta();\n\n    if (split.k1.negative) {\n      split.k1.ineg();\n      p = p.neg(true);\n    }\n    if (split.k2.negative) {\n      split.k2.ineg();\n      beta = beta.neg(true);\n    }\n\n    npoints[i * 2] = p;\n    npoints[i * 2 + 1] = beta;\n    ncoeffs[i * 2] = split.k1;\n    ncoeffs[i * 2 + 1] = split.k2;\n  }\n  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n  // Clean-up references to points and coefficients\n  for (var j = 0; j < i * 2; j++) {\n    npoints[j] = null;\n    ncoeffs[j] = null;\n  }\n  return res;\n};\n\nfunction Point(curve, x, y, isRed) {\n  Base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits(Point, Base.BasePoint);\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    var endoMul = function(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    };\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul)\n      }\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1)\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1)\n    }\n  } ];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point))\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point))\n    }\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new BN(k, 16);\n  if (this.isInfinity())\n    return this;\n  else if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    var negate = function(p) {\n      return p.neg();\n    };\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate)\n      }\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  Base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new BN(0);\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = new BN(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (var i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (var i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new BN(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.eqXToP = function eqXToP(x) {\n  var zs = this.z.redSqr();\n  var rx = x.toRed(this.curve.red).redMul(zs);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(zs);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar utils = require('../utils');\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.i4 = new BN(4).toRed(this.red).redInvm();\n  this.two = new BN(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new BN(x, 16);\n    this.z = new BN(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  return this.point(utils.toArray(bytes, enc), 1);\n};\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.prototype._encode = function _encode() {\n  return this.getX().toArray('be', this.curve.p.byteLength());\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.jumlAdd = function jumlAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this.getX().cmp(other.getX()) === 0;\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = (conf.a | 0) !== 1;\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'edwards', conf);\n\n  this.a = new BN(conf.a, 16).umod(this.red.m);\n  this.a = this.a.toRed(this.red);\n  this.c = new BN(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new BN(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y2 = rhs.redMul(lhs.redInvm());\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n  y = new BN(y, 16);\n  if (!y.red)\n    y = y.toRed(this.red);\n\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n  var y2 = y.redSqr();\n  var lhs = y2.redSub(this.c2);\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n  var x2 = lhs.redMul(rhs.redInvm());\n\n  if (x2.cmp(this.zero) === 0) {\n    if (odd)\n      throw new Error('invalid point');\n    else\n      return this.point(this.zero, y);\n  }\n\n  var x = x2.redSqrt();\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  if (x.fromRed().isOdd() !== odd)\n    x = x.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = z ? new BN(z, 16) : this.curve.one;\n    this.t = t && new BN(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n    (this.y.cmp(this.z) === 0 ||\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #doubling-dbl-2008-bbjlp\n  //     #doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  var nx;\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // E = a * C\n    var e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      var h = this.z.redSqr();\n      // J = F - 2 * H\n      var j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    var e = c.redAdd(d);\n    // H = (c * Z1)^2\n    var h = this.curve._mulC(this.z).redSqr();\n    // J = E - 2 * H\n    var j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #addition-add-2008-bbjlp\n  //     #addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n                          this.y,\n                          this.z,\n                          this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this === other ||\n         this.getX().cmp(other.getX()) === 0 &&\n         this.getY().cmp(other.getY()) === 0;\n};\n\nPoint.prototype.eqXToP = function eqXToP(x) {\n  var rx = x.toRed(this.curve.red).redMul(this.z);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(this.z);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n","'use strict';\n\nvar curve = exports;\n\ncurve.base = require('./base');\ncurve.short = require('./short');\ncurve.mont = require('./mont');\ncurve.edwards = require('./edwards');\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","module.exports = {\n  doubles: {\n    step: 4,\n    points: [\n      [\n        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'\n      ],\n      [\n        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'\n      ],\n      [\n        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'\n      ],\n      [\n        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'\n      ],\n      [\n        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'\n      ],\n      [\n        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'\n      ],\n      [\n        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'\n      ],\n      [\n        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'\n      ],\n      [\n        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'\n      ],\n      [\n        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'\n      ],\n      [\n        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'\n      ],\n      [\n        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'\n      ],\n      [\n        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'\n      ],\n      [\n        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'\n      ],\n      [\n        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'\n      ],\n      [\n        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'\n      ],\n      [\n        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'\n      ],\n      [\n        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'\n      ],\n      [\n        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'\n      ],\n      [\n        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'\n      ],\n      [\n        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'\n      ],\n      [\n        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'\n      ],\n      [\n        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'\n      ],\n      [\n        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'\n      ],\n      [\n        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'\n      ],\n      [\n        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'\n      ],\n      [\n        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'\n      ],\n      [\n        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'\n      ],\n      [\n        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'\n      ],\n      [\n        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'\n      ],\n      [\n        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'\n      ],\n      [\n        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'\n      ],\n      [\n        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'\n      ],\n      [\n        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'\n      ],\n      [\n        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'\n      ],\n      [\n        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'\n      ],\n      [\n        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'\n      ],\n      [\n        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'\n      ],\n      [\n        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'\n      ],\n      [\n        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'\n      ],\n      [\n        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'\n      ],\n      [\n        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'\n      ],\n      [\n        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'\n      ],\n      [\n        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'\n      ],\n      [\n        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'\n      ],\n      [\n        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'\n      ],\n      [\n        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'\n      ],\n      [\n        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'\n      ],\n      [\n        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'\n      ],\n      [\n        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'\n      ],\n      [\n        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'\n      ],\n      [\n        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'\n      ],\n      [\n        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'\n      ],\n      [\n        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'\n      ],\n      [\n        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'\n      ],\n      [\n        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'\n      ],\n      [\n        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'\n      ],\n      [\n        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'\n      ],\n      [\n        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'\n      ],\n      [\n        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'\n      ],\n      [\n        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'\n      ],\n      [\n        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'\n      ],\n      [\n        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'\n      ],\n      [\n        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'\n      ],\n      [\n        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'\n      ]\n    ]\n  },\n  naf: {\n    wnd: 7,\n    points: [\n      [\n        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'\n      ],\n      [\n        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'\n      ],\n      [\n        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'\n      ],\n      [\n        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'\n      ],\n      [\n        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'\n      ],\n      [\n        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'\n      ],\n      [\n        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'\n      ],\n      [\n        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'\n      ],\n      [\n        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'\n      ],\n      [\n        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'\n      ],\n      [\n        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'\n      ],\n      [\n        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'\n      ],\n      [\n        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'\n      ],\n      [\n        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'\n      ],\n      [\n        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'\n      ],\n      [\n        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'\n      ],\n      [\n        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'\n      ],\n      [\n        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'\n      ],\n      [\n        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'\n      ],\n      [\n        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'\n      ],\n      [\n        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'\n      ],\n      [\n        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'\n      ],\n      [\n        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'\n      ],\n      [\n        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'\n      ],\n      [\n        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'\n      ],\n      [\n        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'\n      ],\n      [\n        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'\n      ],\n      [\n        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'\n      ],\n      [\n        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'\n      ],\n      [\n        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'\n      ],\n      [\n        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'\n      ],\n      [\n        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'\n      ],\n      [\n        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'\n      ],\n      [\n        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'\n      ],\n      [\n        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'\n      ],\n      [\n        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'\n      ],\n      [\n        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'\n      ],\n      [\n        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'\n      ],\n      [\n        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'\n      ],\n      [\n        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'\n      ],\n      [\n        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'\n      ],\n      [\n        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'\n      ],\n      [\n        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'\n      ],\n      [\n        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'\n      ],\n      [\n        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'\n      ],\n      [\n        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'\n      ],\n      [\n        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'\n      ],\n      [\n        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'\n      ],\n      [\n        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'\n      ],\n      [\n        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'\n      ],\n      [\n        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'\n      ],\n      [\n        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'\n      ],\n      [\n        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'\n      ],\n      [\n        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'\n      ],\n      [\n        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'\n      ],\n      [\n        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'\n      ],\n      [\n        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'\n      ],\n      [\n        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'\n      ],\n      [\n        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'\n      ],\n      [\n        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'\n      ],\n      [\n        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'\n      ],\n      [\n        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'\n      ],\n      [\n        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'\n      ],\n      [\n        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'\n      ],\n      [\n        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'\n      ],\n      [\n        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'\n      ],\n      [\n        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'\n      ],\n      [\n        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'\n      ],\n      [\n        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'\n      ],\n      [\n        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'\n      ],\n      [\n        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'\n      ],\n      [\n        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'\n      ],\n      [\n        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'\n      ],\n      [\n        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'\n      ],\n      [\n        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'\n      ],\n      [\n        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'\n      ],\n      [\n        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'\n      ],\n      [\n        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'\n      ],\n      [\n        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'\n      ],\n      [\n        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'\n      ],\n      [\n        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'\n      ],\n      [\n        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'\n      ],\n      [\n        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'\n      ],\n      [\n        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'\n      ],\n      [\n        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'\n      ],\n      [\n        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'\n      ],\n      [\n        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'\n      ],\n      [\n        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'\n      ],\n      [\n        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'\n      ],\n      [\n        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'\n      ],\n      [\n        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'\n      ],\n      [\n        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'\n      ],\n      [\n        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'\n      ],\n      [\n        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'\n      ],\n      [\n        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'\n      ],\n      [\n        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'\n      ],\n      [\n        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'\n      ],\n      [\n        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'\n      ],\n      [\n        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'\n      ],\n      [\n        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'\n      ],\n      [\n        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'\n      ],\n      [\n        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'\n      ],\n      [\n        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'\n      ],\n      [\n        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'\n      ],\n      [\n        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'\n      ],\n      [\n        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'\n      ],\n      [\n        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'\n      ],\n      [\n        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'\n      ],\n      [\n        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'\n      ],\n      [\n        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'\n      ],\n      [\n        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'\n      ],\n      [\n        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'\n      ],\n      [\n        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'\n      ],\n      [\n        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'\n      ],\n      [\n        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'\n      ],\n      [\n        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'\n      ],\n      [\n        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'\n      ],\n      [\n        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'\n      ],\n      [\n        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'\n      ],\n      [\n        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'\n      ],\n      [\n        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'\n      ],\n      [\n        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'\n      ],\n      [\n        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'\n      ],\n      [\n        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'\n      ],\n      [\n        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'\n      ],\n      [\n        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'\n      ],\n      [\n        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'\n      ]\n    ]\n  }\n};\n","'use strict';\n\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar curve = require('./curve');\nvar utils = require('./utils');\n\nvar assert = utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new curve.edwards(options);\n  else\n    this.curve = new curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve\n      });\n      return curve;\n    }\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'\n  ]\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'\n  ]\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'\n  ]\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: hash.sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'\n  ]\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: hash.sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650'\n  ]\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '1',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9'\n  ]\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658'\n  ]\n});\n\nvar pre;\ntry {\n  pre = require('./precomputed/secp256k1');\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3'\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15'\n    }\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre\n  ]\n});\n","'use strict';\n\nvar hash = require('hash.js');\nvar utils = require('minimalistic-crypto-utils');\nvar assert = require('minimalistic-assert');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toArray(entropy, entropyEnc);\n  add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils.encode(res, enc);\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new BN(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    // Montgomery points only have an `x` coordinate.\n    // Weierstrass/Edwards points on the other hand have both `x` and\n    // `y` coordinates.\n    if (this.ec.curve.type === 'mont') {\n      assert(key.x, 'Need x coordinate');\n    } else if (this.ec.curve.type === 'short' ||\n               this.ec.curve.type === 'edwards') {\n      assert(key.x && key.y, 'Need both x and y coordinate');\n    }\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n","'use strict';\n\nvar BN = require('bn.js');\n\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction Signature(options, enc) {\n  if (options instanceof Signature)\n    return options;\n\n  if (this._importDER(options, enc))\n    return;\n\n  assert(options.r && options.s, 'Signature without r or s');\n  this.r = new BN(options.r, 16);\n  this.s = new BN(options.s, 16);\n  if (options.recoveryParam === undefined)\n    this.recoveryParam = null;\n  else\n    this.recoveryParam = options.recoveryParam;\n}\nmodule.exports = Signature;\n\nfunction Position() {\n  this.place = 0;\n}\n\nfunction getLength(buf, p) {\n  var initial = buf[p.place++];\n  if (!(initial & 0x80)) {\n    return initial;\n  }\n  var octetLen = initial & 0xf;\n\n  // Indefinite length or overflow\n  if (octetLen === 0 || octetLen > 4) {\n    return false;\n  }\n\n  var val = 0;\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n    val <<= 8;\n    val |= buf[off];\n    val >>>= 0;\n  }\n\n  // Leading zeroes\n  if (val <= 0x7f) {\n    return false;\n  }\n\n  p.place = off;\n  return val;\n}\n\nfunction rmPadding(buf) {\n  var i = 0;\n  var len = buf.length - 1;\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i++;\n  }\n  if (i === 0) {\n    return buf;\n  }\n  return buf.slice(i);\n}\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils.toArray(data, enc);\n  var p = new Position();\n  if (data[p.place++] !== 0x30) {\n    return false;\n  }\n  var len = getLength(data, p);\n  if (len === false) {\n    return false;\n  }\n  if ((len + p.place) !== data.length) {\n    return false;\n  }\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var rlen = getLength(data, p);\n  if (rlen === false) {\n    return false;\n  }\n  var r = data.slice(p.place, rlen + p.place);\n  p.place += rlen;\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var slen = getLength(data, p);\n  if (slen === false) {\n    return false;\n  }\n  if (data.length !== slen + p.place) {\n    return false;\n  }\n  var s = data.slice(p.place, slen + p.place);\n  if (r[0] === 0) {\n    if (r[1] & 0x80) {\n      r = r.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n  if (s[0] === 0) {\n    if (s[1] & 0x80) {\n      s = s.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n\n  this.r = new BN(r);\n  this.s = new BN(s);\n  this.recoveryParam = null;\n\n  return true;\n};\n\nfunction constructLength(arr, len) {\n  if (len < 0x80) {\n    arr.push(len);\n    return;\n  }\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n  arr.push(octets | 0x80);\n  while (--octets) {\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n}\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  while (!s[0] && !(s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n  var arr = [ 0x02 ];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  var backHalf = arr.concat(s);\n  var res = [ 0x30 ];\n  constructLength(res, backHalf.length);\n  res = res.concat(backHalf);\n  return utils.encode(res, enc);\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar HmacDRBG = require('hmac-drbg');\nvar utils = require('../utils');\nvar curves = require('../curves');\nvar rand = require('brorand');\nvar assert = utils.assert;\n\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);\n\n    options = curves[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof curves.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.ushrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\n\nEC.prototype.keyPair = function keyPair(options) {\n  return new KeyPair(this, options);\n};\n\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n  return KeyPair.fromPrivate(this, priv, enc);\n};\n\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n  return KeyPair.fromPublic(this, pub, enc);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n    entropy: options.entropy || rand(this.hash.hmacStrength),\n    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n    nonce: this.n.toArray()\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new BN(2));\n  do {\n    var priv = new BN(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyFromPrivate(priv);\n  } while (true);\n};\n\nEC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.ushrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, enc, options) {\n  if (typeof enc === 'object') {\n    options = enc;\n    enc = null;\n  }\n  if (!options)\n    options = {};\n\n  key = this.keyFromPrivate(key, enc);\n  msg = this._truncateToN(new BN(msg, 16));\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray('be', bytes);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray('be', bytes);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8'\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new BN(1));\n\n  for (var iter = 0; true; iter++) {\n    var k = options.k ?\n        options.k(iter) :\n        new BN(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var kpX = kp.getX();\n    var r = kpX.umod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n    s = s.umod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0) {\n      s = this.n.sub(s);\n      recoveryParam ^= 1;\n    }\n\n    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });\n  }\n};\n\nEC.prototype.verify = function verify(msg, signature, key, enc) {\n  msg = this._truncateToN(new BN(msg, 16));\n  key = this.keyFromPublic(key, enc);\n  signature = new Signature(signature, 'hex');\n\n  // Perform primitive values validation\n  var r = signature.r;\n  var s = signature.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).umod(this.n);\n  var u2 = sinv.mul(r).umod(this.n);\n\n  if (!this.curve._maxwellTrick) {\n    var p = this.g.mulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity())\n      return false;\n\n    return p.getX().umod(this.n).cmp(r) === 0;\n  }\n\n  // NOTE: Greg Maxwell's trick, inspired by:\n  // https://git.io/vad3K\n\n  var p = this.g.jmulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  // Compare `p.x` of Jacobian point with `r`,\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n  // inverse of `p.z^2`\n  return p.eqXToP(r);\n};\n\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n  assert((3 & j) === j, 'The recovery param is more than two bits');\n  signature = new Signature(signature, enc);\n\n  var n = this.n;\n  var e = new BN(msg);\n  var r = signature.r;\n  var s = signature.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = j & 1;\n  var isSecondKey = j >> 1;\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n    throw new Error('Unable to find sencond key candinate');\n\n  // 1.1. Let x = r + jn.\n  if (isSecondKey)\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n  else\n    r = this.curve.pointFromX(r, isYOdd);\n\n  var rInv = signature.r.invm(n);\n  var s1 = n.sub(e).mul(rInv).umod(n);\n  var s2 = s.mul(rInv).umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  return this.g.mulAdd(s1, r, s2);\n};\n\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n  signature = new Signature(signature, enc);\n  if (signature.recoveryParam !== null)\n    return signature.recoveryParam;\n\n  for (var i = 0; i < 4; i++) {\n    var Qprime;\n    try {\n      Qprime = this.recoverPubKey(e, signature, i);\n    } catch (e) {\n      continue;\n    }\n\n    if (Qprime.eq(Q))\n      return i;\n  }\n  throw new Error('Unable to find valid recovery factor');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub))\n    this._pub = params.pub;\n  else\n    this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair)\n    return pub;\n  return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair)\n    return secret;\n  return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes)\n    return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n\n  return a;\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength)\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n","'use strict';\n\nvar hash = require('hash.js');\nvar curves = require('../curves');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  var curve = curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n               .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n","'use strict';\n\nvar elliptic = exports;\n\nelliptic.version = require('../package.json').version;\nelliptic.utils = require('./elliptic/utils');\nelliptic.rand = require('brorand');\nelliptic.curve = require('./elliptic/curve');\nelliptic.curves = require('./elliptic/curves');\n\n// Protocols\nelliptic.ec = require('./elliptic/ec');\nelliptic.eddsa = require('./elliptic/eddsa');\n","/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var INPUT_ERROR = 'input is invalid type';\n  var FINALIZE_ERROR = 'finalize already called';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n  ];\n\n  var methods = {}, methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    if (this.finalized) {\n      throw new Error(FINALIZE_ERROR);\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (str === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n          str = new Uint8Array(str);\n        } else if (!Array.isArray(str)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n          bytes += 4;\n        }\n      }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n    if (extraBytes) {\n      block = s[i];\n      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n      }\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n      }\n    }\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = (block >> 8) & 0xFF;\n        array[offset + 2] = (block >> 16) & 0xFF;\n        array[offset + 3] = (block >> 24) & 0xFF;\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      if (extraBytes > 1) {\n        array[offset + 1] = (block >> 8) & 0xFF;\n      }\n      if (extraBytes > 2) {\n        array[offset + 2] = (block >> 16) & 0xFF;\n      }\n    }\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n\n      b0 = s[0];\n      b1 = s[1];\n      b32 = (s[11] << 4) | (s[10] >>> 28);\n      b33 = (s[10] << 4) | (s[11] >>> 28);\n      b14 = (s[20] << 3) | (s[21] >>> 29);\n      b15 = (s[21] << 3) | (s[20] >>> 29);\n      b46 = (s[31] << 9) | (s[30] >>> 23);\n      b47 = (s[30] << 9) | (s[31] >>> 23);\n      b28 = (s[40] << 18) | (s[41] >>> 14);\n      b29 = (s[41] << 18) | (s[40] >>> 14);\n      b20 = (s[2] << 1) | (s[3] >>> 31);\n      b21 = (s[3] << 1) | (s[2] >>> 31);\n      b2 = (s[13] << 12) | (s[12] >>> 20);\n      b3 = (s[12] << 12) | (s[13] >>> 20);\n      b34 = (s[22] << 10) | (s[23] >>> 22);\n      b35 = (s[23] << 10) | (s[22] >>> 22);\n      b16 = (s[33] << 13) | (s[32] >>> 19);\n      b17 = (s[32] << 13) | (s[33] >>> 19);\n      b48 = (s[42] << 2) | (s[43] >>> 30);\n      b49 = (s[43] << 2) | (s[42] >>> 30);\n      b40 = (s[5] << 30) | (s[4] >>> 2);\n      b41 = (s[4] << 30) | (s[5] >>> 2);\n      b22 = (s[14] << 6) | (s[15] >>> 26);\n      b23 = (s[15] << 6) | (s[14] >>> 26);\n      b4 = (s[25] << 11) | (s[24] >>> 21);\n      b5 = (s[24] << 11) | (s[25] >>> 21);\n      b36 = (s[34] << 15) | (s[35] >>> 17);\n      b37 = (s[35] << 15) | (s[34] >>> 17);\n      b18 = (s[45] << 29) | (s[44] >>> 3);\n      b19 = (s[44] << 29) | (s[45] >>> 3);\n      b10 = (s[6] << 28) | (s[7] >>> 4);\n      b11 = (s[7] << 28) | (s[6] >>> 4);\n      b42 = (s[17] << 23) | (s[16] >>> 9);\n      b43 = (s[16] << 23) | (s[17] >>> 9);\n      b24 = (s[26] << 25) | (s[27] >>> 7);\n      b25 = (s[27] << 25) | (s[26] >>> 7);\n      b6 = (s[36] << 21) | (s[37] >>> 11);\n      b7 = (s[37] << 21) | (s[36] >>> 11);\n      b38 = (s[47] << 24) | (s[46] >>> 8);\n      b39 = (s[46] << 24) | (s[47] >>> 8);\n      b30 = (s[8] << 27) | (s[9] >>> 5);\n      b31 = (s[9] << 27) | (s[8] >>> 5);\n      b12 = (s[18] << 20) | (s[19] >>> 12);\n      b13 = (s[19] << 20) | (s[18] >>> 12);\n      b44 = (s[29] << 7) | (s[28] >>> 25);\n      b45 = (s[28] << 7) | (s[29] >>> 25);\n      b26 = (s[38] << 8) | (s[39] >>> 24);\n      b27 = (s[39] << 8) | (s[38] >>> 24);\n      b8 = (s[48] << 14) | (s[49] >>> 18);\n      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n    if (AMD) {\n      define(function () {\n        return methods;\n      });\n    }\n  }\n})();\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.casper = (function() {\n\n    /**\n     * Namespace casper.\n     * @exports casper\n     * @namespace\n     */\n    var casper = {};\n\n    casper.HasBlockRequestProto = (function() {\n\n        /**\n         * Properties of a HasBlockRequestProto.\n         * @memberof casper\n         * @interface IHasBlockRequestProto\n         * @property {Uint8Array|null} [hash] HasBlockRequestProto hash\n         */\n\n        /**\n         * Constructs a new HasBlockRequestProto.\n         * @memberof casper\n         * @classdesc Represents a HasBlockRequestProto.\n         * @implements IHasBlockRequestProto\n         * @constructor\n         * @param {casper.IHasBlockRequestProto=} [properties] Properties to set\n         */\n        function HasBlockRequestProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HasBlockRequestProto hash.\n         * @member {Uint8Array} hash\n         * @memberof casper.HasBlockRequestProto\n         * @instance\n         */\n        HasBlockRequestProto.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new HasBlockRequestProto instance using the specified properties.\n         * @function create\n         * @memberof casper.HasBlockRequestProto\n         * @static\n         * @param {casper.IHasBlockRequestProto=} [properties] Properties to set\n         * @returns {casper.HasBlockRequestProto} HasBlockRequestProto instance\n         */\n        HasBlockRequestProto.create = function create(properties) {\n            return new HasBlockRequestProto(properties);\n        };\n\n        /**\n         * Encodes the specified HasBlockRequestProto message. Does not implicitly {@link casper.HasBlockRequestProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.HasBlockRequestProto\n         * @static\n         * @param {casper.IHasBlockRequestProto} message HasBlockRequestProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HasBlockRequestProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HasBlockRequestProto message, length delimited. Does not implicitly {@link casper.HasBlockRequestProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.HasBlockRequestProto\n         * @static\n         * @param {casper.IHasBlockRequestProto} message HasBlockRequestProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HasBlockRequestProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HasBlockRequestProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.HasBlockRequestProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.HasBlockRequestProto} HasBlockRequestProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HasBlockRequestProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.HasBlockRequestProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HasBlockRequestProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.HasBlockRequestProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.HasBlockRequestProto} HasBlockRequestProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HasBlockRequestProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HasBlockRequestProto message.\n         * @function verify\n         * @memberof casper.HasBlockRequestProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HasBlockRequestProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a HasBlockRequestProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.HasBlockRequestProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.HasBlockRequestProto} HasBlockRequestProto\n         */\n        HasBlockRequestProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.HasBlockRequestProto)\n                return object;\n            var message = new $root.casper.HasBlockRequestProto();\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a HasBlockRequestProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.HasBlockRequestProto\n         * @static\n         * @param {casper.HasBlockRequestProto} message HasBlockRequestProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HasBlockRequestProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this HasBlockRequestProto to JSON.\n         * @function toJSON\n         * @memberof casper.HasBlockRequestProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HasBlockRequestProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return HasBlockRequestProto;\n    })();\n\n    casper.HasBlockProto = (function() {\n\n        /**\n         * Properties of a HasBlockProto.\n         * @memberof casper\n         * @interface IHasBlockProto\n         * @property {Uint8Array|null} [hash] HasBlockProto hash\n         */\n\n        /**\n         * Constructs a new HasBlockProto.\n         * @memberof casper\n         * @classdesc Represents a HasBlockProto.\n         * @implements IHasBlockProto\n         * @constructor\n         * @param {casper.IHasBlockProto=} [properties] Properties to set\n         */\n        function HasBlockProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HasBlockProto hash.\n         * @member {Uint8Array} hash\n         * @memberof casper.HasBlockProto\n         * @instance\n         */\n        HasBlockProto.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new HasBlockProto instance using the specified properties.\n         * @function create\n         * @memberof casper.HasBlockProto\n         * @static\n         * @param {casper.IHasBlockProto=} [properties] Properties to set\n         * @returns {casper.HasBlockProto} HasBlockProto instance\n         */\n        HasBlockProto.create = function create(properties) {\n            return new HasBlockProto(properties);\n        };\n\n        /**\n         * Encodes the specified HasBlockProto message. Does not implicitly {@link casper.HasBlockProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.HasBlockProto\n         * @static\n         * @param {casper.IHasBlockProto} message HasBlockProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HasBlockProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HasBlockProto message, length delimited. Does not implicitly {@link casper.HasBlockProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.HasBlockProto\n         * @static\n         * @param {casper.IHasBlockProto} message HasBlockProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HasBlockProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HasBlockProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.HasBlockProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.HasBlockProto} HasBlockProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HasBlockProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.HasBlockProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HasBlockProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.HasBlockProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.HasBlockProto} HasBlockProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HasBlockProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HasBlockProto message.\n         * @function verify\n         * @memberof casper.HasBlockProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HasBlockProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a HasBlockProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.HasBlockProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.HasBlockProto} HasBlockProto\n         */\n        HasBlockProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.HasBlockProto)\n                return object;\n            var message = new $root.casper.HasBlockProto();\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a HasBlockProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.HasBlockProto\n         * @static\n         * @param {casper.HasBlockProto} message HasBlockProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HasBlockProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this HasBlockProto to JSON.\n         * @function toJSON\n         * @memberof casper.HasBlockProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HasBlockProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return HasBlockProto;\n    })();\n\n    casper.BlockRequestProto = (function() {\n\n        /**\n         * Properties of a BlockRequestProto.\n         * @memberof casper\n         * @interface IBlockRequestProto\n         * @property {Uint8Array|null} [hash] BlockRequestProto hash\n         */\n\n        /**\n         * Constructs a new BlockRequestProto.\n         * @memberof casper\n         * @classdesc Represents a BlockRequestProto.\n         * @implements IBlockRequestProto\n         * @constructor\n         * @param {casper.IBlockRequestProto=} [properties] Properties to set\n         */\n        function BlockRequestProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlockRequestProto hash.\n         * @member {Uint8Array} hash\n         * @memberof casper.BlockRequestProto\n         * @instance\n         */\n        BlockRequestProto.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * Creates a new BlockRequestProto instance using the specified properties.\n         * @function create\n         * @memberof casper.BlockRequestProto\n         * @static\n         * @param {casper.IBlockRequestProto=} [properties] Properties to set\n         * @returns {casper.BlockRequestProto} BlockRequestProto instance\n         */\n        BlockRequestProto.create = function create(properties) {\n            return new BlockRequestProto(properties);\n        };\n\n        /**\n         * Encodes the specified BlockRequestProto message. Does not implicitly {@link casper.BlockRequestProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlockRequestProto\n         * @static\n         * @param {casper.IBlockRequestProto} message BlockRequestProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockRequestProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlockRequestProto message, length delimited. Does not implicitly {@link casper.BlockRequestProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlockRequestProto\n         * @static\n         * @param {casper.IBlockRequestProto} message BlockRequestProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockRequestProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlockRequestProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlockRequestProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlockRequestProto} BlockRequestProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockRequestProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockRequestProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlockRequestProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlockRequestProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlockRequestProto} BlockRequestProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockRequestProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlockRequestProto message.\n         * @function verify\n         * @memberof casper.BlockRequestProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlockRequestProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BlockRequestProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlockRequestProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlockRequestProto} BlockRequestProto\n         */\n        BlockRequestProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlockRequestProto)\n                return object;\n            var message = new $root.casper.BlockRequestProto();\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlockRequestProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlockRequestProto\n         * @static\n         * @param {casper.BlockRequestProto} message BlockRequestProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockRequestProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this BlockRequestProto to JSON.\n         * @function toJSON\n         * @memberof casper.BlockRequestProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockRequestProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlockRequestProto;\n    })();\n\n    casper.ForkChoiceTipRequestProto = (function() {\n\n        /**\n         * Properties of a ForkChoiceTipRequestProto.\n         * @memberof casper\n         * @interface IForkChoiceTipRequestProto\n         */\n\n        /**\n         * Constructs a new ForkChoiceTipRequestProto.\n         * @memberof casper\n         * @classdesc Represents a ForkChoiceTipRequestProto.\n         * @implements IForkChoiceTipRequestProto\n         * @constructor\n         * @param {casper.IForkChoiceTipRequestProto=} [properties] Properties to set\n         */\n        function ForkChoiceTipRequestProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new ForkChoiceTipRequestProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ForkChoiceTipRequestProto\n         * @static\n         * @param {casper.IForkChoiceTipRequestProto=} [properties] Properties to set\n         * @returns {casper.ForkChoiceTipRequestProto} ForkChoiceTipRequestProto instance\n         */\n        ForkChoiceTipRequestProto.create = function create(properties) {\n            return new ForkChoiceTipRequestProto(properties);\n        };\n\n        /**\n         * Encodes the specified ForkChoiceTipRequestProto message. Does not implicitly {@link casper.ForkChoiceTipRequestProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ForkChoiceTipRequestProto\n         * @static\n         * @param {casper.IForkChoiceTipRequestProto} message ForkChoiceTipRequestProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ForkChoiceTipRequestProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ForkChoiceTipRequestProto message, length delimited. Does not implicitly {@link casper.ForkChoiceTipRequestProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ForkChoiceTipRequestProto\n         * @static\n         * @param {casper.IForkChoiceTipRequestProto} message ForkChoiceTipRequestProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ForkChoiceTipRequestProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ForkChoiceTipRequestProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ForkChoiceTipRequestProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ForkChoiceTipRequestProto} ForkChoiceTipRequestProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ForkChoiceTipRequestProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ForkChoiceTipRequestProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ForkChoiceTipRequestProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ForkChoiceTipRequestProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ForkChoiceTipRequestProto} ForkChoiceTipRequestProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ForkChoiceTipRequestProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ForkChoiceTipRequestProto message.\n         * @function verify\n         * @memberof casper.ForkChoiceTipRequestProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ForkChoiceTipRequestProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ForkChoiceTipRequestProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ForkChoiceTipRequestProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ForkChoiceTipRequestProto} ForkChoiceTipRequestProto\n         */\n        ForkChoiceTipRequestProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ForkChoiceTipRequestProto)\n                return object;\n            return new $root.casper.ForkChoiceTipRequestProto();\n        };\n\n        /**\n         * Creates a plain object from a ForkChoiceTipRequestProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ForkChoiceTipRequestProto\n         * @static\n         * @param {casper.ForkChoiceTipRequestProto} message ForkChoiceTipRequestProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ForkChoiceTipRequestProto.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this ForkChoiceTipRequestProto to JSON.\n         * @function toJSON\n         * @memberof casper.ForkChoiceTipRequestProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ForkChoiceTipRequestProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ForkChoiceTipRequestProto;\n    })();\n\n    casper.ApprovedBlockCandidateProto = (function() {\n\n        /**\n         * Properties of an ApprovedBlockCandidateProto.\n         * @memberof casper\n         * @interface IApprovedBlockCandidateProto\n         * @property {casper.IBlockMessageProto|null} [block] ApprovedBlockCandidateProto block\n         * @property {number|null} [requiredSigs] ApprovedBlockCandidateProto requiredSigs\n         */\n\n        /**\n         * Constructs a new ApprovedBlockCandidateProto.\n         * @memberof casper\n         * @classdesc Represents an ApprovedBlockCandidateProto.\n         * @implements IApprovedBlockCandidateProto\n         * @constructor\n         * @param {casper.IApprovedBlockCandidateProto=} [properties] Properties to set\n         */\n        function ApprovedBlockCandidateProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApprovedBlockCandidateProto block.\n         * @member {casper.IBlockMessageProto|null|undefined} block\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @instance\n         */\n        ApprovedBlockCandidateProto.prototype.block = null;\n\n        /**\n         * ApprovedBlockCandidateProto requiredSigs.\n         * @member {number} requiredSigs\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @instance\n         */\n        ApprovedBlockCandidateProto.prototype.requiredSigs = 0;\n\n        /**\n         * Creates a new ApprovedBlockCandidateProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @static\n         * @param {casper.IApprovedBlockCandidateProto=} [properties] Properties to set\n         * @returns {casper.ApprovedBlockCandidateProto} ApprovedBlockCandidateProto instance\n         */\n        ApprovedBlockCandidateProto.create = function create(properties) {\n            return new ApprovedBlockCandidateProto(properties);\n        };\n\n        /**\n         * Encodes the specified ApprovedBlockCandidateProto message. Does not implicitly {@link casper.ApprovedBlockCandidateProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @static\n         * @param {casper.IApprovedBlockCandidateProto} message ApprovedBlockCandidateProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApprovedBlockCandidateProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.block != null && message.hasOwnProperty(\"block\"))\n                $root.casper.BlockMessageProto.encode(message.block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.requiredSigs != null && message.hasOwnProperty(\"requiredSigs\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.requiredSigs);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApprovedBlockCandidateProto message, length delimited. Does not implicitly {@link casper.ApprovedBlockCandidateProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @static\n         * @param {casper.IApprovedBlockCandidateProto} message ApprovedBlockCandidateProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApprovedBlockCandidateProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApprovedBlockCandidateProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ApprovedBlockCandidateProto} ApprovedBlockCandidateProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApprovedBlockCandidateProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ApprovedBlockCandidateProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.block = $root.casper.BlockMessageProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.requiredSigs = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApprovedBlockCandidateProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ApprovedBlockCandidateProto} ApprovedBlockCandidateProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApprovedBlockCandidateProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApprovedBlockCandidateProto message.\n         * @function verify\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApprovedBlockCandidateProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.block != null && message.hasOwnProperty(\"block\")) {\n                var error = $root.casper.BlockMessageProto.verify(message.block);\n                if (error)\n                    return \"block.\" + error;\n            }\n            if (message.requiredSigs != null && message.hasOwnProperty(\"requiredSigs\"))\n                if (!$util.isInteger(message.requiredSigs))\n                    return \"requiredSigs: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ApprovedBlockCandidateProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ApprovedBlockCandidateProto} ApprovedBlockCandidateProto\n         */\n        ApprovedBlockCandidateProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ApprovedBlockCandidateProto)\n                return object;\n            var message = new $root.casper.ApprovedBlockCandidateProto();\n            if (object.block != null) {\n                if (typeof object.block !== \"object\")\n                    throw TypeError(\".casper.ApprovedBlockCandidateProto.block: object expected\");\n                message.block = $root.casper.BlockMessageProto.fromObject(object.block);\n            }\n            if (object.requiredSigs != null)\n                message.requiredSigs = object.requiredSigs | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApprovedBlockCandidateProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @static\n         * @param {casper.ApprovedBlockCandidateProto} message ApprovedBlockCandidateProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApprovedBlockCandidateProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.block = null;\n                object.requiredSigs = 0;\n            }\n            if (message.block != null && message.hasOwnProperty(\"block\"))\n                object.block = $root.casper.BlockMessageProto.toObject(message.block, options);\n            if (message.requiredSigs != null && message.hasOwnProperty(\"requiredSigs\"))\n                object.requiredSigs = message.requiredSigs;\n            return object;\n        };\n\n        /**\n         * Converts this ApprovedBlockCandidateProto to JSON.\n         * @function toJSON\n         * @memberof casper.ApprovedBlockCandidateProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApprovedBlockCandidateProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApprovedBlockCandidateProto;\n    })();\n\n    casper.UnapprovedBlockProto = (function() {\n\n        /**\n         * Properties of an UnapprovedBlockProto.\n         * @memberof casper\n         * @interface IUnapprovedBlockProto\n         * @property {casper.IApprovedBlockCandidateProto|null} [candidate] UnapprovedBlockProto candidate\n         * @property {number|Long|null} [timestamp] UnapprovedBlockProto timestamp\n         * @property {number|Long|null} [duration] UnapprovedBlockProto duration\n         */\n\n        /**\n         * Constructs a new UnapprovedBlockProto.\n         * @memberof casper\n         * @classdesc Represents an UnapprovedBlockProto.\n         * @implements IUnapprovedBlockProto\n         * @constructor\n         * @param {casper.IUnapprovedBlockProto=} [properties] Properties to set\n         */\n        function UnapprovedBlockProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * UnapprovedBlockProto candidate.\n         * @member {casper.IApprovedBlockCandidateProto|null|undefined} candidate\n         * @memberof casper.UnapprovedBlockProto\n         * @instance\n         */\n        UnapprovedBlockProto.prototype.candidate = null;\n\n        /**\n         * UnapprovedBlockProto timestamp.\n         * @member {number|Long} timestamp\n         * @memberof casper.UnapprovedBlockProto\n         * @instance\n         */\n        UnapprovedBlockProto.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * UnapprovedBlockProto duration.\n         * @member {number|Long} duration\n         * @memberof casper.UnapprovedBlockProto\n         * @instance\n         */\n        UnapprovedBlockProto.prototype.duration = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new UnapprovedBlockProto instance using the specified properties.\n         * @function create\n         * @memberof casper.UnapprovedBlockProto\n         * @static\n         * @param {casper.IUnapprovedBlockProto=} [properties] Properties to set\n         * @returns {casper.UnapprovedBlockProto} UnapprovedBlockProto instance\n         */\n        UnapprovedBlockProto.create = function create(properties) {\n            return new UnapprovedBlockProto(properties);\n        };\n\n        /**\n         * Encodes the specified UnapprovedBlockProto message. Does not implicitly {@link casper.UnapprovedBlockProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.UnapprovedBlockProto\n         * @static\n         * @param {casper.IUnapprovedBlockProto} message UnapprovedBlockProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UnapprovedBlockProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.candidate != null && message.hasOwnProperty(\"candidate\"))\n                $root.casper.ApprovedBlockCandidateProto.encode(message.candidate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timestamp);\n            if (message.duration != null && message.hasOwnProperty(\"duration\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.duration);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified UnapprovedBlockProto message, length delimited. Does not implicitly {@link casper.UnapprovedBlockProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.UnapprovedBlockProto\n         * @static\n         * @param {casper.IUnapprovedBlockProto} message UnapprovedBlockProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        UnapprovedBlockProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an UnapprovedBlockProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.UnapprovedBlockProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.UnapprovedBlockProto} UnapprovedBlockProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UnapprovedBlockProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.UnapprovedBlockProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.candidate = $root.casper.ApprovedBlockCandidateProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.timestamp = reader.int64();\n                    break;\n                case 3:\n                    message.duration = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an UnapprovedBlockProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.UnapprovedBlockProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.UnapprovedBlockProto} UnapprovedBlockProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        UnapprovedBlockProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an UnapprovedBlockProto message.\n         * @function verify\n         * @memberof casper.UnapprovedBlockProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        UnapprovedBlockProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.candidate != null && message.hasOwnProperty(\"candidate\")) {\n                var error = $root.casper.ApprovedBlockCandidateProto.verify(message.candidate);\n                if (error)\n                    return \"candidate.\" + error;\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            if (message.duration != null && message.hasOwnProperty(\"duration\"))\n                if (!$util.isInteger(message.duration) && !(message.duration && $util.isInteger(message.duration.low) && $util.isInteger(message.duration.high)))\n                    return \"duration: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an UnapprovedBlockProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.UnapprovedBlockProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.UnapprovedBlockProto} UnapprovedBlockProto\n         */\n        UnapprovedBlockProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.UnapprovedBlockProto)\n                return object;\n            var message = new $root.casper.UnapprovedBlockProto();\n            if (object.candidate != null) {\n                if (typeof object.candidate !== \"object\")\n                    throw TypeError(\".casper.UnapprovedBlockProto.candidate: object expected\");\n                message.candidate = $root.casper.ApprovedBlockCandidateProto.fromObject(object.candidate);\n            }\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n            if (object.duration != null)\n                if ($util.Long)\n                    (message.duration = $util.Long.fromValue(object.duration)).unsigned = false;\n                else if (typeof object.duration === \"string\")\n                    message.duration = parseInt(object.duration, 10);\n                else if (typeof object.duration === \"number\")\n                    message.duration = object.duration;\n                else if (typeof object.duration === \"object\")\n                    message.duration = new $util.LongBits(object.duration.low >>> 0, object.duration.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an UnapprovedBlockProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.UnapprovedBlockProto\n         * @static\n         * @param {casper.UnapprovedBlockProto} message UnapprovedBlockProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        UnapprovedBlockProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.candidate = null;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.duration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.duration = options.longs === String ? \"0\" : 0;\n            }\n            if (message.candidate != null && message.hasOwnProperty(\"candidate\"))\n                object.candidate = $root.casper.ApprovedBlockCandidateProto.toObject(message.candidate, options);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n            if (message.duration != null && message.hasOwnProperty(\"duration\"))\n                if (typeof message.duration === \"number\")\n                    object.duration = options.longs === String ? String(message.duration) : message.duration;\n                else\n                    object.duration = options.longs === String ? $util.Long.prototype.toString.call(message.duration) : options.longs === Number ? new $util.LongBits(message.duration.low >>> 0, message.duration.high >>> 0).toNumber() : message.duration;\n            return object;\n        };\n\n        /**\n         * Converts this UnapprovedBlockProto to JSON.\n         * @function toJSON\n         * @memberof casper.UnapprovedBlockProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        UnapprovedBlockProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return UnapprovedBlockProto;\n    })();\n\n    casper.Signature = (function() {\n\n        /**\n         * Properties of a Signature.\n         * @memberof casper\n         * @interface ISignature\n         * @property {Uint8Array|null} [publicKey] Signature publicKey\n         * @property {string|null} [algorithm] Signature algorithm\n         * @property {Uint8Array|null} [sig] Signature sig\n         */\n\n        /**\n         * Constructs a new Signature.\n         * @memberof casper\n         * @classdesc Represents a Signature.\n         * @implements ISignature\n         * @constructor\n         * @param {casper.ISignature=} [properties] Properties to set\n         */\n        function Signature(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Signature publicKey.\n         * @member {Uint8Array} publicKey\n         * @memberof casper.Signature\n         * @instance\n         */\n        Signature.prototype.publicKey = $util.newBuffer([]);\n\n        /**\n         * Signature algorithm.\n         * @member {string} algorithm\n         * @memberof casper.Signature\n         * @instance\n         */\n        Signature.prototype.algorithm = \"\";\n\n        /**\n         * Signature sig.\n         * @member {Uint8Array} sig\n         * @memberof casper.Signature\n         * @instance\n         */\n        Signature.prototype.sig = $util.newBuffer([]);\n\n        /**\n         * Creates a new Signature instance using the specified properties.\n         * @function create\n         * @memberof casper.Signature\n         * @static\n         * @param {casper.ISignature=} [properties] Properties to set\n         * @returns {casper.Signature} Signature instance\n         */\n        Signature.create = function create(properties) {\n            return new Signature(properties);\n        };\n\n        /**\n         * Encodes the specified Signature message. Does not implicitly {@link casper.Signature.verify|verify} messages.\n         * @function encode\n         * @memberof casper.Signature\n         * @static\n         * @param {casper.ISignature} message Signature message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signature.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.algorithm);\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.sig);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Signature message, length delimited. Does not implicitly {@link casper.Signature.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.Signature\n         * @static\n         * @param {casper.ISignature} message Signature message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Signature.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Signature message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.Signature\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.Signature} Signature\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signature.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.Signature();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.publicKey = reader.bytes();\n                    break;\n                case 2:\n                    message.algorithm = reader.string();\n                    break;\n                case 3:\n                    message.sig = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Signature message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.Signature\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.Signature} Signature\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Signature.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Signature message.\n         * @function verify\n         * @memberof casper.Signature\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Signature.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n                if (!(message.publicKey && typeof message.publicKey.length === \"number\" || $util.isString(message.publicKey)))\n                    return \"publicKey: buffer expected\";\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                if (!$util.isString(message.algorithm))\n                    return \"algorithm: string expected\";\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                if (!(message.sig && typeof message.sig.length === \"number\" || $util.isString(message.sig)))\n                    return \"sig: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Signature message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.Signature\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.Signature} Signature\n         */\n        Signature.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.Signature)\n                return object;\n            var message = new $root.casper.Signature();\n            if (object.publicKey != null)\n                if (typeof object.publicKey === \"string\")\n                    $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);\n                else if (object.publicKey.length)\n                    message.publicKey = object.publicKey;\n            if (object.algorithm != null)\n                message.algorithm = String(object.algorithm);\n            if (object.sig != null)\n                if (typeof object.sig === \"string\")\n                    $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);\n                else if (object.sig.length)\n                    message.sig = object.sig;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Signature message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.Signature\n         * @static\n         * @param {casper.Signature} message Signature\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Signature.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.publicKey = \"\";\n                else {\n                    object.publicKey = [];\n                    if (options.bytes !== Array)\n                        object.publicKey = $util.newBuffer(object.publicKey);\n                }\n                object.algorithm = \"\";\n                if (options.bytes === String)\n                    object.sig = \"\";\n                else {\n                    object.sig = [];\n                    if (options.bytes !== Array)\n                        object.sig = $util.newBuffer(object.sig);\n                }\n            }\n            if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n                object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = message.algorithm;\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;\n            return object;\n        };\n\n        /**\n         * Converts this Signature to JSON.\n         * @function toJSON\n         * @memberof casper.Signature\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Signature.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Signature;\n    })();\n\n    casper.BlockApprovalProto = (function() {\n\n        /**\n         * Properties of a BlockApprovalProto.\n         * @memberof casper\n         * @interface IBlockApprovalProto\n         * @property {casper.IApprovedBlockCandidateProto|null} [candidate] BlockApprovalProto candidate\n         * @property {casper.ISignature|null} [sig] BlockApprovalProto sig\n         */\n\n        /**\n         * Constructs a new BlockApprovalProto.\n         * @memberof casper\n         * @classdesc Represents a BlockApprovalProto.\n         * @implements IBlockApprovalProto\n         * @constructor\n         * @param {casper.IBlockApprovalProto=} [properties] Properties to set\n         */\n        function BlockApprovalProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlockApprovalProto candidate.\n         * @member {casper.IApprovedBlockCandidateProto|null|undefined} candidate\n         * @memberof casper.BlockApprovalProto\n         * @instance\n         */\n        BlockApprovalProto.prototype.candidate = null;\n\n        /**\n         * BlockApprovalProto sig.\n         * @member {casper.ISignature|null|undefined} sig\n         * @memberof casper.BlockApprovalProto\n         * @instance\n         */\n        BlockApprovalProto.prototype.sig = null;\n\n        /**\n         * Creates a new BlockApprovalProto instance using the specified properties.\n         * @function create\n         * @memberof casper.BlockApprovalProto\n         * @static\n         * @param {casper.IBlockApprovalProto=} [properties] Properties to set\n         * @returns {casper.BlockApprovalProto} BlockApprovalProto instance\n         */\n        BlockApprovalProto.create = function create(properties) {\n            return new BlockApprovalProto(properties);\n        };\n\n        /**\n         * Encodes the specified BlockApprovalProto message. Does not implicitly {@link casper.BlockApprovalProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlockApprovalProto\n         * @static\n         * @param {casper.IBlockApprovalProto} message BlockApprovalProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockApprovalProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.candidate != null && message.hasOwnProperty(\"candidate\"))\n                $root.casper.ApprovedBlockCandidateProto.encode(message.candidate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                $root.casper.Signature.encode(message.sig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlockApprovalProto message, length delimited. Does not implicitly {@link casper.BlockApprovalProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlockApprovalProto\n         * @static\n         * @param {casper.IBlockApprovalProto} message BlockApprovalProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockApprovalProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlockApprovalProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlockApprovalProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlockApprovalProto} BlockApprovalProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockApprovalProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockApprovalProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.candidate = $root.casper.ApprovedBlockCandidateProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.sig = $root.casper.Signature.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlockApprovalProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlockApprovalProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlockApprovalProto} BlockApprovalProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockApprovalProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlockApprovalProto message.\n         * @function verify\n         * @memberof casper.BlockApprovalProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlockApprovalProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.candidate != null && message.hasOwnProperty(\"candidate\")) {\n                var error = $root.casper.ApprovedBlockCandidateProto.verify(message.candidate);\n                if (error)\n                    return \"candidate.\" + error;\n            }\n            if (message.sig != null && message.hasOwnProperty(\"sig\")) {\n                var error = $root.casper.Signature.verify(message.sig);\n                if (error)\n                    return \"sig.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BlockApprovalProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlockApprovalProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlockApprovalProto} BlockApprovalProto\n         */\n        BlockApprovalProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlockApprovalProto)\n                return object;\n            var message = new $root.casper.BlockApprovalProto();\n            if (object.candidate != null) {\n                if (typeof object.candidate !== \"object\")\n                    throw TypeError(\".casper.BlockApprovalProto.candidate: object expected\");\n                message.candidate = $root.casper.ApprovedBlockCandidateProto.fromObject(object.candidate);\n            }\n            if (object.sig != null) {\n                if (typeof object.sig !== \"object\")\n                    throw TypeError(\".casper.BlockApprovalProto.sig: object expected\");\n                message.sig = $root.casper.Signature.fromObject(object.sig);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlockApprovalProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlockApprovalProto\n         * @static\n         * @param {casper.BlockApprovalProto} message BlockApprovalProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockApprovalProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.candidate = null;\n                object.sig = null;\n            }\n            if (message.candidate != null && message.hasOwnProperty(\"candidate\"))\n                object.candidate = $root.casper.ApprovedBlockCandidateProto.toObject(message.candidate, options);\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                object.sig = $root.casper.Signature.toObject(message.sig, options);\n            return object;\n        };\n\n        /**\n         * Converts this BlockApprovalProto to JSON.\n         * @function toJSON\n         * @memberof casper.BlockApprovalProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockApprovalProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlockApprovalProto;\n    })();\n\n    casper.ApprovedBlockProto = (function() {\n\n        /**\n         * Properties of an ApprovedBlockProto.\n         * @memberof casper\n         * @interface IApprovedBlockProto\n         * @property {casper.IApprovedBlockCandidateProto|null} [candidate] ApprovedBlockProto candidate\n         * @property {Array.<casper.ISignature>|null} [sigs] ApprovedBlockProto sigs\n         */\n\n        /**\n         * Constructs a new ApprovedBlockProto.\n         * @memberof casper\n         * @classdesc Represents an ApprovedBlockProto.\n         * @implements IApprovedBlockProto\n         * @constructor\n         * @param {casper.IApprovedBlockProto=} [properties] Properties to set\n         */\n        function ApprovedBlockProto(properties) {\n            this.sigs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApprovedBlockProto candidate.\n         * @member {casper.IApprovedBlockCandidateProto|null|undefined} candidate\n         * @memberof casper.ApprovedBlockProto\n         * @instance\n         */\n        ApprovedBlockProto.prototype.candidate = null;\n\n        /**\n         * ApprovedBlockProto sigs.\n         * @member {Array.<casper.ISignature>} sigs\n         * @memberof casper.ApprovedBlockProto\n         * @instance\n         */\n        ApprovedBlockProto.prototype.sigs = $util.emptyArray;\n\n        /**\n         * Creates a new ApprovedBlockProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ApprovedBlockProto\n         * @static\n         * @param {casper.IApprovedBlockProto=} [properties] Properties to set\n         * @returns {casper.ApprovedBlockProto} ApprovedBlockProto instance\n         */\n        ApprovedBlockProto.create = function create(properties) {\n            return new ApprovedBlockProto(properties);\n        };\n\n        /**\n         * Encodes the specified ApprovedBlockProto message. Does not implicitly {@link casper.ApprovedBlockProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ApprovedBlockProto\n         * @static\n         * @param {casper.IApprovedBlockProto} message ApprovedBlockProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApprovedBlockProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.candidate != null && message.hasOwnProperty(\"candidate\"))\n                $root.casper.ApprovedBlockCandidateProto.encode(message.candidate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sigs != null && message.sigs.length)\n                for (var i = 0; i < message.sigs.length; ++i)\n                    $root.casper.Signature.encode(message.sigs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApprovedBlockProto message, length delimited. Does not implicitly {@link casper.ApprovedBlockProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ApprovedBlockProto\n         * @static\n         * @param {casper.IApprovedBlockProto} message ApprovedBlockProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApprovedBlockProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApprovedBlockProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ApprovedBlockProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ApprovedBlockProto} ApprovedBlockProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApprovedBlockProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ApprovedBlockProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.candidate = $root.casper.ApprovedBlockCandidateProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    if (!(message.sigs && message.sigs.length))\n                        message.sigs = [];\n                    message.sigs.push($root.casper.Signature.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApprovedBlockProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ApprovedBlockProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ApprovedBlockProto} ApprovedBlockProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApprovedBlockProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApprovedBlockProto message.\n         * @function verify\n         * @memberof casper.ApprovedBlockProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApprovedBlockProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.candidate != null && message.hasOwnProperty(\"candidate\")) {\n                var error = $root.casper.ApprovedBlockCandidateProto.verify(message.candidate);\n                if (error)\n                    return \"candidate.\" + error;\n            }\n            if (message.sigs != null && message.hasOwnProperty(\"sigs\")) {\n                if (!Array.isArray(message.sigs))\n                    return \"sigs: array expected\";\n                for (var i = 0; i < message.sigs.length; ++i) {\n                    var error = $root.casper.Signature.verify(message.sigs[i]);\n                    if (error)\n                        return \"sigs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an ApprovedBlockProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ApprovedBlockProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ApprovedBlockProto} ApprovedBlockProto\n         */\n        ApprovedBlockProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ApprovedBlockProto)\n                return object;\n            var message = new $root.casper.ApprovedBlockProto();\n            if (object.candidate != null) {\n                if (typeof object.candidate !== \"object\")\n                    throw TypeError(\".casper.ApprovedBlockProto.candidate: object expected\");\n                message.candidate = $root.casper.ApprovedBlockCandidateProto.fromObject(object.candidate);\n            }\n            if (object.sigs) {\n                if (!Array.isArray(object.sigs))\n                    throw TypeError(\".casper.ApprovedBlockProto.sigs: array expected\");\n                message.sigs = [];\n                for (var i = 0; i < object.sigs.length; ++i) {\n                    if (typeof object.sigs[i] !== \"object\")\n                        throw TypeError(\".casper.ApprovedBlockProto.sigs: object expected\");\n                    message.sigs[i] = $root.casper.Signature.fromObject(object.sigs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApprovedBlockProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ApprovedBlockProto\n         * @static\n         * @param {casper.ApprovedBlockProto} message ApprovedBlockProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApprovedBlockProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.sigs = [];\n            if (options.defaults)\n                object.candidate = null;\n            if (message.candidate != null && message.hasOwnProperty(\"candidate\"))\n                object.candidate = $root.casper.ApprovedBlockCandidateProto.toObject(message.candidate, options);\n            if (message.sigs && message.sigs.length) {\n                object.sigs = [];\n                for (var j = 0; j < message.sigs.length; ++j)\n                    object.sigs[j] = $root.casper.Signature.toObject(message.sigs[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ApprovedBlockProto to JSON.\n         * @function toJSON\n         * @memberof casper.ApprovedBlockProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApprovedBlockProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApprovedBlockProto;\n    })();\n\n    casper.ApprovedBlockRequestProto = (function() {\n\n        /**\n         * Properties of an ApprovedBlockRequestProto.\n         * @memberof casper\n         * @interface IApprovedBlockRequestProto\n         * @property {string|null} [identifier] ApprovedBlockRequestProto identifier\n         */\n\n        /**\n         * Constructs a new ApprovedBlockRequestProto.\n         * @memberof casper\n         * @classdesc Represents an ApprovedBlockRequestProto.\n         * @implements IApprovedBlockRequestProto\n         * @constructor\n         * @param {casper.IApprovedBlockRequestProto=} [properties] Properties to set\n         */\n        function ApprovedBlockRequestProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ApprovedBlockRequestProto identifier.\n         * @member {string} identifier\n         * @memberof casper.ApprovedBlockRequestProto\n         * @instance\n         */\n        ApprovedBlockRequestProto.prototype.identifier = \"\";\n\n        /**\n         * Creates a new ApprovedBlockRequestProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ApprovedBlockRequestProto\n         * @static\n         * @param {casper.IApprovedBlockRequestProto=} [properties] Properties to set\n         * @returns {casper.ApprovedBlockRequestProto} ApprovedBlockRequestProto instance\n         */\n        ApprovedBlockRequestProto.create = function create(properties) {\n            return new ApprovedBlockRequestProto(properties);\n        };\n\n        /**\n         * Encodes the specified ApprovedBlockRequestProto message. Does not implicitly {@link casper.ApprovedBlockRequestProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ApprovedBlockRequestProto\n         * @static\n         * @param {casper.IApprovedBlockRequestProto} message ApprovedBlockRequestProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApprovedBlockRequestProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.identifier != null && message.hasOwnProperty(\"identifier\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ApprovedBlockRequestProto message, length delimited. Does not implicitly {@link casper.ApprovedBlockRequestProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ApprovedBlockRequestProto\n         * @static\n         * @param {casper.IApprovedBlockRequestProto} message ApprovedBlockRequestProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ApprovedBlockRequestProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ApprovedBlockRequestProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ApprovedBlockRequestProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ApprovedBlockRequestProto} ApprovedBlockRequestProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApprovedBlockRequestProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ApprovedBlockRequestProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.identifier = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ApprovedBlockRequestProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ApprovedBlockRequestProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ApprovedBlockRequestProto} ApprovedBlockRequestProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ApprovedBlockRequestProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ApprovedBlockRequestProto message.\n         * @function verify\n         * @memberof casper.ApprovedBlockRequestProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ApprovedBlockRequestProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.identifier != null && message.hasOwnProperty(\"identifier\"))\n                if (!$util.isString(message.identifier))\n                    return \"identifier: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ApprovedBlockRequestProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ApprovedBlockRequestProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ApprovedBlockRequestProto} ApprovedBlockRequestProto\n         */\n        ApprovedBlockRequestProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ApprovedBlockRequestProto)\n                return object;\n            var message = new $root.casper.ApprovedBlockRequestProto();\n            if (object.identifier != null)\n                message.identifier = String(object.identifier);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ApprovedBlockRequestProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ApprovedBlockRequestProto\n         * @static\n         * @param {casper.ApprovedBlockRequestProto} message ApprovedBlockRequestProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ApprovedBlockRequestProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.identifier = \"\";\n            if (message.identifier != null && message.hasOwnProperty(\"identifier\"))\n                object.identifier = message.identifier;\n            return object;\n        };\n\n        /**\n         * Converts this ApprovedBlockRequestProto to JSON.\n         * @function toJSON\n         * @memberof casper.ApprovedBlockRequestProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ApprovedBlockRequestProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ApprovedBlockRequestProto;\n    })();\n\n    casper.NoApprovedBlockAvailableProto = (function() {\n\n        /**\n         * Properties of a NoApprovedBlockAvailableProto.\n         * @memberof casper\n         * @interface INoApprovedBlockAvailableProto\n         * @property {string|null} [identifier] NoApprovedBlockAvailableProto identifier\n         * @property {string|null} [nodeIdentifer] NoApprovedBlockAvailableProto nodeIdentifer\n         */\n\n        /**\n         * Constructs a new NoApprovedBlockAvailableProto.\n         * @memberof casper\n         * @classdesc Represents a NoApprovedBlockAvailableProto.\n         * @implements INoApprovedBlockAvailableProto\n         * @constructor\n         * @param {casper.INoApprovedBlockAvailableProto=} [properties] Properties to set\n         */\n        function NoApprovedBlockAvailableProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NoApprovedBlockAvailableProto identifier.\n         * @member {string} identifier\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @instance\n         */\n        NoApprovedBlockAvailableProto.prototype.identifier = \"\";\n\n        /**\n         * NoApprovedBlockAvailableProto nodeIdentifer.\n         * @member {string} nodeIdentifer\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @instance\n         */\n        NoApprovedBlockAvailableProto.prototype.nodeIdentifer = \"\";\n\n        /**\n         * Creates a new NoApprovedBlockAvailableProto instance using the specified properties.\n         * @function create\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @static\n         * @param {casper.INoApprovedBlockAvailableProto=} [properties] Properties to set\n         * @returns {casper.NoApprovedBlockAvailableProto} NoApprovedBlockAvailableProto instance\n         */\n        NoApprovedBlockAvailableProto.create = function create(properties) {\n            return new NoApprovedBlockAvailableProto(properties);\n        };\n\n        /**\n         * Encodes the specified NoApprovedBlockAvailableProto message. Does not implicitly {@link casper.NoApprovedBlockAvailableProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @static\n         * @param {casper.INoApprovedBlockAvailableProto} message NoApprovedBlockAvailableProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NoApprovedBlockAvailableProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.identifier != null && message.hasOwnProperty(\"identifier\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);\n            if (message.nodeIdentifer != null && message.hasOwnProperty(\"nodeIdentifer\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nodeIdentifer);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NoApprovedBlockAvailableProto message, length delimited. Does not implicitly {@link casper.NoApprovedBlockAvailableProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @static\n         * @param {casper.INoApprovedBlockAvailableProto} message NoApprovedBlockAvailableProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NoApprovedBlockAvailableProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NoApprovedBlockAvailableProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.NoApprovedBlockAvailableProto} NoApprovedBlockAvailableProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NoApprovedBlockAvailableProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.NoApprovedBlockAvailableProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.identifier = reader.string();\n                    break;\n                case 2:\n                    message.nodeIdentifer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NoApprovedBlockAvailableProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.NoApprovedBlockAvailableProto} NoApprovedBlockAvailableProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NoApprovedBlockAvailableProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NoApprovedBlockAvailableProto message.\n         * @function verify\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NoApprovedBlockAvailableProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.identifier != null && message.hasOwnProperty(\"identifier\"))\n                if (!$util.isString(message.identifier))\n                    return \"identifier: string expected\";\n            if (message.nodeIdentifer != null && message.hasOwnProperty(\"nodeIdentifer\"))\n                if (!$util.isString(message.nodeIdentifer))\n                    return \"nodeIdentifer: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NoApprovedBlockAvailableProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.NoApprovedBlockAvailableProto} NoApprovedBlockAvailableProto\n         */\n        NoApprovedBlockAvailableProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.NoApprovedBlockAvailableProto)\n                return object;\n            var message = new $root.casper.NoApprovedBlockAvailableProto();\n            if (object.identifier != null)\n                message.identifier = String(object.identifier);\n            if (object.nodeIdentifer != null)\n                message.nodeIdentifer = String(object.nodeIdentifer);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NoApprovedBlockAvailableProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @static\n         * @param {casper.NoApprovedBlockAvailableProto} message NoApprovedBlockAvailableProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NoApprovedBlockAvailableProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.identifier = \"\";\n                object.nodeIdentifer = \"\";\n            }\n            if (message.identifier != null && message.hasOwnProperty(\"identifier\"))\n                object.identifier = message.identifier;\n            if (message.nodeIdentifer != null && message.hasOwnProperty(\"nodeIdentifer\"))\n                object.nodeIdentifer = message.nodeIdentifer;\n            return object;\n        };\n\n        /**\n         * Converts this NoApprovedBlockAvailableProto to JSON.\n         * @function toJSON\n         * @memberof casper.NoApprovedBlockAvailableProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NoApprovedBlockAvailableProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NoApprovedBlockAvailableProto;\n    })();\n\n    casper.BlockMessageProto = (function() {\n\n        /**\n         * Properties of a BlockMessageProto.\n         * @memberof casper\n         * @interface IBlockMessageProto\n         * @property {Uint8Array|null} [blockHash] BlockMessageProto blockHash\n         * @property {casper.IHeaderProto|null} [header] BlockMessageProto header\n         * @property {casper.IBodyProto|null} [body] BlockMessageProto body\n         * @property {Array.<casper.IJustificationProto>|null} [justifications] BlockMessageProto justifications\n         * @property {Uint8Array|null} [sender] BlockMessageProto sender\n         * @property {number|null} [seqNum] BlockMessageProto seqNum\n         * @property {Uint8Array|null} [sig] BlockMessageProto sig\n         * @property {string|null} [sigAlgorithm] BlockMessageProto sigAlgorithm\n         * @property {string|null} [shardId] BlockMessageProto shardId\n         * @property {Uint8Array|null} [extraBytes] BlockMessageProto extraBytes\n         */\n\n        /**\n         * Constructs a new BlockMessageProto.\n         * @memberof casper\n         * @classdesc Represents a BlockMessageProto.\n         * @implements IBlockMessageProto\n         * @constructor\n         * @param {casper.IBlockMessageProto=} [properties] Properties to set\n         */\n        function BlockMessageProto(properties) {\n            this.justifications = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlockMessageProto blockHash.\n         * @member {Uint8Array} blockHash\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.blockHash = $util.newBuffer([]);\n\n        /**\n         * BlockMessageProto header.\n         * @member {casper.IHeaderProto|null|undefined} header\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.header = null;\n\n        /**\n         * BlockMessageProto body.\n         * @member {casper.IBodyProto|null|undefined} body\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.body = null;\n\n        /**\n         * BlockMessageProto justifications.\n         * @member {Array.<casper.IJustificationProto>} justifications\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.justifications = $util.emptyArray;\n\n        /**\n         * BlockMessageProto sender.\n         * @member {Uint8Array} sender\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.sender = $util.newBuffer([]);\n\n        /**\n         * BlockMessageProto seqNum.\n         * @member {number} seqNum\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.seqNum = 0;\n\n        /**\n         * BlockMessageProto sig.\n         * @member {Uint8Array} sig\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.sig = $util.newBuffer([]);\n\n        /**\n         * BlockMessageProto sigAlgorithm.\n         * @member {string} sigAlgorithm\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.sigAlgorithm = \"\";\n\n        /**\n         * BlockMessageProto shardId.\n         * @member {string} shardId\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.shardId = \"\";\n\n        /**\n         * BlockMessageProto extraBytes.\n         * @member {Uint8Array} extraBytes\n         * @memberof casper.BlockMessageProto\n         * @instance\n         */\n        BlockMessageProto.prototype.extraBytes = $util.newBuffer([]);\n\n        /**\n         * Creates a new BlockMessageProto instance using the specified properties.\n         * @function create\n         * @memberof casper.BlockMessageProto\n         * @static\n         * @param {casper.IBlockMessageProto=} [properties] Properties to set\n         * @returns {casper.BlockMessageProto} BlockMessageProto instance\n         */\n        BlockMessageProto.create = function create(properties) {\n            return new BlockMessageProto(properties);\n        };\n\n        /**\n         * Encodes the specified BlockMessageProto message. Does not implicitly {@link casper.BlockMessageProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlockMessageProto\n         * @static\n         * @param {casper.IBlockMessageProto} message BlockMessageProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockMessageProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.blockHash);\n            if (message.header != null && message.hasOwnProperty(\"header\"))\n                $root.casper.HeaderProto.encode(message.header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.body != null && message.hasOwnProperty(\"body\"))\n                $root.casper.BodyProto.encode(message.body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.justifications != null && message.justifications.length)\n                for (var i = 0; i < message.justifications.length; ++i)\n                    $root.casper.JustificationProto.encode(message.justifications[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.sender);\n            if (message.seqNum != null && message.hasOwnProperty(\"seqNum\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.seqNum);\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.sig);\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.sigAlgorithm);\n            if (message.shardId != null && message.hasOwnProperty(\"shardId\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).string(message.shardId);\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.extraBytes);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlockMessageProto message, length delimited. Does not implicitly {@link casper.BlockMessageProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlockMessageProto\n         * @static\n         * @param {casper.IBlockMessageProto} message BlockMessageProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockMessageProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlockMessageProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlockMessageProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlockMessageProto} BlockMessageProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockMessageProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockMessageProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.blockHash = reader.bytes();\n                    break;\n                case 2:\n                    message.header = $root.casper.HeaderProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.body = $root.casper.BodyProto.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.justifications && message.justifications.length))\n                        message.justifications = [];\n                    message.justifications.push($root.casper.JustificationProto.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.sender = reader.bytes();\n                    break;\n                case 6:\n                    message.seqNum = reader.int32();\n                    break;\n                case 7:\n                    message.sig = reader.bytes();\n                    break;\n                case 8:\n                    message.sigAlgorithm = reader.string();\n                    break;\n                case 9:\n                    message.shardId = reader.string();\n                    break;\n                case 10:\n                    message.extraBytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlockMessageProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlockMessageProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlockMessageProto} BlockMessageProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockMessageProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlockMessageProto message.\n         * @function verify\n         * @memberof casper.BlockMessageProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlockMessageProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                if (!(message.blockHash && typeof message.blockHash.length === \"number\" || $util.isString(message.blockHash)))\n                    return \"blockHash: buffer expected\";\n            if (message.header != null && message.hasOwnProperty(\"header\")) {\n                var error = $root.casper.HeaderProto.verify(message.header);\n                if (error)\n                    return \"header.\" + error;\n            }\n            if (message.body != null && message.hasOwnProperty(\"body\")) {\n                var error = $root.casper.BodyProto.verify(message.body);\n                if (error)\n                    return \"body.\" + error;\n            }\n            if (message.justifications != null && message.hasOwnProperty(\"justifications\")) {\n                if (!Array.isArray(message.justifications))\n                    return \"justifications: array expected\";\n                for (var i = 0; i < message.justifications.length; ++i) {\n                    var error = $root.casper.JustificationProto.verify(message.justifications[i]);\n                    if (error)\n                        return \"justifications.\" + error;\n                }\n            }\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                if (!(message.sender && typeof message.sender.length === \"number\" || $util.isString(message.sender)))\n                    return \"sender: buffer expected\";\n            if (message.seqNum != null && message.hasOwnProperty(\"seqNum\"))\n                if (!$util.isInteger(message.seqNum))\n                    return \"seqNum: integer expected\";\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                if (!(message.sig && typeof message.sig.length === \"number\" || $util.isString(message.sig)))\n                    return \"sig: buffer expected\";\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                if (!$util.isString(message.sigAlgorithm))\n                    return \"sigAlgorithm: string expected\";\n            if (message.shardId != null && message.hasOwnProperty(\"shardId\"))\n                if (!$util.isString(message.shardId))\n                    return \"shardId: string expected\";\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                if (!(message.extraBytes && typeof message.extraBytes.length === \"number\" || $util.isString(message.extraBytes)))\n                    return \"extraBytes: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BlockMessageProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlockMessageProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlockMessageProto} BlockMessageProto\n         */\n        BlockMessageProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlockMessageProto)\n                return object;\n            var message = new $root.casper.BlockMessageProto();\n            if (object.blockHash != null)\n                if (typeof object.blockHash === \"string\")\n                    $util.base64.decode(object.blockHash, message.blockHash = $util.newBuffer($util.base64.length(object.blockHash)), 0);\n                else if (object.blockHash.length)\n                    message.blockHash = object.blockHash;\n            if (object.header != null) {\n                if (typeof object.header !== \"object\")\n                    throw TypeError(\".casper.BlockMessageProto.header: object expected\");\n                message.header = $root.casper.HeaderProto.fromObject(object.header);\n            }\n            if (object.body != null) {\n                if (typeof object.body !== \"object\")\n                    throw TypeError(\".casper.BlockMessageProto.body: object expected\");\n                message.body = $root.casper.BodyProto.fromObject(object.body);\n            }\n            if (object.justifications) {\n                if (!Array.isArray(object.justifications))\n                    throw TypeError(\".casper.BlockMessageProto.justifications: array expected\");\n                message.justifications = [];\n                for (var i = 0; i < object.justifications.length; ++i) {\n                    if (typeof object.justifications[i] !== \"object\")\n                        throw TypeError(\".casper.BlockMessageProto.justifications: object expected\");\n                    message.justifications[i] = $root.casper.JustificationProto.fromObject(object.justifications[i]);\n                }\n            }\n            if (object.sender != null)\n                if (typeof object.sender === \"string\")\n                    $util.base64.decode(object.sender, message.sender = $util.newBuffer($util.base64.length(object.sender)), 0);\n                else if (object.sender.length)\n                    message.sender = object.sender;\n            if (object.seqNum != null)\n                message.seqNum = object.seqNum | 0;\n            if (object.sig != null)\n                if (typeof object.sig === \"string\")\n                    $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);\n                else if (object.sig.length)\n                    message.sig = object.sig;\n            if (object.sigAlgorithm != null)\n                message.sigAlgorithm = String(object.sigAlgorithm);\n            if (object.shardId != null)\n                message.shardId = String(object.shardId);\n            if (object.extraBytes != null)\n                if (typeof object.extraBytes === \"string\")\n                    $util.base64.decode(object.extraBytes, message.extraBytes = $util.newBuffer($util.base64.length(object.extraBytes)), 0);\n                else if (object.extraBytes.length)\n                    message.extraBytes = object.extraBytes;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlockMessageProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlockMessageProto\n         * @static\n         * @param {casper.BlockMessageProto} message BlockMessageProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockMessageProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.justifications = [];\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.blockHash = \"\";\n                else {\n                    object.blockHash = [];\n                    if (options.bytes !== Array)\n                        object.blockHash = $util.newBuffer(object.blockHash);\n                }\n                object.header = null;\n                object.body = null;\n                if (options.bytes === String)\n                    object.sender = \"\";\n                else {\n                    object.sender = [];\n                    if (options.bytes !== Array)\n                        object.sender = $util.newBuffer(object.sender);\n                }\n                object.seqNum = 0;\n                if (options.bytes === String)\n                    object.sig = \"\";\n                else {\n                    object.sig = [];\n                    if (options.bytes !== Array)\n                        object.sig = $util.newBuffer(object.sig);\n                }\n                object.sigAlgorithm = \"\";\n                object.shardId = \"\";\n                if (options.bytes === String)\n                    object.extraBytes = \"\";\n                else {\n                    object.extraBytes = [];\n                    if (options.bytes !== Array)\n                        object.extraBytes = $util.newBuffer(object.extraBytes);\n                }\n            }\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                object.blockHash = options.bytes === String ? $util.base64.encode(message.blockHash, 0, message.blockHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.blockHash) : message.blockHash;\n            if (message.header != null && message.hasOwnProperty(\"header\"))\n                object.header = $root.casper.HeaderProto.toObject(message.header, options);\n            if (message.body != null && message.hasOwnProperty(\"body\"))\n                object.body = $root.casper.BodyProto.toObject(message.body, options);\n            if (message.justifications && message.justifications.length) {\n                object.justifications = [];\n                for (var j = 0; j < message.justifications.length; ++j)\n                    object.justifications[j] = $root.casper.JustificationProto.toObject(message.justifications[j], options);\n            }\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                object.sender = options.bytes === String ? $util.base64.encode(message.sender, 0, message.sender.length) : options.bytes === Array ? Array.prototype.slice.call(message.sender) : message.sender;\n            if (message.seqNum != null && message.hasOwnProperty(\"seqNum\"))\n                object.seqNum = message.seqNum;\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                object.sigAlgorithm = message.sigAlgorithm;\n            if (message.shardId != null && message.hasOwnProperty(\"shardId\"))\n                object.shardId = message.shardId;\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                object.extraBytes = options.bytes === String ? $util.base64.encode(message.extraBytes, 0, message.extraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.extraBytes) : message.extraBytes;\n            return object;\n        };\n\n        /**\n         * Converts this BlockMessageProto to JSON.\n         * @function toJSON\n         * @memberof casper.BlockMessageProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockMessageProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlockMessageProto;\n    })();\n\n    casper.BlockHashMessageProto = (function() {\n\n        /**\n         * Properties of a BlockHashMessageProto.\n         * @memberof casper\n         * @interface IBlockHashMessageProto\n         * @property {Uint8Array|null} [hash] BlockHashMessageProto hash\n         * @property {Uint8Array|null} [blockCreator] BlockHashMessageProto blockCreator\n         */\n\n        /**\n         * Constructs a new BlockHashMessageProto.\n         * @memberof casper\n         * @classdesc Represents a BlockHashMessageProto.\n         * @implements IBlockHashMessageProto\n         * @constructor\n         * @param {casper.IBlockHashMessageProto=} [properties] Properties to set\n         */\n        function BlockHashMessageProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlockHashMessageProto hash.\n         * @member {Uint8Array} hash\n         * @memberof casper.BlockHashMessageProto\n         * @instance\n         */\n        BlockHashMessageProto.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * BlockHashMessageProto blockCreator.\n         * @member {Uint8Array} blockCreator\n         * @memberof casper.BlockHashMessageProto\n         * @instance\n         */\n        BlockHashMessageProto.prototype.blockCreator = $util.newBuffer([]);\n\n        /**\n         * Creates a new BlockHashMessageProto instance using the specified properties.\n         * @function create\n         * @memberof casper.BlockHashMessageProto\n         * @static\n         * @param {casper.IBlockHashMessageProto=} [properties] Properties to set\n         * @returns {casper.BlockHashMessageProto} BlockHashMessageProto instance\n         */\n        BlockHashMessageProto.create = function create(properties) {\n            return new BlockHashMessageProto(properties);\n        };\n\n        /**\n         * Encodes the specified BlockHashMessageProto message. Does not implicitly {@link casper.BlockHashMessageProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlockHashMessageProto\n         * @static\n         * @param {casper.IBlockHashMessageProto} message BlockHashMessageProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockHashMessageProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);\n            if (message.blockCreator != null && message.hasOwnProperty(\"blockCreator\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.blockCreator);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlockHashMessageProto message, length delimited. Does not implicitly {@link casper.BlockHashMessageProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlockHashMessageProto\n         * @static\n         * @param {casper.IBlockHashMessageProto} message BlockHashMessageProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockHashMessageProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlockHashMessageProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlockHashMessageProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlockHashMessageProto} BlockHashMessageProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockHashMessageProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockHashMessageProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                case 2:\n                    message.blockCreator = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlockHashMessageProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlockHashMessageProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlockHashMessageProto} BlockHashMessageProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockHashMessageProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlockHashMessageProto message.\n         * @function verify\n         * @memberof casper.BlockHashMessageProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlockHashMessageProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            if (message.blockCreator != null && message.hasOwnProperty(\"blockCreator\"))\n                if (!(message.blockCreator && typeof message.blockCreator.length === \"number\" || $util.isString(message.blockCreator)))\n                    return \"blockCreator: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BlockHashMessageProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlockHashMessageProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlockHashMessageProto} BlockHashMessageProto\n         */\n        BlockHashMessageProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlockHashMessageProto)\n                return object;\n            var message = new $root.casper.BlockHashMessageProto();\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            if (object.blockCreator != null)\n                if (typeof object.blockCreator === \"string\")\n                    $util.base64.decode(object.blockCreator, message.blockCreator = $util.newBuffer($util.base64.length(object.blockCreator)), 0);\n                else if (object.blockCreator.length)\n                    message.blockCreator = object.blockCreator;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlockHashMessageProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlockHashMessageProto\n         * @static\n         * @param {casper.BlockHashMessageProto} message BlockHashMessageProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockHashMessageProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n                if (options.bytes === String)\n                    object.blockCreator = \"\";\n                else {\n                    object.blockCreator = [];\n                    if (options.bytes !== Array)\n                        object.blockCreator = $util.newBuffer(object.blockCreator);\n                }\n            }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            if (message.blockCreator != null && message.hasOwnProperty(\"blockCreator\"))\n                object.blockCreator = options.bytes === String ? $util.base64.encode(message.blockCreator, 0, message.blockCreator.length) : options.bytes === Array ? Array.prototype.slice.call(message.blockCreator) : message.blockCreator;\n            return object;\n        };\n\n        /**\n         * Converts this BlockHashMessageProto to JSON.\n         * @function toJSON\n         * @memberof casper.BlockHashMessageProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockHashMessageProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlockHashMessageProto;\n    })();\n\n    casper.BlockMetadataInternal = (function() {\n\n        /**\n         * Properties of a BlockMetadataInternal.\n         * @memberof casper\n         * @interface IBlockMetadataInternal\n         * @property {Uint8Array|null} [blockHash] BlockMetadataInternal blockHash\n         * @property {Array.<Uint8Array>|null} [parents] BlockMetadataInternal parents\n         * @property {Uint8Array|null} [sender] BlockMetadataInternal sender\n         * @property {Array.<casper.IJustificationProto>|null} [justifications] BlockMetadataInternal justifications\n         * @property {Array.<casper.IBondProto>|null} [bonds] BlockMetadataInternal bonds\n         * @property {number|Long|null} [blockNum] BlockMetadataInternal blockNum\n         * @property {number|null} [seqNum] BlockMetadataInternal seqNum\n         * @property {boolean|null} [invalid] BlockMetadataInternal invalid\n         */\n\n        /**\n         * Constructs a new BlockMetadataInternal.\n         * @memberof casper\n         * @classdesc Represents a BlockMetadataInternal.\n         * @implements IBlockMetadataInternal\n         * @constructor\n         * @param {casper.IBlockMetadataInternal=} [properties] Properties to set\n         */\n        function BlockMetadataInternal(properties) {\n            this.parents = [];\n            this.justifications = [];\n            this.bonds = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlockMetadataInternal blockHash.\n         * @member {Uint8Array} blockHash\n         * @memberof casper.BlockMetadataInternal\n         * @instance\n         */\n        BlockMetadataInternal.prototype.blockHash = $util.newBuffer([]);\n\n        /**\n         * BlockMetadataInternal parents.\n         * @member {Array.<Uint8Array>} parents\n         * @memberof casper.BlockMetadataInternal\n         * @instance\n         */\n        BlockMetadataInternal.prototype.parents = $util.emptyArray;\n\n        /**\n         * BlockMetadataInternal sender.\n         * @member {Uint8Array} sender\n         * @memberof casper.BlockMetadataInternal\n         * @instance\n         */\n        BlockMetadataInternal.prototype.sender = $util.newBuffer([]);\n\n        /**\n         * BlockMetadataInternal justifications.\n         * @member {Array.<casper.IJustificationProto>} justifications\n         * @memberof casper.BlockMetadataInternal\n         * @instance\n         */\n        BlockMetadataInternal.prototype.justifications = $util.emptyArray;\n\n        /**\n         * BlockMetadataInternal bonds.\n         * @member {Array.<casper.IBondProto>} bonds\n         * @memberof casper.BlockMetadataInternal\n         * @instance\n         */\n        BlockMetadataInternal.prototype.bonds = $util.emptyArray;\n\n        /**\n         * BlockMetadataInternal blockNum.\n         * @member {number|Long} blockNum\n         * @memberof casper.BlockMetadataInternal\n         * @instance\n         */\n        BlockMetadataInternal.prototype.blockNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * BlockMetadataInternal seqNum.\n         * @member {number} seqNum\n         * @memberof casper.BlockMetadataInternal\n         * @instance\n         */\n        BlockMetadataInternal.prototype.seqNum = 0;\n\n        /**\n         * BlockMetadataInternal invalid.\n         * @member {boolean} invalid\n         * @memberof casper.BlockMetadataInternal\n         * @instance\n         */\n        BlockMetadataInternal.prototype.invalid = false;\n\n        /**\n         * Creates a new BlockMetadataInternal instance using the specified properties.\n         * @function create\n         * @memberof casper.BlockMetadataInternal\n         * @static\n         * @param {casper.IBlockMetadataInternal=} [properties] Properties to set\n         * @returns {casper.BlockMetadataInternal} BlockMetadataInternal instance\n         */\n        BlockMetadataInternal.create = function create(properties) {\n            return new BlockMetadataInternal(properties);\n        };\n\n        /**\n         * Encodes the specified BlockMetadataInternal message. Does not implicitly {@link casper.BlockMetadataInternal.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlockMetadataInternal\n         * @static\n         * @param {casper.IBlockMetadataInternal} message BlockMetadataInternal message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockMetadataInternal.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.blockHash);\n            if (message.parents != null && message.parents.length)\n                for (var i = 0; i < message.parents.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.parents[i]);\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.sender);\n            if (message.justifications != null && message.justifications.length)\n                for (var i = 0; i < message.justifications.length; ++i)\n                    $root.casper.JustificationProto.encode(message.justifications[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.bonds != null && message.bonds.length)\n                for (var i = 0; i < message.bonds.length; ++i)\n                    $root.casper.BondProto.encode(message.bonds[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.blockNum != null && message.hasOwnProperty(\"blockNum\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.blockNum);\n            if (message.seqNum != null && message.hasOwnProperty(\"seqNum\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.seqNum);\n            if (message.invalid != null && message.hasOwnProperty(\"invalid\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.invalid);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlockMetadataInternal message, length delimited. Does not implicitly {@link casper.BlockMetadataInternal.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlockMetadataInternal\n         * @static\n         * @param {casper.IBlockMetadataInternal} message BlockMetadataInternal message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockMetadataInternal.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlockMetadataInternal message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlockMetadataInternal\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlockMetadataInternal} BlockMetadataInternal\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockMetadataInternal.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockMetadataInternal();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.blockHash = reader.bytes();\n                    break;\n                case 2:\n                    if (!(message.parents && message.parents.length))\n                        message.parents = [];\n                    message.parents.push(reader.bytes());\n                    break;\n                case 3:\n                    message.sender = reader.bytes();\n                    break;\n                case 4:\n                    if (!(message.justifications && message.justifications.length))\n                        message.justifications = [];\n                    message.justifications.push($root.casper.JustificationProto.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    if (!(message.bonds && message.bonds.length))\n                        message.bonds = [];\n                    message.bonds.push($root.casper.BondProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.blockNum = reader.int64();\n                    break;\n                case 7:\n                    message.seqNum = reader.int32();\n                    break;\n                case 8:\n                    message.invalid = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlockMetadataInternal message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlockMetadataInternal\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlockMetadataInternal} BlockMetadataInternal\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockMetadataInternal.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlockMetadataInternal message.\n         * @function verify\n         * @memberof casper.BlockMetadataInternal\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlockMetadataInternal.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                if (!(message.blockHash && typeof message.blockHash.length === \"number\" || $util.isString(message.blockHash)))\n                    return \"blockHash: buffer expected\";\n            if (message.parents != null && message.hasOwnProperty(\"parents\")) {\n                if (!Array.isArray(message.parents))\n                    return \"parents: array expected\";\n                for (var i = 0; i < message.parents.length; ++i)\n                    if (!(message.parents[i] && typeof message.parents[i].length === \"number\" || $util.isString(message.parents[i])))\n                        return \"parents: buffer[] expected\";\n            }\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                if (!(message.sender && typeof message.sender.length === \"number\" || $util.isString(message.sender)))\n                    return \"sender: buffer expected\";\n            if (message.justifications != null && message.hasOwnProperty(\"justifications\")) {\n                if (!Array.isArray(message.justifications))\n                    return \"justifications: array expected\";\n                for (var i = 0; i < message.justifications.length; ++i) {\n                    var error = $root.casper.JustificationProto.verify(message.justifications[i]);\n                    if (error)\n                        return \"justifications.\" + error;\n                }\n            }\n            if (message.bonds != null && message.hasOwnProperty(\"bonds\")) {\n                if (!Array.isArray(message.bonds))\n                    return \"bonds: array expected\";\n                for (var i = 0; i < message.bonds.length; ++i) {\n                    var error = $root.casper.BondProto.verify(message.bonds[i]);\n                    if (error)\n                        return \"bonds.\" + error;\n                }\n            }\n            if (message.blockNum != null && message.hasOwnProperty(\"blockNum\"))\n                if (!$util.isInteger(message.blockNum) && !(message.blockNum && $util.isInteger(message.blockNum.low) && $util.isInteger(message.blockNum.high)))\n                    return \"blockNum: integer|Long expected\";\n            if (message.seqNum != null && message.hasOwnProperty(\"seqNum\"))\n                if (!$util.isInteger(message.seqNum))\n                    return \"seqNum: integer expected\";\n            if (message.invalid != null && message.hasOwnProperty(\"invalid\"))\n                if (typeof message.invalid !== \"boolean\")\n                    return \"invalid: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BlockMetadataInternal message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlockMetadataInternal\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlockMetadataInternal} BlockMetadataInternal\n         */\n        BlockMetadataInternal.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlockMetadataInternal)\n                return object;\n            var message = new $root.casper.BlockMetadataInternal();\n            if (object.blockHash != null)\n                if (typeof object.blockHash === \"string\")\n                    $util.base64.decode(object.blockHash, message.blockHash = $util.newBuffer($util.base64.length(object.blockHash)), 0);\n                else if (object.blockHash.length)\n                    message.blockHash = object.blockHash;\n            if (object.parents) {\n                if (!Array.isArray(object.parents))\n                    throw TypeError(\".casper.BlockMetadataInternal.parents: array expected\");\n                message.parents = [];\n                for (var i = 0; i < object.parents.length; ++i)\n                    if (typeof object.parents[i] === \"string\")\n                        $util.base64.decode(object.parents[i], message.parents[i] = $util.newBuffer($util.base64.length(object.parents[i])), 0);\n                    else if (object.parents[i].length)\n                        message.parents[i] = object.parents[i];\n            }\n            if (object.sender != null)\n                if (typeof object.sender === \"string\")\n                    $util.base64.decode(object.sender, message.sender = $util.newBuffer($util.base64.length(object.sender)), 0);\n                else if (object.sender.length)\n                    message.sender = object.sender;\n            if (object.justifications) {\n                if (!Array.isArray(object.justifications))\n                    throw TypeError(\".casper.BlockMetadataInternal.justifications: array expected\");\n                message.justifications = [];\n                for (var i = 0; i < object.justifications.length; ++i) {\n                    if (typeof object.justifications[i] !== \"object\")\n                        throw TypeError(\".casper.BlockMetadataInternal.justifications: object expected\");\n                    message.justifications[i] = $root.casper.JustificationProto.fromObject(object.justifications[i]);\n                }\n            }\n            if (object.bonds) {\n                if (!Array.isArray(object.bonds))\n                    throw TypeError(\".casper.BlockMetadataInternal.bonds: array expected\");\n                message.bonds = [];\n                for (var i = 0; i < object.bonds.length; ++i) {\n                    if (typeof object.bonds[i] !== \"object\")\n                        throw TypeError(\".casper.BlockMetadataInternal.bonds: object expected\");\n                    message.bonds[i] = $root.casper.BondProto.fromObject(object.bonds[i]);\n                }\n            }\n            if (object.blockNum != null)\n                if ($util.Long)\n                    (message.blockNum = $util.Long.fromValue(object.blockNum)).unsigned = false;\n                else if (typeof object.blockNum === \"string\")\n                    message.blockNum = parseInt(object.blockNum, 10);\n                else if (typeof object.blockNum === \"number\")\n                    message.blockNum = object.blockNum;\n                else if (typeof object.blockNum === \"object\")\n                    message.blockNum = new $util.LongBits(object.blockNum.low >>> 0, object.blockNum.high >>> 0).toNumber();\n            if (object.seqNum != null)\n                message.seqNum = object.seqNum | 0;\n            if (object.invalid != null)\n                message.invalid = Boolean(object.invalid);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlockMetadataInternal message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlockMetadataInternal\n         * @static\n         * @param {casper.BlockMetadataInternal} message BlockMetadataInternal\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockMetadataInternal.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.parents = [];\n                object.justifications = [];\n                object.bonds = [];\n            }\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.blockHash = \"\";\n                else {\n                    object.blockHash = [];\n                    if (options.bytes !== Array)\n                        object.blockHash = $util.newBuffer(object.blockHash);\n                }\n                if (options.bytes === String)\n                    object.sender = \"\";\n                else {\n                    object.sender = [];\n                    if (options.bytes !== Array)\n                        object.sender = $util.newBuffer(object.sender);\n                }\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.blockNum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.blockNum = options.longs === String ? \"0\" : 0;\n                object.seqNum = 0;\n                object.invalid = false;\n            }\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                object.blockHash = options.bytes === String ? $util.base64.encode(message.blockHash, 0, message.blockHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.blockHash) : message.blockHash;\n            if (message.parents && message.parents.length) {\n                object.parents = [];\n                for (var j = 0; j < message.parents.length; ++j)\n                    object.parents[j] = options.bytes === String ? $util.base64.encode(message.parents[j], 0, message.parents[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.parents[j]) : message.parents[j];\n            }\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                object.sender = options.bytes === String ? $util.base64.encode(message.sender, 0, message.sender.length) : options.bytes === Array ? Array.prototype.slice.call(message.sender) : message.sender;\n            if (message.justifications && message.justifications.length) {\n                object.justifications = [];\n                for (var j = 0; j < message.justifications.length; ++j)\n                    object.justifications[j] = $root.casper.JustificationProto.toObject(message.justifications[j], options);\n            }\n            if (message.bonds && message.bonds.length) {\n                object.bonds = [];\n                for (var j = 0; j < message.bonds.length; ++j)\n                    object.bonds[j] = $root.casper.BondProto.toObject(message.bonds[j], options);\n            }\n            if (message.blockNum != null && message.hasOwnProperty(\"blockNum\"))\n                if (typeof message.blockNum === \"number\")\n                    object.blockNum = options.longs === String ? String(message.blockNum) : message.blockNum;\n                else\n                    object.blockNum = options.longs === String ? $util.Long.prototype.toString.call(message.blockNum) : options.longs === Number ? new $util.LongBits(message.blockNum.low >>> 0, message.blockNum.high >>> 0).toNumber() : message.blockNum;\n            if (message.seqNum != null && message.hasOwnProperty(\"seqNum\"))\n                object.seqNum = message.seqNum;\n            if (message.invalid != null && message.hasOwnProperty(\"invalid\"))\n                object.invalid = message.invalid;\n            return object;\n        };\n\n        /**\n         * Converts this BlockMetadataInternal to JSON.\n         * @function toJSON\n         * @memberof casper.BlockMetadataInternal\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockMetadataInternal.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlockMetadataInternal;\n    })();\n\n    casper.HeaderProto = (function() {\n\n        /**\n         * Properties of a HeaderProto.\n         * @memberof casper\n         * @interface IHeaderProto\n         * @property {Array.<Uint8Array>|null} [parentsHashList] HeaderProto parentsHashList\n         * @property {number|Long|null} [timestamp] HeaderProto timestamp\n         * @property {number|Long|null} [version] HeaderProto version\n         * @property {Uint8Array|null} [extraBytes] HeaderProto extraBytes\n         */\n\n        /**\n         * Constructs a new HeaderProto.\n         * @memberof casper\n         * @classdesc Represents a HeaderProto.\n         * @implements IHeaderProto\n         * @constructor\n         * @param {casper.IHeaderProto=} [properties] Properties to set\n         */\n        function HeaderProto(properties) {\n            this.parentsHashList = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HeaderProto parentsHashList.\n         * @member {Array.<Uint8Array>} parentsHashList\n         * @memberof casper.HeaderProto\n         * @instance\n         */\n        HeaderProto.prototype.parentsHashList = $util.emptyArray;\n\n        /**\n         * HeaderProto timestamp.\n         * @member {number|Long} timestamp\n         * @memberof casper.HeaderProto\n         * @instance\n         */\n        HeaderProto.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * HeaderProto version.\n         * @member {number|Long} version\n         * @memberof casper.HeaderProto\n         * @instance\n         */\n        HeaderProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * HeaderProto extraBytes.\n         * @member {Uint8Array} extraBytes\n         * @memberof casper.HeaderProto\n         * @instance\n         */\n        HeaderProto.prototype.extraBytes = $util.newBuffer([]);\n\n        /**\n         * Creates a new HeaderProto instance using the specified properties.\n         * @function create\n         * @memberof casper.HeaderProto\n         * @static\n         * @param {casper.IHeaderProto=} [properties] Properties to set\n         * @returns {casper.HeaderProto} HeaderProto instance\n         */\n        HeaderProto.create = function create(properties) {\n            return new HeaderProto(properties);\n        };\n\n        /**\n         * Encodes the specified HeaderProto message. Does not implicitly {@link casper.HeaderProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.HeaderProto\n         * @static\n         * @param {casper.IHeaderProto} message HeaderProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HeaderProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.parentsHashList != null && message.parentsHashList.length)\n                for (var i = 0; i < message.parentsHashList.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.parentsHashList[i]);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.timestamp);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.version);\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.extraBytes);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HeaderProto message, length delimited. Does not implicitly {@link casper.HeaderProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.HeaderProto\n         * @static\n         * @param {casper.IHeaderProto} message HeaderProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HeaderProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HeaderProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.HeaderProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.HeaderProto} HeaderProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HeaderProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.HeaderProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.parentsHashList && message.parentsHashList.length))\n                        message.parentsHashList = [];\n                    message.parentsHashList.push(reader.bytes());\n                    break;\n                case 5:\n                    message.timestamp = reader.int64();\n                    break;\n                case 6:\n                    message.version = reader.int64();\n                    break;\n                case 7:\n                    message.extraBytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HeaderProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.HeaderProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.HeaderProto} HeaderProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HeaderProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HeaderProto message.\n         * @function verify\n         * @memberof casper.HeaderProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HeaderProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.parentsHashList != null && message.hasOwnProperty(\"parentsHashList\")) {\n                if (!Array.isArray(message.parentsHashList))\n                    return \"parentsHashList: array expected\";\n                for (var i = 0; i < message.parentsHashList.length; ++i)\n                    if (!(message.parentsHashList[i] && typeof message.parentsHashList[i].length === \"number\" || $util.isString(message.parentsHashList[i])))\n                        return \"parentsHashList: buffer[] expected\";\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                if (!(message.extraBytes && typeof message.extraBytes.length === \"number\" || $util.isString(message.extraBytes)))\n                    return \"extraBytes: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a HeaderProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.HeaderProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.HeaderProto} HeaderProto\n         */\n        HeaderProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.HeaderProto)\n                return object;\n            var message = new $root.casper.HeaderProto();\n            if (object.parentsHashList) {\n                if (!Array.isArray(object.parentsHashList))\n                    throw TypeError(\".casper.HeaderProto.parentsHashList: array expected\");\n                message.parentsHashList = [];\n                for (var i = 0; i < object.parentsHashList.length; ++i)\n                    if (typeof object.parentsHashList[i] === \"string\")\n                        $util.base64.decode(object.parentsHashList[i], message.parentsHashList[i] = $util.newBuffer($util.base64.length(object.parentsHashList[i])), 0);\n                    else if (object.parentsHashList[i].length)\n                        message.parentsHashList[i] = object.parentsHashList[i];\n            }\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            if (object.extraBytes != null)\n                if (typeof object.extraBytes === \"string\")\n                    $util.base64.decode(object.extraBytes, message.extraBytes = $util.newBuffer($util.base64.length(object.extraBytes)), 0);\n                else if (object.extraBytes.length)\n                    message.extraBytes = object.extraBytes;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a HeaderProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.HeaderProto\n         * @static\n         * @param {casper.HeaderProto} message HeaderProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HeaderProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.parentsHashList = [];\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.extraBytes = \"\";\n                else {\n                    object.extraBytes = [];\n                    if (options.bytes !== Array)\n                        object.extraBytes = $util.newBuffer(object.extraBytes);\n                }\n            }\n            if (message.parentsHashList && message.parentsHashList.length) {\n                object.parentsHashList = [];\n                for (var j = 0; j < message.parentsHashList.length; ++j)\n                    object.parentsHashList[j] = options.bytes === String ? $util.base64.encode(message.parentsHashList[j], 0, message.parentsHashList[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.parentsHashList[j]) : message.parentsHashList[j];\n            }\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                object.extraBytes = options.bytes === String ? $util.base64.encode(message.extraBytes, 0, message.extraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.extraBytes) : message.extraBytes;\n            return object;\n        };\n\n        /**\n         * Converts this HeaderProto to JSON.\n         * @function toJSON\n         * @memberof casper.HeaderProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HeaderProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return HeaderProto;\n    })();\n\n    casper.DeployDataProto = (function() {\n\n        /**\n         * Properties of a DeployDataProto.\n         * @memberof casper\n         * @interface IDeployDataProto\n         * @property {Uint8Array|null} [deployer] DeployDataProto deployer\n         * @property {string|null} [term] DeployDataProto term\n         * @property {number|Long|null} [timestamp] DeployDataProto timestamp\n         * @property {Uint8Array|null} [sig] DeployDataProto sig\n         * @property {string|null} [sigAlgorithm] DeployDataProto sigAlgorithm\n         * @property {number|Long|null} [phloPrice] DeployDataProto phloPrice\n         * @property {number|Long|null} [phloLimit] DeployDataProto phloLimit\n         * @property {number|Long|null} [validAfterBlockNumber] DeployDataProto validAfterBlockNumber\n         */\n\n        /**\n         * Constructs a new DeployDataProto.\n         * @memberof casper\n         * @classdesc Note: deploys are uniquely keyed by `user`, `timestamp`.\n         * \n         * **TODO**: details of signatures and payment. See RHOL-781\n         * @implements IDeployDataProto\n         * @constructor\n         * @param {casper.IDeployDataProto=} [properties] Properties to set\n         */\n        function DeployDataProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DeployDataProto deployer.\n         * @member {Uint8Array} deployer\n         * @memberof casper.DeployDataProto\n         * @instance\n         */\n        DeployDataProto.prototype.deployer = $util.newBuffer([]);\n\n        /**\n         * DeployDataProto term.\n         * @member {string} term\n         * @memberof casper.DeployDataProto\n         * @instance\n         */\n        DeployDataProto.prototype.term = \"\";\n\n        /**\n         * DeployDataProto timestamp.\n         * @member {number|Long} timestamp\n         * @memberof casper.DeployDataProto\n         * @instance\n         */\n        DeployDataProto.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeployDataProto sig.\n         * @member {Uint8Array} sig\n         * @memberof casper.DeployDataProto\n         * @instance\n         */\n        DeployDataProto.prototype.sig = $util.newBuffer([]);\n\n        /**\n         * DeployDataProto sigAlgorithm.\n         * @member {string} sigAlgorithm\n         * @memberof casper.DeployDataProto\n         * @instance\n         */\n        DeployDataProto.prototype.sigAlgorithm = \"\";\n\n        /**\n         * DeployDataProto phloPrice.\n         * @member {number|Long} phloPrice\n         * @memberof casper.DeployDataProto\n         * @instance\n         */\n        DeployDataProto.prototype.phloPrice = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeployDataProto phloLimit.\n         * @member {number|Long} phloLimit\n         * @memberof casper.DeployDataProto\n         * @instance\n         */\n        DeployDataProto.prototype.phloLimit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeployDataProto validAfterBlockNumber.\n         * @member {number|Long} validAfterBlockNumber\n         * @memberof casper.DeployDataProto\n         * @instance\n         */\n        DeployDataProto.prototype.validAfterBlockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new DeployDataProto instance using the specified properties.\n         * @function create\n         * @memberof casper.DeployDataProto\n         * @static\n         * @param {casper.IDeployDataProto=} [properties] Properties to set\n         * @returns {casper.DeployDataProto} DeployDataProto instance\n         */\n        DeployDataProto.create = function create(properties) {\n            return new DeployDataProto(properties);\n        };\n\n        /**\n         * Encodes the specified DeployDataProto message. Does not implicitly {@link casper.DeployDataProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.DeployDataProto\n         * @static\n         * @param {casper.IDeployDataProto} message DeployDataProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeployDataProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.deployer != null && message.hasOwnProperty(\"deployer\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.deployer);\n            if (message.term != null && message.hasOwnProperty(\"term\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.term);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.sig);\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.sigAlgorithm);\n            if (message.phloPrice != null && message.hasOwnProperty(\"phloPrice\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.phloPrice);\n            if (message.phloLimit != null && message.hasOwnProperty(\"phloLimit\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.phloLimit);\n            if (message.validAfterBlockNumber != null && message.hasOwnProperty(\"validAfterBlockNumber\"))\n                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.validAfterBlockNumber);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DeployDataProto message, length delimited. Does not implicitly {@link casper.DeployDataProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.DeployDataProto\n         * @static\n         * @param {casper.IDeployDataProto} message DeployDataProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeployDataProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DeployDataProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.DeployDataProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.DeployDataProto} DeployDataProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeployDataProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DeployDataProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.deployer = reader.bytes();\n                    break;\n                case 2:\n                    message.term = reader.string();\n                    break;\n                case 3:\n                    message.timestamp = reader.int64();\n                    break;\n                case 4:\n                    message.sig = reader.bytes();\n                    break;\n                case 5:\n                    message.sigAlgorithm = reader.string();\n                    break;\n                case 7:\n                    message.phloPrice = reader.int64();\n                    break;\n                case 8:\n                    message.phloLimit = reader.int64();\n                    break;\n                case 10:\n                    message.validAfterBlockNumber = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DeployDataProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.DeployDataProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.DeployDataProto} DeployDataProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeployDataProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DeployDataProto message.\n         * @function verify\n         * @memberof casper.DeployDataProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DeployDataProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.deployer != null && message.hasOwnProperty(\"deployer\"))\n                if (!(message.deployer && typeof message.deployer.length === \"number\" || $util.isString(message.deployer)))\n                    return \"deployer: buffer expected\";\n            if (message.term != null && message.hasOwnProperty(\"term\"))\n                if (!$util.isString(message.term))\n                    return \"term: string expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                if (!(message.sig && typeof message.sig.length === \"number\" || $util.isString(message.sig)))\n                    return \"sig: buffer expected\";\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                if (!$util.isString(message.sigAlgorithm))\n                    return \"sigAlgorithm: string expected\";\n            if (message.phloPrice != null && message.hasOwnProperty(\"phloPrice\"))\n                if (!$util.isInteger(message.phloPrice) && !(message.phloPrice && $util.isInteger(message.phloPrice.low) && $util.isInteger(message.phloPrice.high)))\n                    return \"phloPrice: integer|Long expected\";\n            if (message.phloLimit != null && message.hasOwnProperty(\"phloLimit\"))\n                if (!$util.isInteger(message.phloLimit) && !(message.phloLimit && $util.isInteger(message.phloLimit.low) && $util.isInteger(message.phloLimit.high)))\n                    return \"phloLimit: integer|Long expected\";\n            if (message.validAfterBlockNumber != null && message.hasOwnProperty(\"validAfterBlockNumber\"))\n                if (!$util.isInteger(message.validAfterBlockNumber) && !(message.validAfterBlockNumber && $util.isInteger(message.validAfterBlockNumber.low) && $util.isInteger(message.validAfterBlockNumber.high)))\n                    return \"validAfterBlockNumber: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a DeployDataProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.DeployDataProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.DeployDataProto} DeployDataProto\n         */\n        DeployDataProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.DeployDataProto)\n                return object;\n            var message = new $root.casper.DeployDataProto();\n            if (object.deployer != null)\n                if (typeof object.deployer === \"string\")\n                    $util.base64.decode(object.deployer, message.deployer = $util.newBuffer($util.base64.length(object.deployer)), 0);\n                else if (object.deployer.length)\n                    message.deployer = object.deployer;\n            if (object.term != null)\n                message.term = String(object.term);\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n            if (object.sig != null)\n                if (typeof object.sig === \"string\")\n                    $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);\n                else if (object.sig.length)\n                    message.sig = object.sig;\n            if (object.sigAlgorithm != null)\n                message.sigAlgorithm = String(object.sigAlgorithm);\n            if (object.phloPrice != null)\n                if ($util.Long)\n                    (message.phloPrice = $util.Long.fromValue(object.phloPrice)).unsigned = false;\n                else if (typeof object.phloPrice === \"string\")\n                    message.phloPrice = parseInt(object.phloPrice, 10);\n                else if (typeof object.phloPrice === \"number\")\n                    message.phloPrice = object.phloPrice;\n                else if (typeof object.phloPrice === \"object\")\n                    message.phloPrice = new $util.LongBits(object.phloPrice.low >>> 0, object.phloPrice.high >>> 0).toNumber();\n            if (object.phloLimit != null)\n                if ($util.Long)\n                    (message.phloLimit = $util.Long.fromValue(object.phloLimit)).unsigned = false;\n                else if (typeof object.phloLimit === \"string\")\n                    message.phloLimit = parseInt(object.phloLimit, 10);\n                else if (typeof object.phloLimit === \"number\")\n                    message.phloLimit = object.phloLimit;\n                else if (typeof object.phloLimit === \"object\")\n                    message.phloLimit = new $util.LongBits(object.phloLimit.low >>> 0, object.phloLimit.high >>> 0).toNumber();\n            if (object.validAfterBlockNumber != null)\n                if ($util.Long)\n                    (message.validAfterBlockNumber = $util.Long.fromValue(object.validAfterBlockNumber)).unsigned = false;\n                else if (typeof object.validAfterBlockNumber === \"string\")\n                    message.validAfterBlockNumber = parseInt(object.validAfterBlockNumber, 10);\n                else if (typeof object.validAfterBlockNumber === \"number\")\n                    message.validAfterBlockNumber = object.validAfterBlockNumber;\n                else if (typeof object.validAfterBlockNumber === \"object\")\n                    message.validAfterBlockNumber = new $util.LongBits(object.validAfterBlockNumber.low >>> 0, object.validAfterBlockNumber.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DeployDataProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.DeployDataProto\n         * @static\n         * @param {casper.DeployDataProto} message DeployDataProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DeployDataProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.deployer = \"\";\n                else {\n                    object.deployer = [];\n                    if (options.bytes !== Array)\n                        object.deployer = $util.newBuffer(object.deployer);\n                }\n                object.term = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.sig = \"\";\n                else {\n                    object.sig = [];\n                    if (options.bytes !== Array)\n                        object.sig = $util.newBuffer(object.sig);\n                }\n                object.sigAlgorithm = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.phloPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.phloPrice = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.phloLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.phloLimit = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.validAfterBlockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.validAfterBlockNumber = options.longs === String ? \"0\" : 0;\n            }\n            if (message.deployer != null && message.hasOwnProperty(\"deployer\"))\n                object.deployer = options.bytes === String ? $util.base64.encode(message.deployer, 0, message.deployer.length) : options.bytes === Array ? Array.prototype.slice.call(message.deployer) : message.deployer;\n            if (message.term != null && message.hasOwnProperty(\"term\"))\n                object.term = message.term;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                object.sigAlgorithm = message.sigAlgorithm;\n            if (message.phloPrice != null && message.hasOwnProperty(\"phloPrice\"))\n                if (typeof message.phloPrice === \"number\")\n                    object.phloPrice = options.longs === String ? String(message.phloPrice) : message.phloPrice;\n                else\n                    object.phloPrice = options.longs === String ? $util.Long.prototype.toString.call(message.phloPrice) : options.longs === Number ? new $util.LongBits(message.phloPrice.low >>> 0, message.phloPrice.high >>> 0).toNumber() : message.phloPrice;\n            if (message.phloLimit != null && message.hasOwnProperty(\"phloLimit\"))\n                if (typeof message.phloLimit === \"number\")\n                    object.phloLimit = options.longs === String ? String(message.phloLimit) : message.phloLimit;\n                else\n                    object.phloLimit = options.longs === String ? $util.Long.prototype.toString.call(message.phloLimit) : options.longs === Number ? new $util.LongBits(message.phloLimit.low >>> 0, message.phloLimit.high >>> 0).toNumber() : message.phloLimit;\n            if (message.validAfterBlockNumber != null && message.hasOwnProperty(\"validAfterBlockNumber\"))\n                if (typeof message.validAfterBlockNumber === \"number\")\n                    object.validAfterBlockNumber = options.longs === String ? String(message.validAfterBlockNumber) : message.validAfterBlockNumber;\n                else\n                    object.validAfterBlockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.validAfterBlockNumber) : options.longs === Number ? new $util.LongBits(message.validAfterBlockNumber.low >>> 0, message.validAfterBlockNumber.high >>> 0).toNumber() : message.validAfterBlockNumber;\n            return object;\n        };\n\n        /**\n         * Converts this DeployDataProto to JSON.\n         * @function toJSON\n         * @memberof casper.DeployDataProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DeployDataProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DeployDataProto;\n    })();\n\n    casper.ProcessedDeployProto = (function() {\n\n        /**\n         * Properties of a ProcessedDeployProto.\n         * @memberof casper\n         * @interface IProcessedDeployProto\n         * @property {casper.IDeployDataProto|null} [deploy] ProcessedDeployProto deploy\n         * @property {IPCost|null} [cost] ProcessedDeployProto cost\n         * @property {Array.<casper.IEventProto>|null} [deployLog] ProcessedDeployProto deployLog\n         * @property {boolean|null} [errored] ProcessedDeployProto errored\n         * @property {string|null} [systemDeployError] ProcessedDeployProto systemDeployError\n         */\n\n        /**\n         * Constructs a new ProcessedDeployProto.\n         * @memberof casper\n         * @classdesc Represents a ProcessedDeployProto.\n         * @implements IProcessedDeployProto\n         * @constructor\n         * @param {casper.IProcessedDeployProto=} [properties] Properties to set\n         */\n        function ProcessedDeployProto(properties) {\n            this.deployLog = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ProcessedDeployProto deploy.\n         * @member {casper.IDeployDataProto|null|undefined} deploy\n         * @memberof casper.ProcessedDeployProto\n         * @instance\n         */\n        ProcessedDeployProto.prototype.deploy = null;\n\n        /**\n         * ProcessedDeployProto cost.\n         * @member {IPCost|null|undefined} cost\n         * @memberof casper.ProcessedDeployProto\n         * @instance\n         */\n        ProcessedDeployProto.prototype.cost = null;\n\n        /**\n         * ProcessedDeployProto deployLog.\n         * @member {Array.<casper.IEventProto>} deployLog\n         * @memberof casper.ProcessedDeployProto\n         * @instance\n         */\n        ProcessedDeployProto.prototype.deployLog = $util.emptyArray;\n\n        /**\n         * ProcessedDeployProto errored.\n         * @member {boolean} errored\n         * @memberof casper.ProcessedDeployProto\n         * @instance\n         */\n        ProcessedDeployProto.prototype.errored = false;\n\n        /**\n         * ProcessedDeployProto systemDeployError.\n         * @member {string} systemDeployError\n         * @memberof casper.ProcessedDeployProto\n         * @instance\n         */\n        ProcessedDeployProto.prototype.systemDeployError = \"\";\n\n        /**\n         * Creates a new ProcessedDeployProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ProcessedDeployProto\n         * @static\n         * @param {casper.IProcessedDeployProto=} [properties] Properties to set\n         * @returns {casper.ProcessedDeployProto} ProcessedDeployProto instance\n         */\n        ProcessedDeployProto.create = function create(properties) {\n            return new ProcessedDeployProto(properties);\n        };\n\n        /**\n         * Encodes the specified ProcessedDeployProto message. Does not implicitly {@link casper.ProcessedDeployProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ProcessedDeployProto\n         * @static\n         * @param {casper.IProcessedDeployProto} message ProcessedDeployProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProcessedDeployProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.deploy != null && message.hasOwnProperty(\"deploy\"))\n                $root.casper.DeployDataProto.encode(message.deploy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.cost != null && message.hasOwnProperty(\"cost\"))\n                $root.PCost.encode(message.cost, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.deployLog != null && message.deployLog.length)\n                for (var i = 0; i < message.deployLog.length; ++i)\n                    $root.casper.EventProto.encode(message.deployLog[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.errored != null && message.hasOwnProperty(\"errored\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.errored);\n            if (message.systemDeployError != null && message.hasOwnProperty(\"systemDeployError\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.systemDeployError);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ProcessedDeployProto message, length delimited. Does not implicitly {@link casper.ProcessedDeployProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ProcessedDeployProto\n         * @static\n         * @param {casper.IProcessedDeployProto} message ProcessedDeployProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProcessedDeployProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ProcessedDeployProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ProcessedDeployProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ProcessedDeployProto} ProcessedDeployProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProcessedDeployProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ProcessedDeployProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.deploy = $root.casper.DeployDataProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.cost = $root.PCost.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    if (!(message.deployLog && message.deployLog.length))\n                        message.deployLog = [];\n                    message.deployLog.push($root.casper.EventProto.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.errored = reader.bool();\n                    break;\n                case 6:\n                    message.systemDeployError = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ProcessedDeployProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ProcessedDeployProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ProcessedDeployProto} ProcessedDeployProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProcessedDeployProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ProcessedDeployProto message.\n         * @function verify\n         * @memberof casper.ProcessedDeployProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ProcessedDeployProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.deploy != null && message.hasOwnProperty(\"deploy\")) {\n                var error = $root.casper.DeployDataProto.verify(message.deploy);\n                if (error)\n                    return \"deploy.\" + error;\n            }\n            if (message.cost != null && message.hasOwnProperty(\"cost\")) {\n                var error = $root.PCost.verify(message.cost);\n                if (error)\n                    return \"cost.\" + error;\n            }\n            if (message.deployLog != null && message.hasOwnProperty(\"deployLog\")) {\n                if (!Array.isArray(message.deployLog))\n                    return \"deployLog: array expected\";\n                for (var i = 0; i < message.deployLog.length; ++i) {\n                    var error = $root.casper.EventProto.verify(message.deployLog[i]);\n                    if (error)\n                        return \"deployLog.\" + error;\n                }\n            }\n            if (message.errored != null && message.hasOwnProperty(\"errored\"))\n                if (typeof message.errored !== \"boolean\")\n                    return \"errored: boolean expected\";\n            if (message.systemDeployError != null && message.hasOwnProperty(\"systemDeployError\"))\n                if (!$util.isString(message.systemDeployError))\n                    return \"systemDeployError: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ProcessedDeployProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ProcessedDeployProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ProcessedDeployProto} ProcessedDeployProto\n         */\n        ProcessedDeployProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ProcessedDeployProto)\n                return object;\n            var message = new $root.casper.ProcessedDeployProto();\n            if (object.deploy != null) {\n                if (typeof object.deploy !== \"object\")\n                    throw TypeError(\".casper.ProcessedDeployProto.deploy: object expected\");\n                message.deploy = $root.casper.DeployDataProto.fromObject(object.deploy);\n            }\n            if (object.cost != null) {\n                if (typeof object.cost !== \"object\")\n                    throw TypeError(\".casper.ProcessedDeployProto.cost: object expected\");\n                message.cost = $root.PCost.fromObject(object.cost);\n            }\n            if (object.deployLog) {\n                if (!Array.isArray(object.deployLog))\n                    throw TypeError(\".casper.ProcessedDeployProto.deployLog: array expected\");\n                message.deployLog = [];\n                for (var i = 0; i < object.deployLog.length; ++i) {\n                    if (typeof object.deployLog[i] !== \"object\")\n                        throw TypeError(\".casper.ProcessedDeployProto.deployLog: object expected\");\n                    message.deployLog[i] = $root.casper.EventProto.fromObject(object.deployLog[i]);\n                }\n            }\n            if (object.errored != null)\n                message.errored = Boolean(object.errored);\n            if (object.systemDeployError != null)\n                message.systemDeployError = String(object.systemDeployError);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ProcessedDeployProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ProcessedDeployProto\n         * @static\n         * @param {casper.ProcessedDeployProto} message ProcessedDeployProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ProcessedDeployProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.deployLog = [];\n            if (options.defaults) {\n                object.deploy = null;\n                object.cost = null;\n                object.errored = false;\n                object.systemDeployError = \"\";\n            }\n            if (message.deploy != null && message.hasOwnProperty(\"deploy\"))\n                object.deploy = $root.casper.DeployDataProto.toObject(message.deploy, options);\n            if (message.cost != null && message.hasOwnProperty(\"cost\"))\n                object.cost = $root.PCost.toObject(message.cost, options);\n            if (message.deployLog && message.deployLog.length) {\n                object.deployLog = [];\n                for (var j = 0; j < message.deployLog.length; ++j)\n                    object.deployLog[j] = $root.casper.EventProto.toObject(message.deployLog[j], options);\n            }\n            if (message.errored != null && message.hasOwnProperty(\"errored\"))\n                object.errored = message.errored;\n            if (message.systemDeployError != null && message.hasOwnProperty(\"systemDeployError\"))\n                object.systemDeployError = message.systemDeployError;\n            return object;\n        };\n\n        /**\n         * Converts this ProcessedDeployProto to JSON.\n         * @function toJSON\n         * @memberof casper.ProcessedDeployProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ProcessedDeployProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ProcessedDeployProto;\n    })();\n\n    casper.SlashSystemDeployDataProto = (function() {\n\n        /**\n         * Properties of a SlashSystemDeployDataProto.\n         * @memberof casper\n         * @interface ISlashSystemDeployDataProto\n         * @property {Uint8Array|null} [invalidBlockHash] SlashSystemDeployDataProto invalidBlockHash\n         * @property {Uint8Array|null} [issuerPublicKey] SlashSystemDeployDataProto issuerPublicKey\n         */\n\n        /**\n         * Constructs a new SlashSystemDeployDataProto.\n         * @memberof casper\n         * @classdesc Represents a SlashSystemDeployDataProto.\n         * @implements ISlashSystemDeployDataProto\n         * @constructor\n         * @param {casper.ISlashSystemDeployDataProto=} [properties] Properties to set\n         */\n        function SlashSystemDeployDataProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SlashSystemDeployDataProto invalidBlockHash.\n         * @member {Uint8Array} invalidBlockHash\n         * @memberof casper.SlashSystemDeployDataProto\n         * @instance\n         */\n        SlashSystemDeployDataProto.prototype.invalidBlockHash = $util.newBuffer([]);\n\n        /**\n         * SlashSystemDeployDataProto issuerPublicKey.\n         * @member {Uint8Array} issuerPublicKey\n         * @memberof casper.SlashSystemDeployDataProto\n         * @instance\n         */\n        SlashSystemDeployDataProto.prototype.issuerPublicKey = $util.newBuffer([]);\n\n        /**\n         * Creates a new SlashSystemDeployDataProto instance using the specified properties.\n         * @function create\n         * @memberof casper.SlashSystemDeployDataProto\n         * @static\n         * @param {casper.ISlashSystemDeployDataProto=} [properties] Properties to set\n         * @returns {casper.SlashSystemDeployDataProto} SlashSystemDeployDataProto instance\n         */\n        SlashSystemDeployDataProto.create = function create(properties) {\n            return new SlashSystemDeployDataProto(properties);\n        };\n\n        /**\n         * Encodes the specified SlashSystemDeployDataProto message. Does not implicitly {@link casper.SlashSystemDeployDataProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.SlashSystemDeployDataProto\n         * @static\n         * @param {casper.ISlashSystemDeployDataProto} message SlashSystemDeployDataProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SlashSystemDeployDataProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.invalidBlockHash != null && message.hasOwnProperty(\"invalidBlockHash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.invalidBlockHash);\n            if (message.issuerPublicKey != null && message.hasOwnProperty(\"issuerPublicKey\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.issuerPublicKey);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SlashSystemDeployDataProto message, length delimited. Does not implicitly {@link casper.SlashSystemDeployDataProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.SlashSystemDeployDataProto\n         * @static\n         * @param {casper.ISlashSystemDeployDataProto} message SlashSystemDeployDataProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SlashSystemDeployDataProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SlashSystemDeployDataProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.SlashSystemDeployDataProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.SlashSystemDeployDataProto} SlashSystemDeployDataProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SlashSystemDeployDataProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.SlashSystemDeployDataProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.invalidBlockHash = reader.bytes();\n                    break;\n                case 2:\n                    message.issuerPublicKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SlashSystemDeployDataProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.SlashSystemDeployDataProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.SlashSystemDeployDataProto} SlashSystemDeployDataProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SlashSystemDeployDataProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SlashSystemDeployDataProto message.\n         * @function verify\n         * @memberof casper.SlashSystemDeployDataProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SlashSystemDeployDataProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.invalidBlockHash != null && message.hasOwnProperty(\"invalidBlockHash\"))\n                if (!(message.invalidBlockHash && typeof message.invalidBlockHash.length === \"number\" || $util.isString(message.invalidBlockHash)))\n                    return \"invalidBlockHash: buffer expected\";\n            if (message.issuerPublicKey != null && message.hasOwnProperty(\"issuerPublicKey\"))\n                if (!(message.issuerPublicKey && typeof message.issuerPublicKey.length === \"number\" || $util.isString(message.issuerPublicKey)))\n                    return \"issuerPublicKey: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a SlashSystemDeployDataProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.SlashSystemDeployDataProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.SlashSystemDeployDataProto} SlashSystemDeployDataProto\n         */\n        SlashSystemDeployDataProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.SlashSystemDeployDataProto)\n                return object;\n            var message = new $root.casper.SlashSystemDeployDataProto();\n            if (object.invalidBlockHash != null)\n                if (typeof object.invalidBlockHash === \"string\")\n                    $util.base64.decode(object.invalidBlockHash, message.invalidBlockHash = $util.newBuffer($util.base64.length(object.invalidBlockHash)), 0);\n                else if (object.invalidBlockHash.length)\n                    message.invalidBlockHash = object.invalidBlockHash;\n            if (object.issuerPublicKey != null)\n                if (typeof object.issuerPublicKey === \"string\")\n                    $util.base64.decode(object.issuerPublicKey, message.issuerPublicKey = $util.newBuffer($util.base64.length(object.issuerPublicKey)), 0);\n                else if (object.issuerPublicKey.length)\n                    message.issuerPublicKey = object.issuerPublicKey;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SlashSystemDeployDataProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.SlashSystemDeployDataProto\n         * @static\n         * @param {casper.SlashSystemDeployDataProto} message SlashSystemDeployDataProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SlashSystemDeployDataProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.invalidBlockHash = \"\";\n                else {\n                    object.invalidBlockHash = [];\n                    if (options.bytes !== Array)\n                        object.invalidBlockHash = $util.newBuffer(object.invalidBlockHash);\n                }\n                if (options.bytes === String)\n                    object.issuerPublicKey = \"\";\n                else {\n                    object.issuerPublicKey = [];\n                    if (options.bytes !== Array)\n                        object.issuerPublicKey = $util.newBuffer(object.issuerPublicKey);\n                }\n            }\n            if (message.invalidBlockHash != null && message.hasOwnProperty(\"invalidBlockHash\"))\n                object.invalidBlockHash = options.bytes === String ? $util.base64.encode(message.invalidBlockHash, 0, message.invalidBlockHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.invalidBlockHash) : message.invalidBlockHash;\n            if (message.issuerPublicKey != null && message.hasOwnProperty(\"issuerPublicKey\"))\n                object.issuerPublicKey = options.bytes === String ? $util.base64.encode(message.issuerPublicKey, 0, message.issuerPublicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.issuerPublicKey) : message.issuerPublicKey;\n            return object;\n        };\n\n        /**\n         * Converts this SlashSystemDeployDataProto to JSON.\n         * @function toJSON\n         * @memberof casper.SlashSystemDeployDataProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SlashSystemDeployDataProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SlashSystemDeployDataProto;\n    })();\n\n    casper.CloseBlockSystemDeployDataProto = (function() {\n\n        /**\n         * Properties of a CloseBlockSystemDeployDataProto.\n         * @memberof casper\n         * @interface ICloseBlockSystemDeployDataProto\n         */\n\n        /**\n         * Constructs a new CloseBlockSystemDeployDataProto.\n         * @memberof casper\n         * @classdesc Represents a CloseBlockSystemDeployDataProto.\n         * @implements ICloseBlockSystemDeployDataProto\n         * @constructor\n         * @param {casper.ICloseBlockSystemDeployDataProto=} [properties] Properties to set\n         */\n        function CloseBlockSystemDeployDataProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new CloseBlockSystemDeployDataProto instance using the specified properties.\n         * @function create\n         * @memberof casper.CloseBlockSystemDeployDataProto\n         * @static\n         * @param {casper.ICloseBlockSystemDeployDataProto=} [properties] Properties to set\n         * @returns {casper.CloseBlockSystemDeployDataProto} CloseBlockSystemDeployDataProto instance\n         */\n        CloseBlockSystemDeployDataProto.create = function create(properties) {\n            return new CloseBlockSystemDeployDataProto(properties);\n        };\n\n        /**\n         * Encodes the specified CloseBlockSystemDeployDataProto message. Does not implicitly {@link casper.CloseBlockSystemDeployDataProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.CloseBlockSystemDeployDataProto\n         * @static\n         * @param {casper.ICloseBlockSystemDeployDataProto} message CloseBlockSystemDeployDataProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CloseBlockSystemDeployDataProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CloseBlockSystemDeployDataProto message, length delimited. Does not implicitly {@link casper.CloseBlockSystemDeployDataProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.CloseBlockSystemDeployDataProto\n         * @static\n         * @param {casper.ICloseBlockSystemDeployDataProto} message CloseBlockSystemDeployDataProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CloseBlockSystemDeployDataProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CloseBlockSystemDeployDataProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.CloseBlockSystemDeployDataProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.CloseBlockSystemDeployDataProto} CloseBlockSystemDeployDataProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CloseBlockSystemDeployDataProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.CloseBlockSystemDeployDataProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CloseBlockSystemDeployDataProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.CloseBlockSystemDeployDataProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.CloseBlockSystemDeployDataProto} CloseBlockSystemDeployDataProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CloseBlockSystemDeployDataProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CloseBlockSystemDeployDataProto message.\n         * @function verify\n         * @memberof casper.CloseBlockSystemDeployDataProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CloseBlockSystemDeployDataProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CloseBlockSystemDeployDataProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.CloseBlockSystemDeployDataProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.CloseBlockSystemDeployDataProto} CloseBlockSystemDeployDataProto\n         */\n        CloseBlockSystemDeployDataProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.CloseBlockSystemDeployDataProto)\n                return object;\n            return new $root.casper.CloseBlockSystemDeployDataProto();\n        };\n\n        /**\n         * Creates a plain object from a CloseBlockSystemDeployDataProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.CloseBlockSystemDeployDataProto\n         * @static\n         * @param {casper.CloseBlockSystemDeployDataProto} message CloseBlockSystemDeployDataProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CloseBlockSystemDeployDataProto.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this CloseBlockSystemDeployDataProto to JSON.\n         * @function toJSON\n         * @memberof casper.CloseBlockSystemDeployDataProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CloseBlockSystemDeployDataProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CloseBlockSystemDeployDataProto;\n    })();\n\n    casper.SystemDeployDataProto = (function() {\n\n        /**\n         * Properties of a SystemDeployDataProto.\n         * @memberof casper\n         * @interface ISystemDeployDataProto\n         * @property {casper.ISlashSystemDeployDataProto|null} [slashSystemDeploy] SystemDeployDataProto slashSystemDeploy\n         * @property {casper.ICloseBlockSystemDeployDataProto|null} [closeBlockSystemDeploy] SystemDeployDataProto closeBlockSystemDeploy\n         */\n\n        /**\n         * Constructs a new SystemDeployDataProto.\n         * @memberof casper\n         * @classdesc Represents a SystemDeployDataProto.\n         * @implements ISystemDeployDataProto\n         * @constructor\n         * @param {casper.ISystemDeployDataProto=} [properties] Properties to set\n         */\n        function SystemDeployDataProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SystemDeployDataProto slashSystemDeploy.\n         * @member {casper.ISlashSystemDeployDataProto|null|undefined} slashSystemDeploy\n         * @memberof casper.SystemDeployDataProto\n         * @instance\n         */\n        SystemDeployDataProto.prototype.slashSystemDeploy = null;\n\n        /**\n         * SystemDeployDataProto closeBlockSystemDeploy.\n         * @member {casper.ICloseBlockSystemDeployDataProto|null|undefined} closeBlockSystemDeploy\n         * @memberof casper.SystemDeployDataProto\n         * @instance\n         */\n        SystemDeployDataProto.prototype.closeBlockSystemDeploy = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * SystemDeployDataProto systemDeploy.\n         * @member {\"slashSystemDeploy\"|\"closeBlockSystemDeploy\"|undefined} systemDeploy\n         * @memberof casper.SystemDeployDataProto\n         * @instance\n         */\n        Object.defineProperty(SystemDeployDataProto.prototype, \"systemDeploy\", {\n            get: $util.oneOfGetter($oneOfFields = [\"slashSystemDeploy\", \"closeBlockSystemDeploy\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new SystemDeployDataProto instance using the specified properties.\n         * @function create\n         * @memberof casper.SystemDeployDataProto\n         * @static\n         * @param {casper.ISystemDeployDataProto=} [properties] Properties to set\n         * @returns {casper.SystemDeployDataProto} SystemDeployDataProto instance\n         */\n        SystemDeployDataProto.create = function create(properties) {\n            return new SystemDeployDataProto(properties);\n        };\n\n        /**\n         * Encodes the specified SystemDeployDataProto message. Does not implicitly {@link casper.SystemDeployDataProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.SystemDeployDataProto\n         * @static\n         * @param {casper.ISystemDeployDataProto} message SystemDeployDataProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SystemDeployDataProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.slashSystemDeploy != null && message.hasOwnProperty(\"slashSystemDeploy\"))\n                $root.casper.SlashSystemDeployDataProto.encode(message.slashSystemDeploy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.closeBlockSystemDeploy != null && message.hasOwnProperty(\"closeBlockSystemDeploy\"))\n                $root.casper.CloseBlockSystemDeployDataProto.encode(message.closeBlockSystemDeploy, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SystemDeployDataProto message, length delimited. Does not implicitly {@link casper.SystemDeployDataProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.SystemDeployDataProto\n         * @static\n         * @param {casper.ISystemDeployDataProto} message SystemDeployDataProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SystemDeployDataProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SystemDeployDataProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.SystemDeployDataProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.SystemDeployDataProto} SystemDeployDataProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SystemDeployDataProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.SystemDeployDataProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.slashSystemDeploy = $root.casper.SlashSystemDeployDataProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.closeBlockSystemDeploy = $root.casper.CloseBlockSystemDeployDataProto.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SystemDeployDataProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.SystemDeployDataProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.SystemDeployDataProto} SystemDeployDataProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SystemDeployDataProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SystemDeployDataProto message.\n         * @function verify\n         * @memberof casper.SystemDeployDataProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SystemDeployDataProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.slashSystemDeploy != null && message.hasOwnProperty(\"slashSystemDeploy\")) {\n                properties.systemDeploy = 1;\n                {\n                    var error = $root.casper.SlashSystemDeployDataProto.verify(message.slashSystemDeploy);\n                    if (error)\n                        return \"slashSystemDeploy.\" + error;\n                }\n            }\n            if (message.closeBlockSystemDeploy != null && message.hasOwnProperty(\"closeBlockSystemDeploy\")) {\n                if (properties.systemDeploy === 1)\n                    return \"systemDeploy: multiple values\";\n                properties.systemDeploy = 1;\n                {\n                    var error = $root.casper.CloseBlockSystemDeployDataProto.verify(message.closeBlockSystemDeploy);\n                    if (error)\n                        return \"closeBlockSystemDeploy.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SystemDeployDataProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.SystemDeployDataProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.SystemDeployDataProto} SystemDeployDataProto\n         */\n        SystemDeployDataProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.SystemDeployDataProto)\n                return object;\n            var message = new $root.casper.SystemDeployDataProto();\n            if (object.slashSystemDeploy != null) {\n                if (typeof object.slashSystemDeploy !== \"object\")\n                    throw TypeError(\".casper.SystemDeployDataProto.slashSystemDeploy: object expected\");\n                message.slashSystemDeploy = $root.casper.SlashSystemDeployDataProto.fromObject(object.slashSystemDeploy);\n            }\n            if (object.closeBlockSystemDeploy != null) {\n                if (typeof object.closeBlockSystemDeploy !== \"object\")\n                    throw TypeError(\".casper.SystemDeployDataProto.closeBlockSystemDeploy: object expected\");\n                message.closeBlockSystemDeploy = $root.casper.CloseBlockSystemDeployDataProto.fromObject(object.closeBlockSystemDeploy);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SystemDeployDataProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.SystemDeployDataProto\n         * @static\n         * @param {casper.SystemDeployDataProto} message SystemDeployDataProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SystemDeployDataProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.slashSystemDeploy != null && message.hasOwnProperty(\"slashSystemDeploy\")) {\n                object.slashSystemDeploy = $root.casper.SlashSystemDeployDataProto.toObject(message.slashSystemDeploy, options);\n                if (options.oneofs)\n                    object.systemDeploy = \"slashSystemDeploy\";\n            }\n            if (message.closeBlockSystemDeploy != null && message.hasOwnProperty(\"closeBlockSystemDeploy\")) {\n                object.closeBlockSystemDeploy = $root.casper.CloseBlockSystemDeployDataProto.toObject(message.closeBlockSystemDeploy, options);\n                if (options.oneofs)\n                    object.systemDeploy = \"closeBlockSystemDeploy\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SystemDeployDataProto to JSON.\n         * @function toJSON\n         * @memberof casper.SystemDeployDataProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SystemDeployDataProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SystemDeployDataProto;\n    })();\n\n    casper.ProcessedSystemDeployProto = (function() {\n\n        /**\n         * Properties of a ProcessedSystemDeployProto.\n         * @memberof casper\n         * @interface IProcessedSystemDeployProto\n         * @property {casper.ISystemDeployDataProto|null} [systemDeploy] ProcessedSystemDeployProto systemDeploy\n         * @property {Array.<casper.IEventProto>|null} [deployLog] ProcessedSystemDeployProto deployLog\n         * @property {string|null} [errorMsg] ProcessedSystemDeployProto errorMsg\n         */\n\n        /**\n         * Constructs a new ProcessedSystemDeployProto.\n         * @memberof casper\n         * @classdesc Represents a ProcessedSystemDeployProto.\n         * @implements IProcessedSystemDeployProto\n         * @constructor\n         * @param {casper.IProcessedSystemDeployProto=} [properties] Properties to set\n         */\n        function ProcessedSystemDeployProto(properties) {\n            this.deployLog = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ProcessedSystemDeployProto systemDeploy.\n         * @member {casper.ISystemDeployDataProto|null|undefined} systemDeploy\n         * @memberof casper.ProcessedSystemDeployProto\n         * @instance\n         */\n        ProcessedSystemDeployProto.prototype.systemDeploy = null;\n\n        /**\n         * ProcessedSystemDeployProto deployLog.\n         * @member {Array.<casper.IEventProto>} deployLog\n         * @memberof casper.ProcessedSystemDeployProto\n         * @instance\n         */\n        ProcessedSystemDeployProto.prototype.deployLog = $util.emptyArray;\n\n        /**\n         * ProcessedSystemDeployProto errorMsg.\n         * @member {string} errorMsg\n         * @memberof casper.ProcessedSystemDeployProto\n         * @instance\n         */\n        ProcessedSystemDeployProto.prototype.errorMsg = \"\";\n\n        /**\n         * Creates a new ProcessedSystemDeployProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ProcessedSystemDeployProto\n         * @static\n         * @param {casper.IProcessedSystemDeployProto=} [properties] Properties to set\n         * @returns {casper.ProcessedSystemDeployProto} ProcessedSystemDeployProto instance\n         */\n        ProcessedSystemDeployProto.create = function create(properties) {\n            return new ProcessedSystemDeployProto(properties);\n        };\n\n        /**\n         * Encodes the specified ProcessedSystemDeployProto message. Does not implicitly {@link casper.ProcessedSystemDeployProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ProcessedSystemDeployProto\n         * @static\n         * @param {casper.IProcessedSystemDeployProto} message ProcessedSystemDeployProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProcessedSystemDeployProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.systemDeploy != null && message.hasOwnProperty(\"systemDeploy\"))\n                $root.casper.SystemDeployDataProto.encode(message.systemDeploy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.deployLog != null && message.deployLog.length)\n                for (var i = 0; i < message.deployLog.length; ++i)\n                    $root.casper.EventProto.encode(message.deployLog[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.errorMsg != null && message.hasOwnProperty(\"errorMsg\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.errorMsg);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ProcessedSystemDeployProto message, length delimited. Does not implicitly {@link casper.ProcessedSystemDeployProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ProcessedSystemDeployProto\n         * @static\n         * @param {casper.IProcessedSystemDeployProto} message ProcessedSystemDeployProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProcessedSystemDeployProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ProcessedSystemDeployProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ProcessedSystemDeployProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ProcessedSystemDeployProto} ProcessedSystemDeployProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProcessedSystemDeployProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ProcessedSystemDeployProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.systemDeploy = $root.casper.SystemDeployDataProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    if (!(message.deployLog && message.deployLog.length))\n                        message.deployLog = [];\n                    message.deployLog.push($root.casper.EventProto.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.errorMsg = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ProcessedSystemDeployProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ProcessedSystemDeployProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ProcessedSystemDeployProto} ProcessedSystemDeployProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProcessedSystemDeployProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ProcessedSystemDeployProto message.\n         * @function verify\n         * @memberof casper.ProcessedSystemDeployProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ProcessedSystemDeployProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.systemDeploy != null && message.hasOwnProperty(\"systemDeploy\")) {\n                var error = $root.casper.SystemDeployDataProto.verify(message.systemDeploy);\n                if (error)\n                    return \"systemDeploy.\" + error;\n            }\n            if (message.deployLog != null && message.hasOwnProperty(\"deployLog\")) {\n                if (!Array.isArray(message.deployLog))\n                    return \"deployLog: array expected\";\n                for (var i = 0; i < message.deployLog.length; ++i) {\n                    var error = $root.casper.EventProto.verify(message.deployLog[i]);\n                    if (error)\n                        return \"deployLog.\" + error;\n                }\n            }\n            if (message.errorMsg != null && message.hasOwnProperty(\"errorMsg\"))\n                if (!$util.isString(message.errorMsg))\n                    return \"errorMsg: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ProcessedSystemDeployProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ProcessedSystemDeployProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ProcessedSystemDeployProto} ProcessedSystemDeployProto\n         */\n        ProcessedSystemDeployProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ProcessedSystemDeployProto)\n                return object;\n            var message = new $root.casper.ProcessedSystemDeployProto();\n            if (object.systemDeploy != null) {\n                if (typeof object.systemDeploy !== \"object\")\n                    throw TypeError(\".casper.ProcessedSystemDeployProto.systemDeploy: object expected\");\n                message.systemDeploy = $root.casper.SystemDeployDataProto.fromObject(object.systemDeploy);\n            }\n            if (object.deployLog) {\n                if (!Array.isArray(object.deployLog))\n                    throw TypeError(\".casper.ProcessedSystemDeployProto.deployLog: array expected\");\n                message.deployLog = [];\n                for (var i = 0; i < object.deployLog.length; ++i) {\n                    if (typeof object.deployLog[i] !== \"object\")\n                        throw TypeError(\".casper.ProcessedSystemDeployProto.deployLog: object expected\");\n                    message.deployLog[i] = $root.casper.EventProto.fromObject(object.deployLog[i]);\n                }\n            }\n            if (object.errorMsg != null)\n                message.errorMsg = String(object.errorMsg);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ProcessedSystemDeployProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ProcessedSystemDeployProto\n         * @static\n         * @param {casper.ProcessedSystemDeployProto} message ProcessedSystemDeployProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ProcessedSystemDeployProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.deployLog = [];\n            if (options.defaults) {\n                object.systemDeploy = null;\n                object.errorMsg = \"\";\n            }\n            if (message.systemDeploy != null && message.hasOwnProperty(\"systemDeploy\"))\n                object.systemDeploy = $root.casper.SystemDeployDataProto.toObject(message.systemDeploy, options);\n            if (message.deployLog && message.deployLog.length) {\n                object.deployLog = [];\n                for (var j = 0; j < message.deployLog.length; ++j)\n                    object.deployLog[j] = $root.casper.EventProto.toObject(message.deployLog[j], options);\n            }\n            if (message.errorMsg != null && message.hasOwnProperty(\"errorMsg\"))\n                object.errorMsg = message.errorMsg;\n            return object;\n        };\n\n        /**\n         * Converts this ProcessedSystemDeployProto to JSON.\n         * @function toJSON\n         * @memberof casper.ProcessedSystemDeployProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ProcessedSystemDeployProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ProcessedSystemDeployProto;\n    })();\n\n    casper.BodyProto = (function() {\n\n        /**\n         * Properties of a BodyProto.\n         * @memberof casper\n         * @interface IBodyProto\n         * @property {casper.IRChainStateProto|null} [state] BodyProto state\n         * @property {Array.<casper.IProcessedDeployProto>|null} [deploys] BodyProto deploys\n         * @property {Array.<casper.IProcessedSystemDeployProto>|null} [systemDeploys] BodyProto systemDeploys\n         * @property {Uint8Array|null} [extraBytes] BodyProto extraBytes\n         */\n\n        /**\n         * Constructs a new BodyProto.\n         * @memberof casper\n         * @classdesc Represents a BodyProto.\n         * @implements IBodyProto\n         * @constructor\n         * @param {casper.IBodyProto=} [properties] Properties to set\n         */\n        function BodyProto(properties) {\n            this.deploys = [];\n            this.systemDeploys = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BodyProto state.\n         * @member {casper.IRChainStateProto|null|undefined} state\n         * @memberof casper.BodyProto\n         * @instance\n         */\n        BodyProto.prototype.state = null;\n\n        /**\n         * BodyProto deploys.\n         * @member {Array.<casper.IProcessedDeployProto>} deploys\n         * @memberof casper.BodyProto\n         * @instance\n         */\n        BodyProto.prototype.deploys = $util.emptyArray;\n\n        /**\n         * BodyProto systemDeploys.\n         * @member {Array.<casper.IProcessedSystemDeployProto>} systemDeploys\n         * @memberof casper.BodyProto\n         * @instance\n         */\n        BodyProto.prototype.systemDeploys = $util.emptyArray;\n\n        /**\n         * BodyProto extraBytes.\n         * @member {Uint8Array} extraBytes\n         * @memberof casper.BodyProto\n         * @instance\n         */\n        BodyProto.prototype.extraBytes = $util.newBuffer([]);\n\n        /**\n         * Creates a new BodyProto instance using the specified properties.\n         * @function create\n         * @memberof casper.BodyProto\n         * @static\n         * @param {casper.IBodyProto=} [properties] Properties to set\n         * @returns {casper.BodyProto} BodyProto instance\n         */\n        BodyProto.create = function create(properties) {\n            return new BodyProto(properties);\n        };\n\n        /**\n         * Encodes the specified BodyProto message. Does not implicitly {@link casper.BodyProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BodyProto\n         * @static\n         * @param {casper.IBodyProto} message BodyProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BodyProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.state != null && message.hasOwnProperty(\"state\"))\n                $root.casper.RChainStateProto.encode(message.state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.deploys != null && message.deploys.length)\n                for (var i = 0; i < message.deploys.length; ++i)\n                    $root.casper.ProcessedDeployProto.encode(message.deploys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.systemDeploys != null && message.systemDeploys.length)\n                for (var i = 0; i < message.systemDeploys.length; ++i)\n                    $root.casper.ProcessedSystemDeployProto.encode(message.systemDeploys[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.extraBytes);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BodyProto message, length delimited. Does not implicitly {@link casper.BodyProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BodyProto\n         * @static\n         * @param {casper.IBodyProto} message BodyProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BodyProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BodyProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BodyProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BodyProto} BodyProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BodyProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BodyProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.state = $root.casper.RChainStateProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    if (!(message.deploys && message.deploys.length))\n                        message.deploys = [];\n                    message.deploys.push($root.casper.ProcessedDeployProto.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    if (!(message.systemDeploys && message.systemDeploys.length))\n                        message.systemDeploys = [];\n                    message.systemDeploys.push($root.casper.ProcessedSystemDeployProto.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.extraBytes = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BodyProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BodyProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BodyProto} BodyProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BodyProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BodyProto message.\n         * @function verify\n         * @memberof casper.BodyProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BodyProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.state != null && message.hasOwnProperty(\"state\")) {\n                var error = $root.casper.RChainStateProto.verify(message.state);\n                if (error)\n                    return \"state.\" + error;\n            }\n            if (message.deploys != null && message.hasOwnProperty(\"deploys\")) {\n                if (!Array.isArray(message.deploys))\n                    return \"deploys: array expected\";\n                for (var i = 0; i < message.deploys.length; ++i) {\n                    var error = $root.casper.ProcessedDeployProto.verify(message.deploys[i]);\n                    if (error)\n                        return \"deploys.\" + error;\n                }\n            }\n            if (message.systemDeploys != null && message.hasOwnProperty(\"systemDeploys\")) {\n                if (!Array.isArray(message.systemDeploys))\n                    return \"systemDeploys: array expected\";\n                for (var i = 0; i < message.systemDeploys.length; ++i) {\n                    var error = $root.casper.ProcessedSystemDeployProto.verify(message.systemDeploys[i]);\n                    if (error)\n                        return \"systemDeploys.\" + error;\n                }\n            }\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                if (!(message.extraBytes && typeof message.extraBytes.length === \"number\" || $util.isString(message.extraBytes)))\n                    return \"extraBytes: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BodyProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BodyProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BodyProto} BodyProto\n         */\n        BodyProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BodyProto)\n                return object;\n            var message = new $root.casper.BodyProto();\n            if (object.state != null) {\n                if (typeof object.state !== \"object\")\n                    throw TypeError(\".casper.BodyProto.state: object expected\");\n                message.state = $root.casper.RChainStateProto.fromObject(object.state);\n            }\n            if (object.deploys) {\n                if (!Array.isArray(object.deploys))\n                    throw TypeError(\".casper.BodyProto.deploys: array expected\");\n                message.deploys = [];\n                for (var i = 0; i < object.deploys.length; ++i) {\n                    if (typeof object.deploys[i] !== \"object\")\n                        throw TypeError(\".casper.BodyProto.deploys: object expected\");\n                    message.deploys[i] = $root.casper.ProcessedDeployProto.fromObject(object.deploys[i]);\n                }\n            }\n            if (object.systemDeploys) {\n                if (!Array.isArray(object.systemDeploys))\n                    throw TypeError(\".casper.BodyProto.systemDeploys: array expected\");\n                message.systemDeploys = [];\n                for (var i = 0; i < object.systemDeploys.length; ++i) {\n                    if (typeof object.systemDeploys[i] !== \"object\")\n                        throw TypeError(\".casper.BodyProto.systemDeploys: object expected\");\n                    message.systemDeploys[i] = $root.casper.ProcessedSystemDeployProto.fromObject(object.systemDeploys[i]);\n                }\n            }\n            if (object.extraBytes != null)\n                if (typeof object.extraBytes === \"string\")\n                    $util.base64.decode(object.extraBytes, message.extraBytes = $util.newBuffer($util.base64.length(object.extraBytes)), 0);\n                else if (object.extraBytes.length)\n                    message.extraBytes = object.extraBytes;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BodyProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BodyProto\n         * @static\n         * @param {casper.BodyProto} message BodyProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BodyProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.deploys = [];\n                object.systemDeploys = [];\n            }\n            if (options.defaults) {\n                object.state = null;\n                if (options.bytes === String)\n                    object.extraBytes = \"\";\n                else {\n                    object.extraBytes = [];\n                    if (options.bytes !== Array)\n                        object.extraBytes = $util.newBuffer(object.extraBytes);\n                }\n            }\n            if (message.state != null && message.hasOwnProperty(\"state\"))\n                object.state = $root.casper.RChainStateProto.toObject(message.state, options);\n            if (message.deploys && message.deploys.length) {\n                object.deploys = [];\n                for (var j = 0; j < message.deploys.length; ++j)\n                    object.deploys[j] = $root.casper.ProcessedDeployProto.toObject(message.deploys[j], options);\n            }\n            if (message.systemDeploys && message.systemDeploys.length) {\n                object.systemDeploys = [];\n                for (var j = 0; j < message.systemDeploys.length; ++j)\n                    object.systemDeploys[j] = $root.casper.ProcessedSystemDeployProto.toObject(message.systemDeploys[j], options);\n            }\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                object.extraBytes = options.bytes === String ? $util.base64.encode(message.extraBytes, 0, message.extraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.extraBytes) : message.extraBytes;\n            return object;\n        };\n\n        /**\n         * Converts this BodyProto to JSON.\n         * @function toJSON\n         * @memberof casper.BodyProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BodyProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BodyProto;\n    })();\n\n    casper.JustificationProto = (function() {\n\n        /**\n         * Properties of a JustificationProto.\n         * @memberof casper\n         * @interface IJustificationProto\n         * @property {Uint8Array|null} [validator] JustificationProto validator\n         * @property {Uint8Array|null} [latestBlockHash] JustificationProto latestBlockHash\n         */\n\n        /**\n         * Constructs a new JustificationProto.\n         * @memberof casper\n         * @classdesc Represents a JustificationProto.\n         * @implements IJustificationProto\n         * @constructor\n         * @param {casper.IJustificationProto=} [properties] Properties to set\n         */\n        function JustificationProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * JustificationProto validator.\n         * @member {Uint8Array} validator\n         * @memberof casper.JustificationProto\n         * @instance\n         */\n        JustificationProto.prototype.validator = $util.newBuffer([]);\n\n        /**\n         * JustificationProto latestBlockHash.\n         * @member {Uint8Array} latestBlockHash\n         * @memberof casper.JustificationProto\n         * @instance\n         */\n        JustificationProto.prototype.latestBlockHash = $util.newBuffer([]);\n\n        /**\n         * Creates a new JustificationProto instance using the specified properties.\n         * @function create\n         * @memberof casper.JustificationProto\n         * @static\n         * @param {casper.IJustificationProto=} [properties] Properties to set\n         * @returns {casper.JustificationProto} JustificationProto instance\n         */\n        JustificationProto.create = function create(properties) {\n            return new JustificationProto(properties);\n        };\n\n        /**\n         * Encodes the specified JustificationProto message. Does not implicitly {@link casper.JustificationProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.JustificationProto\n         * @static\n         * @param {casper.IJustificationProto} message JustificationProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        JustificationProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.validator);\n            if (message.latestBlockHash != null && message.hasOwnProperty(\"latestBlockHash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.latestBlockHash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified JustificationProto message, length delimited. Does not implicitly {@link casper.JustificationProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.JustificationProto\n         * @static\n         * @param {casper.IJustificationProto} message JustificationProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        JustificationProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a JustificationProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.JustificationProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.JustificationProto} JustificationProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        JustificationProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.JustificationProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.validator = reader.bytes();\n                    break;\n                case 2:\n                    message.latestBlockHash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a JustificationProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.JustificationProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.JustificationProto} JustificationProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        JustificationProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a JustificationProto message.\n         * @function verify\n         * @memberof casper.JustificationProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        JustificationProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                if (!(message.validator && typeof message.validator.length === \"number\" || $util.isString(message.validator)))\n                    return \"validator: buffer expected\";\n            if (message.latestBlockHash != null && message.hasOwnProperty(\"latestBlockHash\"))\n                if (!(message.latestBlockHash && typeof message.latestBlockHash.length === \"number\" || $util.isString(message.latestBlockHash)))\n                    return \"latestBlockHash: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a JustificationProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.JustificationProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.JustificationProto} JustificationProto\n         */\n        JustificationProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.JustificationProto)\n                return object;\n            var message = new $root.casper.JustificationProto();\n            if (object.validator != null)\n                if (typeof object.validator === \"string\")\n                    $util.base64.decode(object.validator, message.validator = $util.newBuffer($util.base64.length(object.validator)), 0);\n                else if (object.validator.length)\n                    message.validator = object.validator;\n            if (object.latestBlockHash != null)\n                if (typeof object.latestBlockHash === \"string\")\n                    $util.base64.decode(object.latestBlockHash, message.latestBlockHash = $util.newBuffer($util.base64.length(object.latestBlockHash)), 0);\n                else if (object.latestBlockHash.length)\n                    message.latestBlockHash = object.latestBlockHash;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a JustificationProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.JustificationProto\n         * @static\n         * @param {casper.JustificationProto} message JustificationProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        JustificationProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.validator = \"\";\n                else {\n                    object.validator = [];\n                    if (options.bytes !== Array)\n                        object.validator = $util.newBuffer(object.validator);\n                }\n                if (options.bytes === String)\n                    object.latestBlockHash = \"\";\n                else {\n                    object.latestBlockHash = [];\n                    if (options.bytes !== Array)\n                        object.latestBlockHash = $util.newBuffer(object.latestBlockHash);\n                }\n            }\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                object.validator = options.bytes === String ? $util.base64.encode(message.validator, 0, message.validator.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator) : message.validator;\n            if (message.latestBlockHash != null && message.hasOwnProperty(\"latestBlockHash\"))\n                object.latestBlockHash = options.bytes === String ? $util.base64.encode(message.latestBlockHash, 0, message.latestBlockHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.latestBlockHash) : message.latestBlockHash;\n            return object;\n        };\n\n        /**\n         * Converts this JustificationProto to JSON.\n         * @function toJSON\n         * @memberof casper.JustificationProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        JustificationProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return JustificationProto;\n    })();\n\n    casper.RChainStateProto = (function() {\n\n        /**\n         * Properties of a RChainStateProto.\n         * @memberof casper\n         * @interface IRChainStateProto\n         * @property {Uint8Array|null} [preStateHash] RChainStateProto preStateHash\n         * @property {Uint8Array|null} [postStateHash] RChainStateProto postStateHash\n         * @property {Array.<casper.IBondProto>|null} [bonds] RChainStateProto bonds\n         * @property {number|Long|null} [blockNumber] RChainStateProto blockNumber\n         */\n\n        /**\n         * Constructs a new RChainStateProto.\n         * @memberof casper\n         * @classdesc Represents a RChainStateProto.\n         * @implements IRChainStateProto\n         * @constructor\n         * @param {casper.IRChainStateProto=} [properties] Properties to set\n         */\n        function RChainStateProto(properties) {\n            this.bonds = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * RChainStateProto preStateHash.\n         * @member {Uint8Array} preStateHash\n         * @memberof casper.RChainStateProto\n         * @instance\n         */\n        RChainStateProto.prototype.preStateHash = $util.newBuffer([]);\n\n        /**\n         * RChainStateProto postStateHash.\n         * @member {Uint8Array} postStateHash\n         * @memberof casper.RChainStateProto\n         * @instance\n         */\n        RChainStateProto.prototype.postStateHash = $util.newBuffer([]);\n\n        /**\n         * RChainStateProto bonds.\n         * @member {Array.<casper.IBondProto>} bonds\n         * @memberof casper.RChainStateProto\n         * @instance\n         */\n        RChainStateProto.prototype.bonds = $util.emptyArray;\n\n        /**\n         * RChainStateProto blockNumber.\n         * @member {number|Long} blockNumber\n         * @memberof casper.RChainStateProto\n         * @instance\n         */\n        RChainStateProto.prototype.blockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new RChainStateProto instance using the specified properties.\n         * @function create\n         * @memberof casper.RChainStateProto\n         * @static\n         * @param {casper.IRChainStateProto=} [properties] Properties to set\n         * @returns {casper.RChainStateProto} RChainStateProto instance\n         */\n        RChainStateProto.create = function create(properties) {\n            return new RChainStateProto(properties);\n        };\n\n        /**\n         * Encodes the specified RChainStateProto message. Does not implicitly {@link casper.RChainStateProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.RChainStateProto\n         * @static\n         * @param {casper.IRChainStateProto} message RChainStateProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RChainStateProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.preStateHash != null && message.hasOwnProperty(\"preStateHash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.preStateHash);\n            if (message.postStateHash != null && message.hasOwnProperty(\"postStateHash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.postStateHash);\n            if (message.bonds != null && message.bonds.length)\n                for (var i = 0; i < message.bonds.length; ++i)\n                    $root.casper.BondProto.encode(message.bonds[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.blockNumber != null && message.hasOwnProperty(\"blockNumber\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.blockNumber);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified RChainStateProto message, length delimited. Does not implicitly {@link casper.RChainStateProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.RChainStateProto\n         * @static\n         * @param {casper.IRChainStateProto} message RChainStateProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        RChainStateProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a RChainStateProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.RChainStateProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.RChainStateProto} RChainStateProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RChainStateProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.RChainStateProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.preStateHash = reader.bytes();\n                    break;\n                case 2:\n                    message.postStateHash = reader.bytes();\n                    break;\n                case 3:\n                    if (!(message.bonds && message.bonds.length))\n                        message.bonds = [];\n                    message.bonds.push($root.casper.BondProto.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.blockNumber = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a RChainStateProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.RChainStateProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.RChainStateProto} RChainStateProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        RChainStateProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a RChainStateProto message.\n         * @function verify\n         * @memberof casper.RChainStateProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        RChainStateProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.preStateHash != null && message.hasOwnProperty(\"preStateHash\"))\n                if (!(message.preStateHash && typeof message.preStateHash.length === \"number\" || $util.isString(message.preStateHash)))\n                    return \"preStateHash: buffer expected\";\n            if (message.postStateHash != null && message.hasOwnProperty(\"postStateHash\"))\n                if (!(message.postStateHash && typeof message.postStateHash.length === \"number\" || $util.isString(message.postStateHash)))\n                    return \"postStateHash: buffer expected\";\n            if (message.bonds != null && message.hasOwnProperty(\"bonds\")) {\n                if (!Array.isArray(message.bonds))\n                    return \"bonds: array expected\";\n                for (var i = 0; i < message.bonds.length; ++i) {\n                    var error = $root.casper.BondProto.verify(message.bonds[i]);\n                    if (error)\n                        return \"bonds.\" + error;\n                }\n            }\n            if (message.blockNumber != null && message.hasOwnProperty(\"blockNumber\"))\n                if (!$util.isInteger(message.blockNumber) && !(message.blockNumber && $util.isInteger(message.blockNumber.low) && $util.isInteger(message.blockNumber.high)))\n                    return \"blockNumber: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a RChainStateProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.RChainStateProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.RChainStateProto} RChainStateProto\n         */\n        RChainStateProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.RChainStateProto)\n                return object;\n            var message = new $root.casper.RChainStateProto();\n            if (object.preStateHash != null)\n                if (typeof object.preStateHash === \"string\")\n                    $util.base64.decode(object.preStateHash, message.preStateHash = $util.newBuffer($util.base64.length(object.preStateHash)), 0);\n                else if (object.preStateHash.length)\n                    message.preStateHash = object.preStateHash;\n            if (object.postStateHash != null)\n                if (typeof object.postStateHash === \"string\")\n                    $util.base64.decode(object.postStateHash, message.postStateHash = $util.newBuffer($util.base64.length(object.postStateHash)), 0);\n                else if (object.postStateHash.length)\n                    message.postStateHash = object.postStateHash;\n            if (object.bonds) {\n                if (!Array.isArray(object.bonds))\n                    throw TypeError(\".casper.RChainStateProto.bonds: array expected\");\n                message.bonds = [];\n                for (var i = 0; i < object.bonds.length; ++i) {\n                    if (typeof object.bonds[i] !== \"object\")\n                        throw TypeError(\".casper.RChainStateProto.bonds: object expected\");\n                    message.bonds[i] = $root.casper.BondProto.fromObject(object.bonds[i]);\n                }\n            }\n            if (object.blockNumber != null)\n                if ($util.Long)\n                    (message.blockNumber = $util.Long.fromValue(object.blockNumber)).unsigned = false;\n                else if (typeof object.blockNumber === \"string\")\n                    message.blockNumber = parseInt(object.blockNumber, 10);\n                else if (typeof object.blockNumber === \"number\")\n                    message.blockNumber = object.blockNumber;\n                else if (typeof object.blockNumber === \"object\")\n                    message.blockNumber = new $util.LongBits(object.blockNumber.low >>> 0, object.blockNumber.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a RChainStateProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.RChainStateProto\n         * @static\n         * @param {casper.RChainStateProto} message RChainStateProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        RChainStateProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.bonds = [];\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.preStateHash = \"\";\n                else {\n                    object.preStateHash = [];\n                    if (options.bytes !== Array)\n                        object.preStateHash = $util.newBuffer(object.preStateHash);\n                }\n                if (options.bytes === String)\n                    object.postStateHash = \"\";\n                else {\n                    object.postStateHash = [];\n                    if (options.bytes !== Array)\n                        object.postStateHash = $util.newBuffer(object.postStateHash);\n                }\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.blockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.blockNumber = options.longs === String ? \"0\" : 0;\n            }\n            if (message.preStateHash != null && message.hasOwnProperty(\"preStateHash\"))\n                object.preStateHash = options.bytes === String ? $util.base64.encode(message.preStateHash, 0, message.preStateHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.preStateHash) : message.preStateHash;\n            if (message.postStateHash != null && message.hasOwnProperty(\"postStateHash\"))\n                object.postStateHash = options.bytes === String ? $util.base64.encode(message.postStateHash, 0, message.postStateHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.postStateHash) : message.postStateHash;\n            if (message.bonds && message.bonds.length) {\n                object.bonds = [];\n                for (var j = 0; j < message.bonds.length; ++j)\n                    object.bonds[j] = $root.casper.BondProto.toObject(message.bonds[j], options);\n            }\n            if (message.blockNumber != null && message.hasOwnProperty(\"blockNumber\"))\n                if (typeof message.blockNumber === \"number\")\n                    object.blockNumber = options.longs === String ? String(message.blockNumber) : message.blockNumber;\n                else\n                    object.blockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.blockNumber) : options.longs === Number ? new $util.LongBits(message.blockNumber.low >>> 0, message.blockNumber.high >>> 0).toNumber() : message.blockNumber;\n            return object;\n        };\n\n        /**\n         * Converts this RChainStateProto to JSON.\n         * @function toJSON\n         * @memberof casper.RChainStateProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        RChainStateProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return RChainStateProto;\n    })();\n\n    casper.EventProto = (function() {\n\n        /**\n         * Properties of an EventProto.\n         * @memberof casper\n         * @interface IEventProto\n         * @property {casper.IProduceEventProto|null} [produce] EventProto produce\n         * @property {casper.IConsumeEventProto|null} [consume] EventProto consume\n         * @property {casper.ICommEventProto|null} [comm] EventProto comm\n         */\n\n        /**\n         * Constructs a new EventProto.\n         * @memberof casper\n         * @classdesc Represents an EventProto.\n         * @implements IEventProto\n         * @constructor\n         * @param {casper.IEventProto=} [properties] Properties to set\n         */\n        function EventProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * EventProto produce.\n         * @member {casper.IProduceEventProto|null|undefined} produce\n         * @memberof casper.EventProto\n         * @instance\n         */\n        EventProto.prototype.produce = null;\n\n        /**\n         * EventProto consume.\n         * @member {casper.IConsumeEventProto|null|undefined} consume\n         * @memberof casper.EventProto\n         * @instance\n         */\n        EventProto.prototype.consume = null;\n\n        /**\n         * EventProto comm.\n         * @member {casper.ICommEventProto|null|undefined} comm\n         * @memberof casper.EventProto\n         * @instance\n         */\n        EventProto.prototype.comm = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * EventProto event_instance.\n         * @member {\"produce\"|\"consume\"|\"comm\"|undefined} event_instance\n         * @memberof casper.EventProto\n         * @instance\n         */\n        Object.defineProperty(EventProto.prototype, \"event_instance\", {\n            get: $util.oneOfGetter($oneOfFields = [\"produce\", \"consume\", \"comm\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new EventProto instance using the specified properties.\n         * @function create\n         * @memberof casper.EventProto\n         * @static\n         * @param {casper.IEventProto=} [properties] Properties to set\n         * @returns {casper.EventProto} EventProto instance\n         */\n        EventProto.create = function create(properties) {\n            return new EventProto(properties);\n        };\n\n        /**\n         * Encodes the specified EventProto message. Does not implicitly {@link casper.EventProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.EventProto\n         * @static\n         * @param {casper.IEventProto} message EventProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EventProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.produce != null && message.hasOwnProperty(\"produce\"))\n                $root.casper.ProduceEventProto.encode(message.produce, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.consume != null && message.hasOwnProperty(\"consume\"))\n                $root.casper.ConsumeEventProto.encode(message.consume, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.comm != null && message.hasOwnProperty(\"comm\"))\n                $root.casper.CommEventProto.encode(message.comm, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified EventProto message, length delimited. Does not implicitly {@link casper.EventProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.EventProto\n         * @static\n         * @param {casper.IEventProto} message EventProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EventProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an EventProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.EventProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.EventProto} EventProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EventProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.EventProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.produce = $root.casper.ProduceEventProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.consume = $root.casper.ConsumeEventProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.comm = $root.casper.CommEventProto.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an EventProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.EventProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.EventProto} EventProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EventProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an EventProto message.\n         * @function verify\n         * @memberof casper.EventProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        EventProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.produce != null && message.hasOwnProperty(\"produce\")) {\n                properties.event_instance = 1;\n                {\n                    var error = $root.casper.ProduceEventProto.verify(message.produce);\n                    if (error)\n                        return \"produce.\" + error;\n                }\n            }\n            if (message.consume != null && message.hasOwnProperty(\"consume\")) {\n                if (properties.event_instance === 1)\n                    return \"event_instance: multiple values\";\n                properties.event_instance = 1;\n                {\n                    var error = $root.casper.ConsumeEventProto.verify(message.consume);\n                    if (error)\n                        return \"consume.\" + error;\n                }\n            }\n            if (message.comm != null && message.hasOwnProperty(\"comm\")) {\n                if (properties.event_instance === 1)\n                    return \"event_instance: multiple values\";\n                properties.event_instance = 1;\n                {\n                    var error = $root.casper.CommEventProto.verify(message.comm);\n                    if (error)\n                        return \"comm.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an EventProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.EventProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.EventProto} EventProto\n         */\n        EventProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.EventProto)\n                return object;\n            var message = new $root.casper.EventProto();\n            if (object.produce != null) {\n                if (typeof object.produce !== \"object\")\n                    throw TypeError(\".casper.EventProto.produce: object expected\");\n                message.produce = $root.casper.ProduceEventProto.fromObject(object.produce);\n            }\n            if (object.consume != null) {\n                if (typeof object.consume !== \"object\")\n                    throw TypeError(\".casper.EventProto.consume: object expected\");\n                message.consume = $root.casper.ConsumeEventProto.fromObject(object.consume);\n            }\n            if (object.comm != null) {\n                if (typeof object.comm !== \"object\")\n                    throw TypeError(\".casper.EventProto.comm: object expected\");\n                message.comm = $root.casper.CommEventProto.fromObject(object.comm);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an EventProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.EventProto\n         * @static\n         * @param {casper.EventProto} message EventProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EventProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.produce != null && message.hasOwnProperty(\"produce\")) {\n                object.produce = $root.casper.ProduceEventProto.toObject(message.produce, options);\n                if (options.oneofs)\n                    object.event_instance = \"produce\";\n            }\n            if (message.consume != null && message.hasOwnProperty(\"consume\")) {\n                object.consume = $root.casper.ConsumeEventProto.toObject(message.consume, options);\n                if (options.oneofs)\n                    object.event_instance = \"consume\";\n            }\n            if (message.comm != null && message.hasOwnProperty(\"comm\")) {\n                object.comm = $root.casper.CommEventProto.toObject(message.comm, options);\n                if (options.oneofs)\n                    object.event_instance = \"comm\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this EventProto to JSON.\n         * @function toJSON\n         * @memberof casper.EventProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EventProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return EventProto;\n    })();\n\n    casper.ProduceEventProto = (function() {\n\n        /**\n         * Properties of a ProduceEventProto.\n         * @memberof casper\n         * @interface IProduceEventProto\n         * @property {Uint8Array|null} [channelsHash] ProduceEventProto channelsHash\n         * @property {Uint8Array|null} [hash] ProduceEventProto hash\n         * @property {boolean|null} [persistent] ProduceEventProto persistent\n         * @property {number|null} [timesRepeated] ProduceEventProto timesRepeated\n         */\n\n        /**\n         * Constructs a new ProduceEventProto.\n         * @memberof casper\n         * @classdesc Represents a ProduceEventProto.\n         * @implements IProduceEventProto\n         * @constructor\n         * @param {casper.IProduceEventProto=} [properties] Properties to set\n         */\n        function ProduceEventProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ProduceEventProto channelsHash.\n         * @member {Uint8Array} channelsHash\n         * @memberof casper.ProduceEventProto\n         * @instance\n         */\n        ProduceEventProto.prototype.channelsHash = $util.newBuffer([]);\n\n        /**\n         * ProduceEventProto hash.\n         * @member {Uint8Array} hash\n         * @memberof casper.ProduceEventProto\n         * @instance\n         */\n        ProduceEventProto.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * ProduceEventProto persistent.\n         * @member {boolean} persistent\n         * @memberof casper.ProduceEventProto\n         * @instance\n         */\n        ProduceEventProto.prototype.persistent = false;\n\n        /**\n         * ProduceEventProto timesRepeated.\n         * @member {number} timesRepeated\n         * @memberof casper.ProduceEventProto\n         * @instance\n         */\n        ProduceEventProto.prototype.timesRepeated = 0;\n\n        /**\n         * Creates a new ProduceEventProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ProduceEventProto\n         * @static\n         * @param {casper.IProduceEventProto=} [properties] Properties to set\n         * @returns {casper.ProduceEventProto} ProduceEventProto instance\n         */\n        ProduceEventProto.create = function create(properties) {\n            return new ProduceEventProto(properties);\n        };\n\n        /**\n         * Encodes the specified ProduceEventProto message. Does not implicitly {@link casper.ProduceEventProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ProduceEventProto\n         * @static\n         * @param {casper.IProduceEventProto} message ProduceEventProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProduceEventProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.channelsHash != null && message.hasOwnProperty(\"channelsHash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.channelsHash);\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);\n            if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);\n            if (message.timesRepeated != null && message.hasOwnProperty(\"timesRepeated\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.timesRepeated);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ProduceEventProto message, length delimited. Does not implicitly {@link casper.ProduceEventProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ProduceEventProto\n         * @static\n         * @param {casper.IProduceEventProto} message ProduceEventProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProduceEventProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ProduceEventProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ProduceEventProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ProduceEventProto} ProduceEventProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProduceEventProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ProduceEventProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.channelsHash = reader.bytes();\n                    break;\n                case 2:\n                    message.hash = reader.bytes();\n                    break;\n                case 3:\n                    message.persistent = reader.bool();\n                    break;\n                case 4:\n                    message.timesRepeated = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ProduceEventProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ProduceEventProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ProduceEventProto} ProduceEventProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProduceEventProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ProduceEventProto message.\n         * @function verify\n         * @memberof casper.ProduceEventProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ProduceEventProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.channelsHash != null && message.hasOwnProperty(\"channelsHash\"))\n                if (!(message.channelsHash && typeof message.channelsHash.length === \"number\" || $util.isString(message.channelsHash)))\n                    return \"channelsHash: buffer expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n                if (typeof message.persistent !== \"boolean\")\n                    return \"persistent: boolean expected\";\n            if (message.timesRepeated != null && message.hasOwnProperty(\"timesRepeated\"))\n                if (!$util.isInteger(message.timesRepeated))\n                    return \"timesRepeated: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ProduceEventProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ProduceEventProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ProduceEventProto} ProduceEventProto\n         */\n        ProduceEventProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ProduceEventProto)\n                return object;\n            var message = new $root.casper.ProduceEventProto();\n            if (object.channelsHash != null)\n                if (typeof object.channelsHash === \"string\")\n                    $util.base64.decode(object.channelsHash, message.channelsHash = $util.newBuffer($util.base64.length(object.channelsHash)), 0);\n                else if (object.channelsHash.length)\n                    message.channelsHash = object.channelsHash;\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            if (object.persistent != null)\n                message.persistent = Boolean(object.persistent);\n            if (object.timesRepeated != null)\n                message.timesRepeated = object.timesRepeated | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ProduceEventProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ProduceEventProto\n         * @static\n         * @param {casper.ProduceEventProto} message ProduceEventProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ProduceEventProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.channelsHash = \"\";\n                else {\n                    object.channelsHash = [];\n                    if (options.bytes !== Array)\n                        object.channelsHash = $util.newBuffer(object.channelsHash);\n                }\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n                object.persistent = false;\n                object.timesRepeated = 0;\n            }\n            if (message.channelsHash != null && message.hasOwnProperty(\"channelsHash\"))\n                object.channelsHash = options.bytes === String ? $util.base64.encode(message.channelsHash, 0, message.channelsHash.length) : options.bytes === Array ? Array.prototype.slice.call(message.channelsHash) : message.channelsHash;\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n                object.persistent = message.persistent;\n            if (message.timesRepeated != null && message.hasOwnProperty(\"timesRepeated\"))\n                object.timesRepeated = message.timesRepeated;\n            return object;\n        };\n\n        /**\n         * Converts this ProduceEventProto to JSON.\n         * @function toJSON\n         * @memberof casper.ProduceEventProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ProduceEventProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ProduceEventProto;\n    })();\n\n    casper.ConsumeEventProto = (function() {\n\n        /**\n         * Properties of a ConsumeEventProto.\n         * @memberof casper\n         * @interface IConsumeEventProto\n         * @property {Array.<Uint8Array>|null} [channelsHashes] ConsumeEventProto channelsHashes\n         * @property {Uint8Array|null} [hash] ConsumeEventProto hash\n         * @property {boolean|null} [persistent] ConsumeEventProto persistent\n         */\n\n        /**\n         * Constructs a new ConsumeEventProto.\n         * @memberof casper\n         * @classdesc Represents a ConsumeEventProto.\n         * @implements IConsumeEventProto\n         * @constructor\n         * @param {casper.IConsumeEventProto=} [properties] Properties to set\n         */\n        function ConsumeEventProto(properties) {\n            this.channelsHashes = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ConsumeEventProto channelsHashes.\n         * @member {Array.<Uint8Array>} channelsHashes\n         * @memberof casper.ConsumeEventProto\n         * @instance\n         */\n        ConsumeEventProto.prototype.channelsHashes = $util.emptyArray;\n\n        /**\n         * ConsumeEventProto hash.\n         * @member {Uint8Array} hash\n         * @memberof casper.ConsumeEventProto\n         * @instance\n         */\n        ConsumeEventProto.prototype.hash = $util.newBuffer([]);\n\n        /**\n         * ConsumeEventProto persistent.\n         * @member {boolean} persistent\n         * @memberof casper.ConsumeEventProto\n         * @instance\n         */\n        ConsumeEventProto.prototype.persistent = false;\n\n        /**\n         * Creates a new ConsumeEventProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ConsumeEventProto\n         * @static\n         * @param {casper.IConsumeEventProto=} [properties] Properties to set\n         * @returns {casper.ConsumeEventProto} ConsumeEventProto instance\n         */\n        ConsumeEventProto.create = function create(properties) {\n            return new ConsumeEventProto(properties);\n        };\n\n        /**\n         * Encodes the specified ConsumeEventProto message. Does not implicitly {@link casper.ConsumeEventProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ConsumeEventProto\n         * @static\n         * @param {casper.IConsumeEventProto} message ConsumeEventProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsumeEventProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.channelsHashes != null && message.channelsHashes.length)\n                for (var i = 0; i < message.channelsHashes.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.channelsHashes[i]);\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);\n            if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ConsumeEventProto message, length delimited. Does not implicitly {@link casper.ConsumeEventProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ConsumeEventProto\n         * @static\n         * @param {casper.IConsumeEventProto} message ConsumeEventProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ConsumeEventProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ConsumeEventProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ConsumeEventProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ConsumeEventProto} ConsumeEventProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsumeEventProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ConsumeEventProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.channelsHashes && message.channelsHashes.length))\n                        message.channelsHashes = [];\n                    message.channelsHashes.push(reader.bytes());\n                    break;\n                case 2:\n                    message.hash = reader.bytes();\n                    break;\n                case 3:\n                    message.persistent = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ConsumeEventProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ConsumeEventProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ConsumeEventProto} ConsumeEventProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ConsumeEventProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ConsumeEventProto message.\n         * @function verify\n         * @memberof casper.ConsumeEventProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ConsumeEventProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.channelsHashes != null && message.hasOwnProperty(\"channelsHashes\")) {\n                if (!Array.isArray(message.channelsHashes))\n                    return \"channelsHashes: array expected\";\n                for (var i = 0; i < message.channelsHashes.length; ++i)\n                    if (!(message.channelsHashes[i] && typeof message.channelsHashes[i].length === \"number\" || $util.isString(message.channelsHashes[i])))\n                        return \"channelsHashes: buffer[] expected\";\n            }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!(message.hash && typeof message.hash.length === \"number\" || $util.isString(message.hash)))\n                    return \"hash: buffer expected\";\n            if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n                if (typeof message.persistent !== \"boolean\")\n                    return \"persistent: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ConsumeEventProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ConsumeEventProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ConsumeEventProto} ConsumeEventProto\n         */\n        ConsumeEventProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ConsumeEventProto)\n                return object;\n            var message = new $root.casper.ConsumeEventProto();\n            if (object.channelsHashes) {\n                if (!Array.isArray(object.channelsHashes))\n                    throw TypeError(\".casper.ConsumeEventProto.channelsHashes: array expected\");\n                message.channelsHashes = [];\n                for (var i = 0; i < object.channelsHashes.length; ++i)\n                    if (typeof object.channelsHashes[i] === \"string\")\n                        $util.base64.decode(object.channelsHashes[i], message.channelsHashes[i] = $util.newBuffer($util.base64.length(object.channelsHashes[i])), 0);\n                    else if (object.channelsHashes[i].length)\n                        message.channelsHashes[i] = object.channelsHashes[i];\n            }\n            if (object.hash != null)\n                if (typeof object.hash === \"string\")\n                    $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);\n                else if (object.hash.length)\n                    message.hash = object.hash;\n            if (object.persistent != null)\n                message.persistent = Boolean(object.persistent);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ConsumeEventProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ConsumeEventProto\n         * @static\n         * @param {casper.ConsumeEventProto} message ConsumeEventProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ConsumeEventProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.channelsHashes = [];\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.hash = \"\";\n                else {\n                    object.hash = [];\n                    if (options.bytes !== Array)\n                        object.hash = $util.newBuffer(object.hash);\n                }\n                object.persistent = false;\n            }\n            if (message.channelsHashes && message.channelsHashes.length) {\n                object.channelsHashes = [];\n                for (var j = 0; j < message.channelsHashes.length; ++j)\n                    object.channelsHashes[j] = options.bytes === String ? $util.base64.encode(message.channelsHashes[j], 0, message.channelsHashes[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.channelsHashes[j]) : message.channelsHashes[j];\n            }\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;\n            if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n                object.persistent = message.persistent;\n            return object;\n        };\n\n        /**\n         * Converts this ConsumeEventProto to JSON.\n         * @function toJSON\n         * @memberof casper.ConsumeEventProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ConsumeEventProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ConsumeEventProto;\n    })();\n\n    casper.CommEventProto = (function() {\n\n        /**\n         * Properties of a CommEventProto.\n         * @memberof casper\n         * @interface ICommEventProto\n         * @property {casper.IConsumeEventProto|null} [consume] CommEventProto consume\n         * @property {Array.<casper.IProduceEventProto>|null} [produces] CommEventProto produces\n         * @property {Array.<casper.IPeekProto>|null} [peeks] CommEventProto peeks\n         */\n\n        /**\n         * Constructs a new CommEventProto.\n         * @memberof casper\n         * @classdesc Represents a CommEventProto.\n         * @implements ICommEventProto\n         * @constructor\n         * @param {casper.ICommEventProto=} [properties] Properties to set\n         */\n        function CommEventProto(properties) {\n            this.produces = [];\n            this.peeks = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CommEventProto consume.\n         * @member {casper.IConsumeEventProto|null|undefined} consume\n         * @memberof casper.CommEventProto\n         * @instance\n         */\n        CommEventProto.prototype.consume = null;\n\n        /**\n         * CommEventProto produces.\n         * @member {Array.<casper.IProduceEventProto>} produces\n         * @memberof casper.CommEventProto\n         * @instance\n         */\n        CommEventProto.prototype.produces = $util.emptyArray;\n\n        /**\n         * CommEventProto peeks.\n         * @member {Array.<casper.IPeekProto>} peeks\n         * @memberof casper.CommEventProto\n         * @instance\n         */\n        CommEventProto.prototype.peeks = $util.emptyArray;\n\n        /**\n         * Creates a new CommEventProto instance using the specified properties.\n         * @function create\n         * @memberof casper.CommEventProto\n         * @static\n         * @param {casper.ICommEventProto=} [properties] Properties to set\n         * @returns {casper.CommEventProto} CommEventProto instance\n         */\n        CommEventProto.create = function create(properties) {\n            return new CommEventProto(properties);\n        };\n\n        /**\n         * Encodes the specified CommEventProto message. Does not implicitly {@link casper.CommEventProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.CommEventProto\n         * @static\n         * @param {casper.ICommEventProto} message CommEventProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CommEventProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.consume != null && message.hasOwnProperty(\"consume\"))\n                $root.casper.ConsumeEventProto.encode(message.consume, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.produces != null && message.produces.length)\n                for (var i = 0; i < message.produces.length; ++i)\n                    $root.casper.ProduceEventProto.encode(message.produces[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.peeks != null && message.peeks.length)\n                for (var i = 0; i < message.peeks.length; ++i)\n                    $root.casper.PeekProto.encode(message.peeks[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CommEventProto message, length delimited. Does not implicitly {@link casper.CommEventProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.CommEventProto\n         * @static\n         * @param {casper.ICommEventProto} message CommEventProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CommEventProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CommEventProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.CommEventProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.CommEventProto} CommEventProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CommEventProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.CommEventProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.consume = $root.casper.ConsumeEventProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    if (!(message.produces && message.produces.length))\n                        message.produces = [];\n                    message.produces.push($root.casper.ProduceEventProto.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    if (!(message.peeks && message.peeks.length))\n                        message.peeks = [];\n                    message.peeks.push($root.casper.PeekProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CommEventProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.CommEventProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.CommEventProto} CommEventProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CommEventProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CommEventProto message.\n         * @function verify\n         * @memberof casper.CommEventProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CommEventProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.consume != null && message.hasOwnProperty(\"consume\")) {\n                var error = $root.casper.ConsumeEventProto.verify(message.consume);\n                if (error)\n                    return \"consume.\" + error;\n            }\n            if (message.produces != null && message.hasOwnProperty(\"produces\")) {\n                if (!Array.isArray(message.produces))\n                    return \"produces: array expected\";\n                for (var i = 0; i < message.produces.length; ++i) {\n                    var error = $root.casper.ProduceEventProto.verify(message.produces[i]);\n                    if (error)\n                        return \"produces.\" + error;\n                }\n            }\n            if (message.peeks != null && message.hasOwnProperty(\"peeks\")) {\n                if (!Array.isArray(message.peeks))\n                    return \"peeks: array expected\";\n                for (var i = 0; i < message.peeks.length; ++i) {\n                    var error = $root.casper.PeekProto.verify(message.peeks[i]);\n                    if (error)\n                        return \"peeks.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a CommEventProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.CommEventProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.CommEventProto} CommEventProto\n         */\n        CommEventProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.CommEventProto)\n                return object;\n            var message = new $root.casper.CommEventProto();\n            if (object.consume != null) {\n                if (typeof object.consume !== \"object\")\n                    throw TypeError(\".casper.CommEventProto.consume: object expected\");\n                message.consume = $root.casper.ConsumeEventProto.fromObject(object.consume);\n            }\n            if (object.produces) {\n                if (!Array.isArray(object.produces))\n                    throw TypeError(\".casper.CommEventProto.produces: array expected\");\n                message.produces = [];\n                for (var i = 0; i < object.produces.length; ++i) {\n                    if (typeof object.produces[i] !== \"object\")\n                        throw TypeError(\".casper.CommEventProto.produces: object expected\");\n                    message.produces[i] = $root.casper.ProduceEventProto.fromObject(object.produces[i]);\n                }\n            }\n            if (object.peeks) {\n                if (!Array.isArray(object.peeks))\n                    throw TypeError(\".casper.CommEventProto.peeks: array expected\");\n                message.peeks = [];\n                for (var i = 0; i < object.peeks.length; ++i) {\n                    if (typeof object.peeks[i] !== \"object\")\n                        throw TypeError(\".casper.CommEventProto.peeks: object expected\");\n                    message.peeks[i] = $root.casper.PeekProto.fromObject(object.peeks[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CommEventProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.CommEventProto\n         * @static\n         * @param {casper.CommEventProto} message CommEventProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CommEventProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.produces = [];\n                object.peeks = [];\n            }\n            if (options.defaults)\n                object.consume = null;\n            if (message.consume != null && message.hasOwnProperty(\"consume\"))\n                object.consume = $root.casper.ConsumeEventProto.toObject(message.consume, options);\n            if (message.produces && message.produces.length) {\n                object.produces = [];\n                for (var j = 0; j < message.produces.length; ++j)\n                    object.produces[j] = $root.casper.ProduceEventProto.toObject(message.produces[j], options);\n            }\n            if (message.peeks && message.peeks.length) {\n                object.peeks = [];\n                for (var j = 0; j < message.peeks.length; ++j)\n                    object.peeks[j] = $root.casper.PeekProto.toObject(message.peeks[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this CommEventProto to JSON.\n         * @function toJSON\n         * @memberof casper.CommEventProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CommEventProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return CommEventProto;\n    })();\n\n    casper.PeekProto = (function() {\n\n        /**\n         * Properties of a PeekProto.\n         * @memberof casper\n         * @interface IPeekProto\n         * @property {number|null} [channelIndex] PeekProto channelIndex\n         */\n\n        /**\n         * Constructs a new PeekProto.\n         * @memberof casper\n         * @classdesc Represents a PeekProto.\n         * @implements IPeekProto\n         * @constructor\n         * @param {casper.IPeekProto=} [properties] Properties to set\n         */\n        function PeekProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PeekProto channelIndex.\n         * @member {number} channelIndex\n         * @memberof casper.PeekProto\n         * @instance\n         */\n        PeekProto.prototype.channelIndex = 0;\n\n        /**\n         * Creates a new PeekProto instance using the specified properties.\n         * @function create\n         * @memberof casper.PeekProto\n         * @static\n         * @param {casper.IPeekProto=} [properties] Properties to set\n         * @returns {casper.PeekProto} PeekProto instance\n         */\n        PeekProto.create = function create(properties) {\n            return new PeekProto(properties);\n        };\n\n        /**\n         * Encodes the specified PeekProto message. Does not implicitly {@link casper.PeekProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.PeekProto\n         * @static\n         * @param {casper.IPeekProto} message PeekProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PeekProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.channelIndex != null && message.hasOwnProperty(\"channelIndex\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.channelIndex);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PeekProto message, length delimited. Does not implicitly {@link casper.PeekProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.PeekProto\n         * @static\n         * @param {casper.IPeekProto} message PeekProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PeekProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PeekProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.PeekProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.PeekProto} PeekProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PeekProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.PeekProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.channelIndex = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PeekProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.PeekProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.PeekProto} PeekProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PeekProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PeekProto message.\n         * @function verify\n         * @memberof casper.PeekProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PeekProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.channelIndex != null && message.hasOwnProperty(\"channelIndex\"))\n                if (!$util.isInteger(message.channelIndex))\n                    return \"channelIndex: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PeekProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.PeekProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.PeekProto} PeekProto\n         */\n        PeekProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.PeekProto)\n                return object;\n            var message = new $root.casper.PeekProto();\n            if (object.channelIndex != null)\n                message.channelIndex = object.channelIndex | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PeekProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.PeekProto\n         * @static\n         * @param {casper.PeekProto} message PeekProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PeekProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.channelIndex = 0;\n            if (message.channelIndex != null && message.hasOwnProperty(\"channelIndex\"))\n                object.channelIndex = message.channelIndex;\n            return object;\n        };\n\n        /**\n         * Converts this PeekProto to JSON.\n         * @function toJSON\n         * @memberof casper.PeekProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PeekProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PeekProto;\n    })();\n\n    casper.BondProto = (function() {\n\n        /**\n         * Properties of a BondProto.\n         * @memberof casper\n         * @interface IBondProto\n         * @property {Uint8Array|null} [validator] BondProto validator\n         * @property {number|Long|null} [stake] BondProto stake\n         */\n\n        /**\n         * Constructs a new BondProto.\n         * @memberof casper\n         * @classdesc Represents a BondProto.\n         * @implements IBondProto\n         * @constructor\n         * @param {casper.IBondProto=} [properties] Properties to set\n         */\n        function BondProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BondProto validator.\n         * @member {Uint8Array} validator\n         * @memberof casper.BondProto\n         * @instance\n         */\n        BondProto.prototype.validator = $util.newBuffer([]);\n\n        /**\n         * BondProto stake.\n         * @member {number|Long} stake\n         * @memberof casper.BondProto\n         * @instance\n         */\n        BondProto.prototype.stake = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new BondProto instance using the specified properties.\n         * @function create\n         * @memberof casper.BondProto\n         * @static\n         * @param {casper.IBondProto=} [properties] Properties to set\n         * @returns {casper.BondProto} BondProto instance\n         */\n        BondProto.create = function create(properties) {\n            return new BondProto(properties);\n        };\n\n        /**\n         * Encodes the specified BondProto message. Does not implicitly {@link casper.BondProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BondProto\n         * @static\n         * @param {casper.IBondProto} message BondProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BondProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.validator);\n            if (message.stake != null && message.hasOwnProperty(\"stake\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.stake);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BondProto message, length delimited. Does not implicitly {@link casper.BondProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BondProto\n         * @static\n         * @param {casper.IBondProto} message BondProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BondProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BondProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BondProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BondProto} BondProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BondProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BondProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.validator = reader.bytes();\n                    break;\n                case 2:\n                    message.stake = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BondProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BondProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BondProto} BondProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BondProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BondProto message.\n         * @function verify\n         * @memberof casper.BondProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BondProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                if (!(message.validator && typeof message.validator.length === \"number\" || $util.isString(message.validator)))\n                    return \"validator: buffer expected\";\n            if (message.stake != null && message.hasOwnProperty(\"stake\"))\n                if (!$util.isInteger(message.stake) && !(message.stake && $util.isInteger(message.stake.low) && $util.isInteger(message.stake.high)))\n                    return \"stake: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BondProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BondProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BondProto} BondProto\n         */\n        BondProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BondProto)\n                return object;\n            var message = new $root.casper.BondProto();\n            if (object.validator != null)\n                if (typeof object.validator === \"string\")\n                    $util.base64.decode(object.validator, message.validator = $util.newBuffer($util.base64.length(object.validator)), 0);\n                else if (object.validator.length)\n                    message.validator = object.validator;\n            if (object.stake != null)\n                if ($util.Long)\n                    (message.stake = $util.Long.fromValue(object.stake)).unsigned = false;\n                else if (typeof object.stake === \"string\")\n                    message.stake = parseInt(object.stake, 10);\n                else if (typeof object.stake === \"number\")\n                    message.stake = object.stake;\n                else if (typeof object.stake === \"object\")\n                    message.stake = new $util.LongBits(object.stake.low >>> 0, object.stake.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BondProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BondProto\n         * @static\n         * @param {casper.BondProto} message BondProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BondProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.validator = \"\";\n                else {\n                    object.validator = [];\n                    if (options.bytes !== Array)\n                        object.validator = $util.newBuffer(object.validator);\n                }\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.stake = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.stake = options.longs === String ? \"0\" : 0;\n            }\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                object.validator = options.bytes === String ? $util.base64.encode(message.validator, 0, message.validator.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator) : message.validator;\n            if (message.stake != null && message.hasOwnProperty(\"stake\"))\n                if (typeof message.stake === \"number\")\n                    object.stake = options.longs === String ? String(message.stake) : message.stake;\n                else\n                    object.stake = options.longs === String ? $util.Long.prototype.toString.call(message.stake) : options.longs === Number ? new $util.LongBits(message.stake.low >>> 0, message.stake.high >>> 0).toNumber() : message.stake;\n            return object;\n        };\n\n        /**\n         * Converts this BondProto to JSON.\n         * @function toJSON\n         * @memberof casper.BondProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BondProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BondProto;\n    })();\n\n    casper.FindDeployQuery = (function() {\n\n        /**\n         * Properties of a FindDeployQuery.\n         * @memberof casper\n         * @interface IFindDeployQuery\n         * @property {Uint8Array|null} [deployId] FindDeployQuery deployId\n         */\n\n        /**\n         * Constructs a new FindDeployQuery.\n         * @memberof casper\n         * @classdesc Represents a FindDeployQuery.\n         * @implements IFindDeployQuery\n         * @constructor\n         * @param {casper.IFindDeployQuery=} [properties] Properties to set\n         */\n        function FindDeployQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FindDeployQuery deployId.\n         * @member {Uint8Array} deployId\n         * @memberof casper.FindDeployQuery\n         * @instance\n         */\n        FindDeployQuery.prototype.deployId = $util.newBuffer([]);\n\n        /**\n         * Creates a new FindDeployQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.FindDeployQuery\n         * @static\n         * @param {casper.IFindDeployQuery=} [properties] Properties to set\n         * @returns {casper.FindDeployQuery} FindDeployQuery instance\n         */\n        FindDeployQuery.create = function create(properties) {\n            return new FindDeployQuery(properties);\n        };\n\n        /**\n         * Encodes the specified FindDeployQuery message. Does not implicitly {@link casper.FindDeployQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.FindDeployQuery\n         * @static\n         * @param {casper.IFindDeployQuery} message FindDeployQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FindDeployQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.deployId != null && message.hasOwnProperty(\"deployId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.deployId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FindDeployQuery message, length delimited. Does not implicitly {@link casper.FindDeployQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.FindDeployQuery\n         * @static\n         * @param {casper.IFindDeployQuery} message FindDeployQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FindDeployQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FindDeployQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.FindDeployQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.FindDeployQuery} FindDeployQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FindDeployQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.FindDeployQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.deployId = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FindDeployQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.FindDeployQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.FindDeployQuery} FindDeployQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FindDeployQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FindDeployQuery message.\n         * @function verify\n         * @memberof casper.FindDeployQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FindDeployQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.deployId != null && message.hasOwnProperty(\"deployId\"))\n                if (!(message.deployId && typeof message.deployId.length === \"number\" || $util.isString(message.deployId)))\n                    return \"deployId: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FindDeployQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.FindDeployQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.FindDeployQuery} FindDeployQuery\n         */\n        FindDeployQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.FindDeployQuery)\n                return object;\n            var message = new $root.casper.FindDeployQuery();\n            if (object.deployId != null)\n                if (typeof object.deployId === \"string\")\n                    $util.base64.decode(object.deployId, message.deployId = $util.newBuffer($util.base64.length(object.deployId)), 0);\n                else if (object.deployId.length)\n                    message.deployId = object.deployId;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FindDeployQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.FindDeployQuery\n         * @static\n         * @param {casper.FindDeployQuery} message FindDeployQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FindDeployQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.deployId = \"\";\n                else {\n                    object.deployId = [];\n                    if (options.bytes !== Array)\n                        object.deployId = $util.newBuffer(object.deployId);\n                }\n            if (message.deployId != null && message.hasOwnProperty(\"deployId\"))\n                object.deployId = options.bytes === String ? $util.base64.encode(message.deployId, 0, message.deployId.length) : options.bytes === Array ? Array.prototype.slice.call(message.deployId) : message.deployId;\n            return object;\n        };\n\n        /**\n         * Converts this FindDeployQuery to JSON.\n         * @function toJSON\n         * @memberof casper.FindDeployQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FindDeployQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return FindDeployQuery;\n    })();\n\n    casper.BlockQuery = (function() {\n\n        /**\n         * Properties of a BlockQuery.\n         * @memberof casper\n         * @interface IBlockQuery\n         * @property {string|null} [hash] BlockQuery hash\n         */\n\n        /**\n         * Constructs a new BlockQuery.\n         * @memberof casper\n         * @classdesc Represents a BlockQuery.\n         * @implements IBlockQuery\n         * @constructor\n         * @param {casper.IBlockQuery=} [properties] Properties to set\n         */\n        function BlockQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlockQuery hash.\n         * @member {string} hash\n         * @memberof casper.BlockQuery\n         * @instance\n         */\n        BlockQuery.prototype.hash = \"\";\n\n        /**\n         * Creates a new BlockQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.BlockQuery\n         * @static\n         * @param {casper.IBlockQuery=} [properties] Properties to set\n         * @returns {casper.BlockQuery} BlockQuery instance\n         */\n        BlockQuery.create = function create(properties) {\n            return new BlockQuery(properties);\n        };\n\n        /**\n         * Encodes the specified BlockQuery message. Does not implicitly {@link casper.BlockQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlockQuery\n         * @static\n         * @param {casper.IBlockQuery} message BlockQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlockQuery message, length delimited. Does not implicitly {@link casper.BlockQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlockQuery\n         * @static\n         * @param {casper.IBlockQuery} message BlockQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlockQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlockQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlockQuery} BlockQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlockQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlockQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlockQuery} BlockQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlockQuery message.\n         * @function verify\n         * @memberof casper.BlockQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlockQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!$util.isString(message.hash))\n                    return \"hash: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BlockQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlockQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlockQuery} BlockQuery\n         */\n        BlockQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlockQuery)\n                return object;\n            var message = new $root.casper.BlockQuery();\n            if (object.hash != null)\n                message.hash = String(object.hash);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlockQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlockQuery\n         * @static\n         * @param {casper.BlockQuery} message BlockQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.hash = \"\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this BlockQuery to JSON.\n         * @function toJSON\n         * @memberof casper.BlockQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlockQuery;\n    })();\n\n    casper.BlocksQuery = (function() {\n\n        /**\n         * Properties of a BlocksQuery.\n         * @memberof casper\n         * @interface IBlocksQuery\n         * @property {number|null} [depth] BlocksQuery depth\n         */\n\n        /**\n         * Constructs a new BlocksQuery.\n         * @memberof casper\n         * @classdesc Represents a BlocksQuery.\n         * @implements IBlocksQuery\n         * @constructor\n         * @param {casper.IBlocksQuery=} [properties] Properties to set\n         */\n        function BlocksQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlocksQuery depth.\n         * @member {number} depth\n         * @memberof casper.BlocksQuery\n         * @instance\n         */\n        BlocksQuery.prototype.depth = 0;\n\n        /**\n         * Creates a new BlocksQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.BlocksQuery\n         * @static\n         * @param {casper.IBlocksQuery=} [properties] Properties to set\n         * @returns {casper.BlocksQuery} BlocksQuery instance\n         */\n        BlocksQuery.create = function create(properties) {\n            return new BlocksQuery(properties);\n        };\n\n        /**\n         * Encodes the specified BlocksQuery message. Does not implicitly {@link casper.BlocksQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlocksQuery\n         * @static\n         * @param {casper.IBlocksQuery} message BlocksQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlocksQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.depth);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlocksQuery message, length delimited. Does not implicitly {@link casper.BlocksQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlocksQuery\n         * @static\n         * @param {casper.IBlocksQuery} message BlocksQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlocksQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlocksQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlocksQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlocksQuery} BlocksQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlocksQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlocksQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.depth = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlocksQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlocksQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlocksQuery} BlocksQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlocksQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlocksQuery message.\n         * @function verify\n         * @memberof casper.BlocksQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlocksQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                if (!$util.isInteger(message.depth))\n                    return \"depth: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BlocksQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlocksQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlocksQuery} BlocksQuery\n         */\n        BlocksQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlocksQuery)\n                return object;\n            var message = new $root.casper.BlocksQuery();\n            if (object.depth != null)\n                message.depth = object.depth | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlocksQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlocksQuery\n         * @static\n         * @param {casper.BlocksQuery} message BlocksQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlocksQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.depth = 0;\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                object.depth = message.depth;\n            return object;\n        };\n\n        /**\n         * Converts this BlocksQuery to JSON.\n         * @function toJSON\n         * @memberof casper.BlocksQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlocksQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlocksQuery;\n    })();\n\n    casper.BlocksQueryByHeight = (function() {\n\n        /**\n         * Properties of a BlocksQueryByHeight.\n         * @memberof casper\n         * @interface IBlocksQueryByHeight\n         * @property {number|Long|null} [startBlockNumber] BlocksQueryByHeight startBlockNumber\n         * @property {number|Long|null} [endBlockNumber] BlocksQueryByHeight endBlockNumber\n         */\n\n        /**\n         * Constructs a new BlocksQueryByHeight.\n         * @memberof casper\n         * @classdesc Represents a BlocksQueryByHeight.\n         * @implements IBlocksQueryByHeight\n         * @constructor\n         * @param {casper.IBlocksQueryByHeight=} [properties] Properties to set\n         */\n        function BlocksQueryByHeight(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlocksQueryByHeight startBlockNumber.\n         * @member {number|Long} startBlockNumber\n         * @memberof casper.BlocksQueryByHeight\n         * @instance\n         */\n        BlocksQueryByHeight.prototype.startBlockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * BlocksQueryByHeight endBlockNumber.\n         * @member {number|Long} endBlockNumber\n         * @memberof casper.BlocksQueryByHeight\n         * @instance\n         */\n        BlocksQueryByHeight.prototype.endBlockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new BlocksQueryByHeight instance using the specified properties.\n         * @function create\n         * @memberof casper.BlocksQueryByHeight\n         * @static\n         * @param {casper.IBlocksQueryByHeight=} [properties] Properties to set\n         * @returns {casper.BlocksQueryByHeight} BlocksQueryByHeight instance\n         */\n        BlocksQueryByHeight.create = function create(properties) {\n            return new BlocksQueryByHeight(properties);\n        };\n\n        /**\n         * Encodes the specified BlocksQueryByHeight message. Does not implicitly {@link casper.BlocksQueryByHeight.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlocksQueryByHeight\n         * @static\n         * @param {casper.IBlocksQueryByHeight} message BlocksQueryByHeight message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlocksQueryByHeight.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.startBlockNumber != null && message.hasOwnProperty(\"startBlockNumber\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.startBlockNumber);\n            if (message.endBlockNumber != null && message.hasOwnProperty(\"endBlockNumber\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.endBlockNumber);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlocksQueryByHeight message, length delimited. Does not implicitly {@link casper.BlocksQueryByHeight.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlocksQueryByHeight\n         * @static\n         * @param {casper.IBlocksQueryByHeight} message BlocksQueryByHeight message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlocksQueryByHeight.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlocksQueryByHeight message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlocksQueryByHeight\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlocksQueryByHeight} BlocksQueryByHeight\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlocksQueryByHeight.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlocksQueryByHeight();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.startBlockNumber = reader.int64();\n                    break;\n                case 2:\n                    message.endBlockNumber = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlocksQueryByHeight message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlocksQueryByHeight\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlocksQueryByHeight} BlocksQueryByHeight\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlocksQueryByHeight.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlocksQueryByHeight message.\n         * @function verify\n         * @memberof casper.BlocksQueryByHeight\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlocksQueryByHeight.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.startBlockNumber != null && message.hasOwnProperty(\"startBlockNumber\"))\n                if (!$util.isInteger(message.startBlockNumber) && !(message.startBlockNumber && $util.isInteger(message.startBlockNumber.low) && $util.isInteger(message.startBlockNumber.high)))\n                    return \"startBlockNumber: integer|Long expected\";\n            if (message.endBlockNumber != null && message.hasOwnProperty(\"endBlockNumber\"))\n                if (!$util.isInteger(message.endBlockNumber) && !(message.endBlockNumber && $util.isInteger(message.endBlockNumber.low) && $util.isInteger(message.endBlockNumber.high)))\n                    return \"endBlockNumber: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BlocksQueryByHeight message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlocksQueryByHeight\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlocksQueryByHeight} BlocksQueryByHeight\n         */\n        BlocksQueryByHeight.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlocksQueryByHeight)\n                return object;\n            var message = new $root.casper.BlocksQueryByHeight();\n            if (object.startBlockNumber != null)\n                if ($util.Long)\n                    (message.startBlockNumber = $util.Long.fromValue(object.startBlockNumber)).unsigned = false;\n                else if (typeof object.startBlockNumber === \"string\")\n                    message.startBlockNumber = parseInt(object.startBlockNumber, 10);\n                else if (typeof object.startBlockNumber === \"number\")\n                    message.startBlockNumber = object.startBlockNumber;\n                else if (typeof object.startBlockNumber === \"object\")\n                    message.startBlockNumber = new $util.LongBits(object.startBlockNumber.low >>> 0, object.startBlockNumber.high >>> 0).toNumber();\n            if (object.endBlockNumber != null)\n                if ($util.Long)\n                    (message.endBlockNumber = $util.Long.fromValue(object.endBlockNumber)).unsigned = false;\n                else if (typeof object.endBlockNumber === \"string\")\n                    message.endBlockNumber = parseInt(object.endBlockNumber, 10);\n                else if (typeof object.endBlockNumber === \"number\")\n                    message.endBlockNumber = object.endBlockNumber;\n                else if (typeof object.endBlockNumber === \"object\")\n                    message.endBlockNumber = new $util.LongBits(object.endBlockNumber.low >>> 0, object.endBlockNumber.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlocksQueryByHeight message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlocksQueryByHeight\n         * @static\n         * @param {casper.BlocksQueryByHeight} message BlocksQueryByHeight\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlocksQueryByHeight.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.startBlockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.startBlockNumber = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.endBlockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.endBlockNumber = options.longs === String ? \"0\" : 0;\n            }\n            if (message.startBlockNumber != null && message.hasOwnProperty(\"startBlockNumber\"))\n                if (typeof message.startBlockNumber === \"number\")\n                    object.startBlockNumber = options.longs === String ? String(message.startBlockNumber) : message.startBlockNumber;\n                else\n                    object.startBlockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.startBlockNumber) : options.longs === Number ? new $util.LongBits(message.startBlockNumber.low >>> 0, message.startBlockNumber.high >>> 0).toNumber() : message.startBlockNumber;\n            if (message.endBlockNumber != null && message.hasOwnProperty(\"endBlockNumber\"))\n                if (typeof message.endBlockNumber === \"number\")\n                    object.endBlockNumber = options.longs === String ? String(message.endBlockNumber) : message.endBlockNumber;\n                else\n                    object.endBlockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.endBlockNumber) : options.longs === Number ? new $util.LongBits(message.endBlockNumber.low >>> 0, message.endBlockNumber.high >>> 0).toNumber() : message.endBlockNumber;\n            return object;\n        };\n\n        /**\n         * Converts this BlocksQueryByHeight to JSON.\n         * @function toJSON\n         * @memberof casper.BlocksQueryByHeight\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlocksQueryByHeight.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlocksQueryByHeight;\n    })();\n\n    casper.DataAtNameQuery = (function() {\n\n        /**\n         * Properties of a DataAtNameQuery.\n         * @memberof casper\n         * @interface IDataAtNameQuery\n         * @property {number|null} [depth] DataAtNameQuery depth\n         * @property {IPar|null} [name] DataAtNameQuery name\n         */\n\n        /**\n         * Constructs a new DataAtNameQuery.\n         * @memberof casper\n         * @classdesc Represents a DataAtNameQuery.\n         * @implements IDataAtNameQuery\n         * @constructor\n         * @param {casper.IDataAtNameQuery=} [properties] Properties to set\n         */\n        function DataAtNameQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DataAtNameQuery depth.\n         * @member {number} depth\n         * @memberof casper.DataAtNameQuery\n         * @instance\n         */\n        DataAtNameQuery.prototype.depth = 0;\n\n        /**\n         * DataAtNameQuery name.\n         * @member {IPar|null|undefined} name\n         * @memberof casper.DataAtNameQuery\n         * @instance\n         */\n        DataAtNameQuery.prototype.name = null;\n\n        /**\n         * Creates a new DataAtNameQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.DataAtNameQuery\n         * @static\n         * @param {casper.IDataAtNameQuery=} [properties] Properties to set\n         * @returns {casper.DataAtNameQuery} DataAtNameQuery instance\n         */\n        DataAtNameQuery.create = function create(properties) {\n            return new DataAtNameQuery(properties);\n        };\n\n        /**\n         * Encodes the specified DataAtNameQuery message. Does not implicitly {@link casper.DataAtNameQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.DataAtNameQuery\n         * @static\n         * @param {casper.IDataAtNameQuery} message DataAtNameQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DataAtNameQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.depth);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                $root.Par.encode(message.name, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DataAtNameQuery message, length delimited. Does not implicitly {@link casper.DataAtNameQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.DataAtNameQuery\n         * @static\n         * @param {casper.IDataAtNameQuery} message DataAtNameQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DataAtNameQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DataAtNameQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.DataAtNameQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.DataAtNameQuery} DataAtNameQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DataAtNameQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DataAtNameQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.depth = reader.int32();\n                    break;\n                case 2:\n                    message.name = $root.Par.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DataAtNameQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.DataAtNameQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.DataAtNameQuery} DataAtNameQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DataAtNameQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DataAtNameQuery message.\n         * @function verify\n         * @memberof casper.DataAtNameQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DataAtNameQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                if (!$util.isInteger(message.depth))\n                    return \"depth: integer expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\")) {\n                var error = $root.Par.verify(message.name);\n                if (error)\n                    return \"name.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DataAtNameQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.DataAtNameQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.DataAtNameQuery} DataAtNameQuery\n         */\n        DataAtNameQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.DataAtNameQuery)\n                return object;\n            var message = new $root.casper.DataAtNameQuery();\n            if (object.depth != null)\n                message.depth = object.depth | 0;\n            if (object.name != null) {\n                if (typeof object.name !== \"object\")\n                    throw TypeError(\".casper.DataAtNameQuery.name: object expected\");\n                message.name = $root.Par.fromObject(object.name);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DataAtNameQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.DataAtNameQuery\n         * @static\n         * @param {casper.DataAtNameQuery} message DataAtNameQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DataAtNameQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.depth = 0;\n                object.name = null;\n            }\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                object.depth = message.depth;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = $root.Par.toObject(message.name, options);\n            return object;\n        };\n\n        /**\n         * Converts this DataAtNameQuery to JSON.\n         * @function toJSON\n         * @memberof casper.DataAtNameQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DataAtNameQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DataAtNameQuery;\n    })();\n\n    casper.ContinuationAtNameQuery = (function() {\n\n        /**\n         * Properties of a ContinuationAtNameQuery.\n         * @memberof casper\n         * @interface IContinuationAtNameQuery\n         * @property {number|null} [depth] ContinuationAtNameQuery depth\n         * @property {Array.<IPar>|null} [names] ContinuationAtNameQuery names\n         */\n\n        /**\n         * Constructs a new ContinuationAtNameQuery.\n         * @memberof casper\n         * @classdesc Represents a ContinuationAtNameQuery.\n         * @implements IContinuationAtNameQuery\n         * @constructor\n         * @param {casper.IContinuationAtNameQuery=} [properties] Properties to set\n         */\n        function ContinuationAtNameQuery(properties) {\n            this.names = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ContinuationAtNameQuery depth.\n         * @member {number} depth\n         * @memberof casper.ContinuationAtNameQuery\n         * @instance\n         */\n        ContinuationAtNameQuery.prototype.depth = 0;\n\n        /**\n         * ContinuationAtNameQuery names.\n         * @member {Array.<IPar>} names\n         * @memberof casper.ContinuationAtNameQuery\n         * @instance\n         */\n        ContinuationAtNameQuery.prototype.names = $util.emptyArray;\n\n        /**\n         * Creates a new ContinuationAtNameQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.ContinuationAtNameQuery\n         * @static\n         * @param {casper.IContinuationAtNameQuery=} [properties] Properties to set\n         * @returns {casper.ContinuationAtNameQuery} ContinuationAtNameQuery instance\n         */\n        ContinuationAtNameQuery.create = function create(properties) {\n            return new ContinuationAtNameQuery(properties);\n        };\n\n        /**\n         * Encodes the specified ContinuationAtNameQuery message. Does not implicitly {@link casper.ContinuationAtNameQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ContinuationAtNameQuery\n         * @static\n         * @param {casper.IContinuationAtNameQuery} message ContinuationAtNameQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContinuationAtNameQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.depth);\n            if (message.names != null && message.names.length)\n                for (var i = 0; i < message.names.length; ++i)\n                    $root.Par.encode(message.names[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ContinuationAtNameQuery message, length delimited. Does not implicitly {@link casper.ContinuationAtNameQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ContinuationAtNameQuery\n         * @static\n         * @param {casper.IContinuationAtNameQuery} message ContinuationAtNameQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContinuationAtNameQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ContinuationAtNameQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ContinuationAtNameQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ContinuationAtNameQuery} ContinuationAtNameQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContinuationAtNameQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ContinuationAtNameQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.depth = reader.int32();\n                    break;\n                case 2:\n                    if (!(message.names && message.names.length))\n                        message.names = [];\n                    message.names.push($root.Par.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ContinuationAtNameQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ContinuationAtNameQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ContinuationAtNameQuery} ContinuationAtNameQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContinuationAtNameQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ContinuationAtNameQuery message.\n         * @function verify\n         * @memberof casper.ContinuationAtNameQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ContinuationAtNameQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                if (!$util.isInteger(message.depth))\n                    return \"depth: integer expected\";\n            if (message.names != null && message.hasOwnProperty(\"names\")) {\n                if (!Array.isArray(message.names))\n                    return \"names: array expected\";\n                for (var i = 0; i < message.names.length; ++i) {\n                    var error = $root.Par.verify(message.names[i]);\n                    if (error)\n                        return \"names.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ContinuationAtNameQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ContinuationAtNameQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ContinuationAtNameQuery} ContinuationAtNameQuery\n         */\n        ContinuationAtNameQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ContinuationAtNameQuery)\n                return object;\n            var message = new $root.casper.ContinuationAtNameQuery();\n            if (object.depth != null)\n                message.depth = object.depth | 0;\n            if (object.names) {\n                if (!Array.isArray(object.names))\n                    throw TypeError(\".casper.ContinuationAtNameQuery.names: array expected\");\n                message.names = [];\n                for (var i = 0; i < object.names.length; ++i) {\n                    if (typeof object.names[i] !== \"object\")\n                        throw TypeError(\".casper.ContinuationAtNameQuery.names: object expected\");\n                    message.names[i] = $root.Par.fromObject(object.names[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ContinuationAtNameQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ContinuationAtNameQuery\n         * @static\n         * @param {casper.ContinuationAtNameQuery} message ContinuationAtNameQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ContinuationAtNameQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.names = [];\n            if (options.defaults)\n                object.depth = 0;\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                object.depth = message.depth;\n            if (message.names && message.names.length) {\n                object.names = [];\n                for (var j = 0; j < message.names.length; ++j)\n                    object.names[j] = $root.Par.toObject(message.names[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ContinuationAtNameQuery to JSON.\n         * @function toJSON\n         * @memberof casper.ContinuationAtNameQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ContinuationAtNameQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ContinuationAtNameQuery;\n    })();\n\n    casper.VisualizeDagQuery = (function() {\n\n        /**\n         * Properties of a VisualizeDagQuery.\n         * @memberof casper\n         * @interface IVisualizeDagQuery\n         * @property {number|null} [depth] VisualizeDagQuery depth\n         * @property {boolean|null} [showJustificationLines] VisualizeDagQuery showJustificationLines\n         * @property {number|null} [startBlockNumber] VisualizeDagQuery startBlockNumber\n         */\n\n        /**\n         * Constructs a new VisualizeDagQuery.\n         * @memberof casper\n         * @classdesc Represents a VisualizeDagQuery.\n         * @implements IVisualizeDagQuery\n         * @constructor\n         * @param {casper.IVisualizeDagQuery=} [properties] Properties to set\n         */\n        function VisualizeDagQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * VisualizeDagQuery depth.\n         * @member {number} depth\n         * @memberof casper.VisualizeDagQuery\n         * @instance\n         */\n        VisualizeDagQuery.prototype.depth = 0;\n\n        /**\n         * VisualizeDagQuery showJustificationLines.\n         * @member {boolean} showJustificationLines\n         * @memberof casper.VisualizeDagQuery\n         * @instance\n         */\n        VisualizeDagQuery.prototype.showJustificationLines = false;\n\n        /**\n         * VisualizeDagQuery startBlockNumber.\n         * @member {number} startBlockNumber\n         * @memberof casper.VisualizeDagQuery\n         * @instance\n         */\n        VisualizeDagQuery.prototype.startBlockNumber = 0;\n\n        /**\n         * Creates a new VisualizeDagQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.VisualizeDagQuery\n         * @static\n         * @param {casper.IVisualizeDagQuery=} [properties] Properties to set\n         * @returns {casper.VisualizeDagQuery} VisualizeDagQuery instance\n         */\n        VisualizeDagQuery.create = function create(properties) {\n            return new VisualizeDagQuery(properties);\n        };\n\n        /**\n         * Encodes the specified VisualizeDagQuery message. Does not implicitly {@link casper.VisualizeDagQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.VisualizeDagQuery\n         * @static\n         * @param {casper.IVisualizeDagQuery} message VisualizeDagQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        VisualizeDagQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.depth);\n            if (message.showJustificationLines != null && message.hasOwnProperty(\"showJustificationLines\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.showJustificationLines);\n            if (message.startBlockNumber != null && message.hasOwnProperty(\"startBlockNumber\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.startBlockNumber);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified VisualizeDagQuery message, length delimited. Does not implicitly {@link casper.VisualizeDagQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.VisualizeDagQuery\n         * @static\n         * @param {casper.IVisualizeDagQuery} message VisualizeDagQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        VisualizeDagQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a VisualizeDagQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.VisualizeDagQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.VisualizeDagQuery} VisualizeDagQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        VisualizeDagQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.VisualizeDagQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.depth = reader.int32();\n                    break;\n                case 2:\n                    message.showJustificationLines = reader.bool();\n                    break;\n                case 3:\n                    message.startBlockNumber = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a VisualizeDagQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.VisualizeDagQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.VisualizeDagQuery} VisualizeDagQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        VisualizeDagQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a VisualizeDagQuery message.\n         * @function verify\n         * @memberof casper.VisualizeDagQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        VisualizeDagQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                if (!$util.isInteger(message.depth))\n                    return \"depth: integer expected\";\n            if (message.showJustificationLines != null && message.hasOwnProperty(\"showJustificationLines\"))\n                if (typeof message.showJustificationLines !== \"boolean\")\n                    return \"showJustificationLines: boolean expected\";\n            if (message.startBlockNumber != null && message.hasOwnProperty(\"startBlockNumber\"))\n                if (!$util.isInteger(message.startBlockNumber))\n                    return \"startBlockNumber: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a VisualizeDagQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.VisualizeDagQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.VisualizeDagQuery} VisualizeDagQuery\n         */\n        VisualizeDagQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.VisualizeDagQuery)\n                return object;\n            var message = new $root.casper.VisualizeDagQuery();\n            if (object.depth != null)\n                message.depth = object.depth | 0;\n            if (object.showJustificationLines != null)\n                message.showJustificationLines = Boolean(object.showJustificationLines);\n            if (object.startBlockNumber != null)\n                message.startBlockNumber = object.startBlockNumber | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a VisualizeDagQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.VisualizeDagQuery\n         * @static\n         * @param {casper.VisualizeDagQuery} message VisualizeDagQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        VisualizeDagQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.depth = 0;\n                object.showJustificationLines = false;\n                object.startBlockNumber = 0;\n            }\n            if (message.depth != null && message.hasOwnProperty(\"depth\"))\n                object.depth = message.depth;\n            if (message.showJustificationLines != null && message.hasOwnProperty(\"showJustificationLines\"))\n                object.showJustificationLines = message.showJustificationLines;\n            if (message.startBlockNumber != null && message.hasOwnProperty(\"startBlockNumber\"))\n                object.startBlockNumber = message.startBlockNumber;\n            return object;\n        };\n\n        /**\n         * Converts this VisualizeDagQuery to JSON.\n         * @function toJSON\n         * @memberof casper.VisualizeDagQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        VisualizeDagQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return VisualizeDagQuery;\n    })();\n\n    casper.MachineVerifyQuery = (function() {\n\n        /**\n         * Properties of a MachineVerifyQuery.\n         * @memberof casper\n         * @interface IMachineVerifyQuery\n         */\n\n        /**\n         * Constructs a new MachineVerifyQuery.\n         * @memberof casper\n         * @classdesc Represents a MachineVerifyQuery.\n         * @implements IMachineVerifyQuery\n         * @constructor\n         * @param {casper.IMachineVerifyQuery=} [properties] Properties to set\n         */\n        function MachineVerifyQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new MachineVerifyQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.MachineVerifyQuery\n         * @static\n         * @param {casper.IMachineVerifyQuery=} [properties] Properties to set\n         * @returns {casper.MachineVerifyQuery} MachineVerifyQuery instance\n         */\n        MachineVerifyQuery.create = function create(properties) {\n            return new MachineVerifyQuery(properties);\n        };\n\n        /**\n         * Encodes the specified MachineVerifyQuery message. Does not implicitly {@link casper.MachineVerifyQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.MachineVerifyQuery\n         * @static\n         * @param {casper.IMachineVerifyQuery} message MachineVerifyQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MachineVerifyQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified MachineVerifyQuery message, length delimited. Does not implicitly {@link casper.MachineVerifyQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.MachineVerifyQuery\n         * @static\n         * @param {casper.IMachineVerifyQuery} message MachineVerifyQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MachineVerifyQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a MachineVerifyQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.MachineVerifyQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.MachineVerifyQuery} MachineVerifyQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MachineVerifyQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.MachineVerifyQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a MachineVerifyQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.MachineVerifyQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.MachineVerifyQuery} MachineVerifyQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MachineVerifyQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a MachineVerifyQuery message.\n         * @function verify\n         * @memberof casper.MachineVerifyQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        MachineVerifyQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a MachineVerifyQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.MachineVerifyQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.MachineVerifyQuery} MachineVerifyQuery\n         */\n        MachineVerifyQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.MachineVerifyQuery)\n                return object;\n            return new $root.casper.MachineVerifyQuery();\n        };\n\n        /**\n         * Creates a plain object from a MachineVerifyQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.MachineVerifyQuery\n         * @static\n         * @param {casper.MachineVerifyQuery} message MachineVerifyQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        MachineVerifyQuery.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this MachineVerifyQuery to JSON.\n         * @function toJSON\n         * @memberof casper.MachineVerifyQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        MachineVerifyQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return MachineVerifyQuery;\n    })();\n\n    casper.PrivateNamePreviewQuery = (function() {\n\n        /**\n         * Properties of a PrivateNamePreviewQuery.\n         * @memberof casper\n         * @interface IPrivateNamePreviewQuery\n         * @property {Uint8Array|null} [user] PrivateNamePreviewQuery user\n         * @property {number|Long|null} [timestamp] PrivateNamePreviewQuery timestamp\n         * @property {number|null} [nameQty] PrivateNamePreviewQuery nameQty\n         */\n\n        /**\n         * Constructs a new PrivateNamePreviewQuery.\n         * @memberof casper\n         * @classdesc Represents a PrivateNamePreviewQuery.\n         * @implements IPrivateNamePreviewQuery\n         * @constructor\n         * @param {casper.IPrivateNamePreviewQuery=} [properties] Properties to set\n         */\n        function PrivateNamePreviewQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PrivateNamePreviewQuery user.\n         * @member {Uint8Array} user\n         * @memberof casper.PrivateNamePreviewQuery\n         * @instance\n         */\n        PrivateNamePreviewQuery.prototype.user = $util.newBuffer([]);\n\n        /**\n         * PrivateNamePreviewQuery timestamp.\n         * @member {number|Long} timestamp\n         * @memberof casper.PrivateNamePreviewQuery\n         * @instance\n         */\n        PrivateNamePreviewQuery.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * PrivateNamePreviewQuery nameQty.\n         * @member {number} nameQty\n         * @memberof casper.PrivateNamePreviewQuery\n         * @instance\n         */\n        PrivateNamePreviewQuery.prototype.nameQty = 0;\n\n        /**\n         * Creates a new PrivateNamePreviewQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.PrivateNamePreviewQuery\n         * @static\n         * @param {casper.IPrivateNamePreviewQuery=} [properties] Properties to set\n         * @returns {casper.PrivateNamePreviewQuery} PrivateNamePreviewQuery instance\n         */\n        PrivateNamePreviewQuery.create = function create(properties) {\n            return new PrivateNamePreviewQuery(properties);\n        };\n\n        /**\n         * Encodes the specified PrivateNamePreviewQuery message. Does not implicitly {@link casper.PrivateNamePreviewQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.PrivateNamePreviewQuery\n         * @static\n         * @param {casper.IPrivateNamePreviewQuery} message PrivateNamePreviewQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PrivateNamePreviewQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.user != null && message.hasOwnProperty(\"user\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.user);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.timestamp);\n            if (message.nameQty != null && message.hasOwnProperty(\"nameQty\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nameQty);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PrivateNamePreviewQuery message, length delimited. Does not implicitly {@link casper.PrivateNamePreviewQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.PrivateNamePreviewQuery\n         * @static\n         * @param {casper.IPrivateNamePreviewQuery} message PrivateNamePreviewQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PrivateNamePreviewQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PrivateNamePreviewQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.PrivateNamePreviewQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.PrivateNamePreviewQuery} PrivateNamePreviewQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PrivateNamePreviewQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.PrivateNamePreviewQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.user = reader.bytes();\n                    break;\n                case 2:\n                    message.timestamp = reader.int64();\n                    break;\n                case 3:\n                    message.nameQty = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PrivateNamePreviewQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.PrivateNamePreviewQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.PrivateNamePreviewQuery} PrivateNamePreviewQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PrivateNamePreviewQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PrivateNamePreviewQuery message.\n         * @function verify\n         * @memberof casper.PrivateNamePreviewQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PrivateNamePreviewQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.user != null && message.hasOwnProperty(\"user\"))\n                if (!(message.user && typeof message.user.length === \"number\" || $util.isString(message.user)))\n                    return \"user: buffer expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            if (message.nameQty != null && message.hasOwnProperty(\"nameQty\"))\n                if (!$util.isInteger(message.nameQty))\n                    return \"nameQty: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PrivateNamePreviewQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.PrivateNamePreviewQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.PrivateNamePreviewQuery} PrivateNamePreviewQuery\n         */\n        PrivateNamePreviewQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.PrivateNamePreviewQuery)\n                return object;\n            var message = new $root.casper.PrivateNamePreviewQuery();\n            if (object.user != null)\n                if (typeof object.user === \"string\")\n                    $util.base64.decode(object.user, message.user = $util.newBuffer($util.base64.length(object.user)), 0);\n                else if (object.user.length)\n                    message.user = object.user;\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n            if (object.nameQty != null)\n                message.nameQty = object.nameQty | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PrivateNamePreviewQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.PrivateNamePreviewQuery\n         * @static\n         * @param {casper.PrivateNamePreviewQuery} message PrivateNamePreviewQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PrivateNamePreviewQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.user = \"\";\n                else {\n                    object.user = [];\n                    if (options.bytes !== Array)\n                        object.user = $util.newBuffer(object.user);\n                }\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n                object.nameQty = 0;\n            }\n            if (message.user != null && message.hasOwnProperty(\"user\"))\n                object.user = options.bytes === String ? $util.base64.encode(message.user, 0, message.user.length) : options.bytes === Array ? Array.prototype.slice.call(message.user) : message.user;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n            if (message.nameQty != null && message.hasOwnProperty(\"nameQty\"))\n                object.nameQty = message.nameQty;\n            return object;\n        };\n\n        /**\n         * Converts this PrivateNamePreviewQuery to JSON.\n         * @function toJSON\n         * @memberof casper.PrivateNamePreviewQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PrivateNamePreviewQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PrivateNamePreviewQuery;\n    })();\n\n    casper.LastFinalizedBlockQuery = (function() {\n\n        /**\n         * Properties of a LastFinalizedBlockQuery.\n         * @memberof casper\n         * @interface ILastFinalizedBlockQuery\n         */\n\n        /**\n         * Constructs a new LastFinalizedBlockQuery.\n         * @memberof casper\n         * @classdesc Represents a LastFinalizedBlockQuery.\n         * @implements ILastFinalizedBlockQuery\n         * @constructor\n         * @param {casper.ILastFinalizedBlockQuery=} [properties] Properties to set\n         */\n        function LastFinalizedBlockQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new LastFinalizedBlockQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.LastFinalizedBlockQuery\n         * @static\n         * @param {casper.ILastFinalizedBlockQuery=} [properties] Properties to set\n         * @returns {casper.LastFinalizedBlockQuery} LastFinalizedBlockQuery instance\n         */\n        LastFinalizedBlockQuery.create = function create(properties) {\n            return new LastFinalizedBlockQuery(properties);\n        };\n\n        /**\n         * Encodes the specified LastFinalizedBlockQuery message. Does not implicitly {@link casper.LastFinalizedBlockQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.LastFinalizedBlockQuery\n         * @static\n         * @param {casper.ILastFinalizedBlockQuery} message LastFinalizedBlockQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LastFinalizedBlockQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LastFinalizedBlockQuery message, length delimited. Does not implicitly {@link casper.LastFinalizedBlockQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.LastFinalizedBlockQuery\n         * @static\n         * @param {casper.ILastFinalizedBlockQuery} message LastFinalizedBlockQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LastFinalizedBlockQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LastFinalizedBlockQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.LastFinalizedBlockQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.LastFinalizedBlockQuery} LastFinalizedBlockQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LastFinalizedBlockQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.LastFinalizedBlockQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LastFinalizedBlockQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.LastFinalizedBlockQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.LastFinalizedBlockQuery} LastFinalizedBlockQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LastFinalizedBlockQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LastFinalizedBlockQuery message.\n         * @function verify\n         * @memberof casper.LastFinalizedBlockQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LastFinalizedBlockQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a LastFinalizedBlockQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.LastFinalizedBlockQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.LastFinalizedBlockQuery} LastFinalizedBlockQuery\n         */\n        LastFinalizedBlockQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.LastFinalizedBlockQuery)\n                return object;\n            return new $root.casper.LastFinalizedBlockQuery();\n        };\n\n        /**\n         * Creates a plain object from a LastFinalizedBlockQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.LastFinalizedBlockQuery\n         * @static\n         * @param {casper.LastFinalizedBlockQuery} message LastFinalizedBlockQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LastFinalizedBlockQuery.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this LastFinalizedBlockQuery to JSON.\n         * @function toJSON\n         * @memberof casper.LastFinalizedBlockQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LastFinalizedBlockQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LastFinalizedBlockQuery;\n    })();\n\n    casper.IsFinalizedQuery = (function() {\n\n        /**\n         * Properties of an IsFinalizedQuery.\n         * @memberof casper\n         * @interface IIsFinalizedQuery\n         * @property {string|null} [hash] IsFinalizedQuery hash\n         */\n\n        /**\n         * Constructs a new IsFinalizedQuery.\n         * @memberof casper\n         * @classdesc Represents an IsFinalizedQuery.\n         * @implements IIsFinalizedQuery\n         * @constructor\n         * @param {casper.IIsFinalizedQuery=} [properties] Properties to set\n         */\n        function IsFinalizedQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * IsFinalizedQuery hash.\n         * @member {string} hash\n         * @memberof casper.IsFinalizedQuery\n         * @instance\n         */\n        IsFinalizedQuery.prototype.hash = \"\";\n\n        /**\n         * Creates a new IsFinalizedQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.IsFinalizedQuery\n         * @static\n         * @param {casper.IIsFinalizedQuery=} [properties] Properties to set\n         * @returns {casper.IsFinalizedQuery} IsFinalizedQuery instance\n         */\n        IsFinalizedQuery.create = function create(properties) {\n            return new IsFinalizedQuery(properties);\n        };\n\n        /**\n         * Encodes the specified IsFinalizedQuery message. Does not implicitly {@link casper.IsFinalizedQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.IsFinalizedQuery\n         * @static\n         * @param {casper.IIsFinalizedQuery} message IsFinalizedQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        IsFinalizedQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified IsFinalizedQuery message, length delimited. Does not implicitly {@link casper.IsFinalizedQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.IsFinalizedQuery\n         * @static\n         * @param {casper.IIsFinalizedQuery} message IsFinalizedQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        IsFinalizedQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an IsFinalizedQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.IsFinalizedQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.IsFinalizedQuery} IsFinalizedQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        IsFinalizedQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.IsFinalizedQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.hash = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an IsFinalizedQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.IsFinalizedQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.IsFinalizedQuery} IsFinalizedQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        IsFinalizedQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an IsFinalizedQuery message.\n         * @function verify\n         * @memberof casper.IsFinalizedQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        IsFinalizedQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                if (!$util.isString(message.hash))\n                    return \"hash: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an IsFinalizedQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.IsFinalizedQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.IsFinalizedQuery} IsFinalizedQuery\n         */\n        IsFinalizedQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.IsFinalizedQuery)\n                return object;\n            var message = new $root.casper.IsFinalizedQuery();\n            if (object.hash != null)\n                message.hash = String(object.hash);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an IsFinalizedQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.IsFinalizedQuery\n         * @static\n         * @param {casper.IsFinalizedQuery} message IsFinalizedQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        IsFinalizedQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.hash = \"\";\n            if (message.hash != null && message.hasOwnProperty(\"hash\"))\n                object.hash = message.hash;\n            return object;\n        };\n\n        /**\n         * Converts this IsFinalizedQuery to JSON.\n         * @function toJSON\n         * @memberof casper.IsFinalizedQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        IsFinalizedQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return IsFinalizedQuery;\n    })();\n\n    casper.BondStatusQuery = (function() {\n\n        /**\n         * Properties of a BondStatusQuery.\n         * @memberof casper\n         * @interface IBondStatusQuery\n         * @property {Uint8Array|null} [publicKey] BondStatusQuery publicKey\n         */\n\n        /**\n         * Constructs a new BondStatusQuery.\n         * @memberof casper\n         * @classdesc Represents a BondStatusQuery.\n         * @implements IBondStatusQuery\n         * @constructor\n         * @param {casper.IBondStatusQuery=} [properties] Properties to set\n         */\n        function BondStatusQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BondStatusQuery publicKey.\n         * @member {Uint8Array} publicKey\n         * @memberof casper.BondStatusQuery\n         * @instance\n         */\n        BondStatusQuery.prototype.publicKey = $util.newBuffer([]);\n\n        /**\n         * Creates a new BondStatusQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.BondStatusQuery\n         * @static\n         * @param {casper.IBondStatusQuery=} [properties] Properties to set\n         * @returns {casper.BondStatusQuery} BondStatusQuery instance\n         */\n        BondStatusQuery.create = function create(properties) {\n            return new BondStatusQuery(properties);\n        };\n\n        /**\n         * Encodes the specified BondStatusQuery message. Does not implicitly {@link casper.BondStatusQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BondStatusQuery\n         * @static\n         * @param {casper.IBondStatusQuery} message BondStatusQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BondStatusQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BondStatusQuery message, length delimited. Does not implicitly {@link casper.BondStatusQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BondStatusQuery\n         * @static\n         * @param {casper.IBondStatusQuery} message BondStatusQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BondStatusQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BondStatusQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BondStatusQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BondStatusQuery} BondStatusQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BondStatusQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BondStatusQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.publicKey = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BondStatusQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BondStatusQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BondStatusQuery} BondStatusQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BondStatusQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BondStatusQuery message.\n         * @function verify\n         * @memberof casper.BondStatusQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BondStatusQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n                if (!(message.publicKey && typeof message.publicKey.length === \"number\" || $util.isString(message.publicKey)))\n                    return \"publicKey: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BondStatusQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BondStatusQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BondStatusQuery} BondStatusQuery\n         */\n        BondStatusQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BondStatusQuery)\n                return object;\n            var message = new $root.casper.BondStatusQuery();\n            if (object.publicKey != null)\n                if (typeof object.publicKey === \"string\")\n                    $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);\n                else if (object.publicKey.length)\n                    message.publicKey = object.publicKey;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BondStatusQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BondStatusQuery\n         * @static\n         * @param {casper.BondStatusQuery} message BondStatusQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BondStatusQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.publicKey = \"\";\n                else {\n                    object.publicKey = [];\n                    if (options.bytes !== Array)\n                        object.publicKey = $util.newBuffer(object.publicKey);\n                }\n            if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n                object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;\n            return object;\n        };\n\n        /**\n         * Converts this BondStatusQuery to JSON.\n         * @function toJSON\n         * @memberof casper.BondStatusQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BondStatusQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BondStatusQuery;\n    })();\n\n    casper.ExploratoryDeployQuery = (function() {\n\n        /**\n         * Properties of an ExploratoryDeployQuery.\n         * @memberof casper\n         * @interface IExploratoryDeployQuery\n         * @property {string|null} [term] ExploratoryDeployQuery term\n         * @property {string|null} [blockHash] ExploratoryDeployQuery blockHash\n         * @property {boolean|null} [usePreStateHash] ExploratoryDeployQuery usePreStateHash\n         */\n\n        /**\n         * Constructs a new ExploratoryDeployQuery.\n         * @memberof casper\n         * @classdesc Represents an ExploratoryDeployQuery.\n         * @implements IExploratoryDeployQuery\n         * @constructor\n         * @param {casper.IExploratoryDeployQuery=} [properties] Properties to set\n         */\n        function ExploratoryDeployQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ExploratoryDeployQuery term.\n         * @member {string} term\n         * @memberof casper.ExploratoryDeployQuery\n         * @instance\n         */\n        ExploratoryDeployQuery.prototype.term = \"\";\n\n        /**\n         * ExploratoryDeployQuery blockHash.\n         * @member {string} blockHash\n         * @memberof casper.ExploratoryDeployQuery\n         * @instance\n         */\n        ExploratoryDeployQuery.prototype.blockHash = \"\";\n\n        /**\n         * ExploratoryDeployQuery usePreStateHash.\n         * @member {boolean} usePreStateHash\n         * @memberof casper.ExploratoryDeployQuery\n         * @instance\n         */\n        ExploratoryDeployQuery.prototype.usePreStateHash = false;\n\n        /**\n         * Creates a new ExploratoryDeployQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.ExploratoryDeployQuery\n         * @static\n         * @param {casper.IExploratoryDeployQuery=} [properties] Properties to set\n         * @returns {casper.ExploratoryDeployQuery} ExploratoryDeployQuery instance\n         */\n        ExploratoryDeployQuery.create = function create(properties) {\n            return new ExploratoryDeployQuery(properties);\n        };\n\n        /**\n         * Encodes the specified ExploratoryDeployQuery message. Does not implicitly {@link casper.ExploratoryDeployQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ExploratoryDeployQuery\n         * @static\n         * @param {casper.IExploratoryDeployQuery} message ExploratoryDeployQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExploratoryDeployQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.term != null && message.hasOwnProperty(\"term\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.term);\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.blockHash);\n            if (message.usePreStateHash != null && message.hasOwnProperty(\"usePreStateHash\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.usePreStateHash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ExploratoryDeployQuery message, length delimited. Does not implicitly {@link casper.ExploratoryDeployQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ExploratoryDeployQuery\n         * @static\n         * @param {casper.IExploratoryDeployQuery} message ExploratoryDeployQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ExploratoryDeployQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an ExploratoryDeployQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ExploratoryDeployQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ExploratoryDeployQuery} ExploratoryDeployQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExploratoryDeployQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ExploratoryDeployQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.term = reader.string();\n                    break;\n                case 2:\n                    message.blockHash = reader.string();\n                    break;\n                case 3:\n                    message.usePreStateHash = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an ExploratoryDeployQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ExploratoryDeployQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ExploratoryDeployQuery} ExploratoryDeployQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ExploratoryDeployQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an ExploratoryDeployQuery message.\n         * @function verify\n         * @memberof casper.ExploratoryDeployQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ExploratoryDeployQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.term != null && message.hasOwnProperty(\"term\"))\n                if (!$util.isString(message.term))\n                    return \"term: string expected\";\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                if (!$util.isString(message.blockHash))\n                    return \"blockHash: string expected\";\n            if (message.usePreStateHash != null && message.hasOwnProperty(\"usePreStateHash\"))\n                if (typeof message.usePreStateHash !== \"boolean\")\n                    return \"usePreStateHash: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates an ExploratoryDeployQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ExploratoryDeployQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ExploratoryDeployQuery} ExploratoryDeployQuery\n         */\n        ExploratoryDeployQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ExploratoryDeployQuery)\n                return object;\n            var message = new $root.casper.ExploratoryDeployQuery();\n            if (object.term != null)\n                message.term = String(object.term);\n            if (object.blockHash != null)\n                message.blockHash = String(object.blockHash);\n            if (object.usePreStateHash != null)\n                message.usePreStateHash = Boolean(object.usePreStateHash);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an ExploratoryDeployQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ExploratoryDeployQuery\n         * @static\n         * @param {casper.ExploratoryDeployQuery} message ExploratoryDeployQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ExploratoryDeployQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.term = \"\";\n                object.blockHash = \"\";\n                object.usePreStateHash = false;\n            }\n            if (message.term != null && message.hasOwnProperty(\"term\"))\n                object.term = message.term;\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                object.blockHash = message.blockHash;\n            if (message.usePreStateHash != null && message.hasOwnProperty(\"usePreStateHash\"))\n                object.usePreStateHash = message.usePreStateHash;\n            return object;\n        };\n\n        /**\n         * Converts this ExploratoryDeployQuery to JSON.\n         * @function toJSON\n         * @memberof casper.ExploratoryDeployQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ExploratoryDeployQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ExploratoryDeployQuery;\n    })();\n\n    casper.BondInfo = (function() {\n\n        /**\n         * Properties of a BondInfo.\n         * @memberof casper\n         * @interface IBondInfo\n         * @property {string|null} [validator] BondInfo validator\n         * @property {number|Long|null} [stake] BondInfo stake\n         */\n\n        /**\n         * Constructs a new BondInfo.\n         * @memberof casper\n         * @classdesc Represents a BondInfo.\n         * @implements IBondInfo\n         * @constructor\n         * @param {casper.IBondInfo=} [properties] Properties to set\n         */\n        function BondInfo(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BondInfo validator.\n         * @member {string} validator\n         * @memberof casper.BondInfo\n         * @instance\n         */\n        BondInfo.prototype.validator = \"\";\n\n        /**\n         * BondInfo stake.\n         * @member {number|Long} stake\n         * @memberof casper.BondInfo\n         * @instance\n         */\n        BondInfo.prototype.stake = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new BondInfo instance using the specified properties.\n         * @function create\n         * @memberof casper.BondInfo\n         * @static\n         * @param {casper.IBondInfo=} [properties] Properties to set\n         * @returns {casper.BondInfo} BondInfo instance\n         */\n        BondInfo.create = function create(properties) {\n            return new BondInfo(properties);\n        };\n\n        /**\n         * Encodes the specified BondInfo message. Does not implicitly {@link casper.BondInfo.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BondInfo\n         * @static\n         * @param {casper.IBondInfo} message BondInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BondInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator);\n            if (message.stake != null && message.hasOwnProperty(\"stake\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.stake);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BondInfo message, length delimited. Does not implicitly {@link casper.BondInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BondInfo\n         * @static\n         * @param {casper.IBondInfo} message BondInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BondInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BondInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BondInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BondInfo} BondInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BondInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BondInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.validator = reader.string();\n                    break;\n                case 2:\n                    message.stake = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BondInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BondInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BondInfo} BondInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BondInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BondInfo message.\n         * @function verify\n         * @memberof casper.BondInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BondInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                if (!$util.isString(message.validator))\n                    return \"validator: string expected\";\n            if (message.stake != null && message.hasOwnProperty(\"stake\"))\n                if (!$util.isInteger(message.stake) && !(message.stake && $util.isInteger(message.stake.low) && $util.isInteger(message.stake.high)))\n                    return \"stake: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a BondInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BondInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BondInfo} BondInfo\n         */\n        BondInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BondInfo)\n                return object;\n            var message = new $root.casper.BondInfo();\n            if (object.validator != null)\n                message.validator = String(object.validator);\n            if (object.stake != null)\n                if ($util.Long)\n                    (message.stake = $util.Long.fromValue(object.stake)).unsigned = false;\n                else if (typeof object.stake === \"string\")\n                    message.stake = parseInt(object.stake, 10);\n                else if (typeof object.stake === \"number\")\n                    message.stake = object.stake;\n                else if (typeof object.stake === \"object\")\n                    message.stake = new $util.LongBits(object.stake.low >>> 0, object.stake.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BondInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BondInfo\n         * @static\n         * @param {casper.BondInfo} message BondInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BondInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.validator = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.stake = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.stake = options.longs === String ? \"0\" : 0;\n            }\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                object.validator = message.validator;\n            if (message.stake != null && message.hasOwnProperty(\"stake\"))\n                if (typeof message.stake === \"number\")\n                    object.stake = options.longs === String ? String(message.stake) : message.stake;\n                else\n                    object.stake = options.longs === String ? $util.Long.prototype.toString.call(message.stake) : options.longs === Number ? new $util.LongBits(message.stake.low >>> 0, message.stake.high >>> 0).toNumber() : message.stake;\n            return object;\n        };\n\n        /**\n         * Converts this BondInfo to JSON.\n         * @function toJSON\n         * @memberof casper.BondInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BondInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BondInfo;\n    })();\n\n    casper.JustificationInfo = (function() {\n\n        /**\n         * Properties of a JustificationInfo.\n         * @memberof casper\n         * @interface IJustificationInfo\n         * @property {string|null} [validator] JustificationInfo validator\n         * @property {string|null} [latestBlockHash] JustificationInfo latestBlockHash\n         */\n\n        /**\n         * Constructs a new JustificationInfo.\n         * @memberof casper\n         * @classdesc Represents a JustificationInfo.\n         * @implements IJustificationInfo\n         * @constructor\n         * @param {casper.IJustificationInfo=} [properties] Properties to set\n         */\n        function JustificationInfo(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * JustificationInfo validator.\n         * @member {string} validator\n         * @memberof casper.JustificationInfo\n         * @instance\n         */\n        JustificationInfo.prototype.validator = \"\";\n\n        /**\n         * JustificationInfo latestBlockHash.\n         * @member {string} latestBlockHash\n         * @memberof casper.JustificationInfo\n         * @instance\n         */\n        JustificationInfo.prototype.latestBlockHash = \"\";\n\n        /**\n         * Creates a new JustificationInfo instance using the specified properties.\n         * @function create\n         * @memberof casper.JustificationInfo\n         * @static\n         * @param {casper.IJustificationInfo=} [properties] Properties to set\n         * @returns {casper.JustificationInfo} JustificationInfo instance\n         */\n        JustificationInfo.create = function create(properties) {\n            return new JustificationInfo(properties);\n        };\n\n        /**\n         * Encodes the specified JustificationInfo message. Does not implicitly {@link casper.JustificationInfo.verify|verify} messages.\n         * @function encode\n         * @memberof casper.JustificationInfo\n         * @static\n         * @param {casper.IJustificationInfo} message JustificationInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        JustificationInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.validator);\n            if (message.latestBlockHash != null && message.hasOwnProperty(\"latestBlockHash\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.latestBlockHash);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified JustificationInfo message, length delimited. Does not implicitly {@link casper.JustificationInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.JustificationInfo\n         * @static\n         * @param {casper.IJustificationInfo} message JustificationInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        JustificationInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a JustificationInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.JustificationInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.JustificationInfo} JustificationInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        JustificationInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.JustificationInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.validator = reader.string();\n                    break;\n                case 2:\n                    message.latestBlockHash = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a JustificationInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.JustificationInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.JustificationInfo} JustificationInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        JustificationInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a JustificationInfo message.\n         * @function verify\n         * @memberof casper.JustificationInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        JustificationInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                if (!$util.isString(message.validator))\n                    return \"validator: string expected\";\n            if (message.latestBlockHash != null && message.hasOwnProperty(\"latestBlockHash\"))\n                if (!$util.isString(message.latestBlockHash))\n                    return \"latestBlockHash: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a JustificationInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.JustificationInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.JustificationInfo} JustificationInfo\n         */\n        JustificationInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.JustificationInfo)\n                return object;\n            var message = new $root.casper.JustificationInfo();\n            if (object.validator != null)\n                message.validator = String(object.validator);\n            if (object.latestBlockHash != null)\n                message.latestBlockHash = String(object.latestBlockHash);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a JustificationInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.JustificationInfo\n         * @static\n         * @param {casper.JustificationInfo} message JustificationInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        JustificationInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.validator = \"\";\n                object.latestBlockHash = \"\";\n            }\n            if (message.validator != null && message.hasOwnProperty(\"validator\"))\n                object.validator = message.validator;\n            if (message.latestBlockHash != null && message.hasOwnProperty(\"latestBlockHash\"))\n                object.latestBlockHash = message.latestBlockHash;\n            return object;\n        };\n\n        /**\n         * Converts this JustificationInfo to JSON.\n         * @function toJSON\n         * @memberof casper.JustificationInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        JustificationInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return JustificationInfo;\n    })();\n\n    casper.DeployInfo = (function() {\n\n        /**\n         * Properties of a DeployInfo.\n         * @memberof casper\n         * @interface IDeployInfo\n         * @property {string|null} [deployer] DeployInfo deployer\n         * @property {string|null} [term] DeployInfo term\n         * @property {number|Long|null} [timestamp] DeployInfo timestamp\n         * @property {string|null} [sig] DeployInfo sig\n         * @property {string|null} [sigAlgorithm] DeployInfo sigAlgorithm\n         * @property {number|Long|null} [phloPrice] DeployInfo phloPrice\n         * @property {number|Long|null} [phloLimit] DeployInfo phloLimit\n         * @property {number|Long|null} [validAfterBlockNumber] DeployInfo validAfterBlockNumber\n         * @property {number|Long|null} [cost] DeployInfo cost\n         * @property {boolean|null} [errored] DeployInfo errored\n         * @property {string|null} [systemDeployError] DeployInfo systemDeployError\n         */\n\n        /**\n         * Constructs a new DeployInfo.\n         * @memberof casper\n         * @classdesc Represents a DeployInfo.\n         * @implements IDeployInfo\n         * @constructor\n         * @param {casper.IDeployInfo=} [properties] Properties to set\n         */\n        function DeployInfo(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DeployInfo deployer.\n         * @member {string} deployer\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.deployer = \"\";\n\n        /**\n         * DeployInfo term.\n         * @member {string} term\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.term = \"\";\n\n        /**\n         * DeployInfo timestamp.\n         * @member {number|Long} timestamp\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeployInfo sig.\n         * @member {string} sig\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.sig = \"\";\n\n        /**\n         * DeployInfo sigAlgorithm.\n         * @member {string} sigAlgorithm\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.sigAlgorithm = \"\";\n\n        /**\n         * DeployInfo phloPrice.\n         * @member {number|Long} phloPrice\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.phloPrice = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeployInfo phloLimit.\n         * @member {number|Long} phloLimit\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.phloLimit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeployInfo validAfterBlockNumber.\n         * @member {number|Long} validAfterBlockNumber\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.validAfterBlockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * DeployInfo cost.\n         * @member {number|Long} cost\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.cost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * DeployInfo errored.\n         * @member {boolean} errored\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.errored = false;\n\n        /**\n         * DeployInfo systemDeployError.\n         * @member {string} systemDeployError\n         * @memberof casper.DeployInfo\n         * @instance\n         */\n        DeployInfo.prototype.systemDeployError = \"\";\n\n        /**\n         * Creates a new DeployInfo instance using the specified properties.\n         * @function create\n         * @memberof casper.DeployInfo\n         * @static\n         * @param {casper.IDeployInfo=} [properties] Properties to set\n         * @returns {casper.DeployInfo} DeployInfo instance\n         */\n        DeployInfo.create = function create(properties) {\n            return new DeployInfo(properties);\n        };\n\n        /**\n         * Encodes the specified DeployInfo message. Does not implicitly {@link casper.DeployInfo.verify|verify} messages.\n         * @function encode\n         * @memberof casper.DeployInfo\n         * @static\n         * @param {casper.IDeployInfo} message DeployInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeployInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.deployer != null && message.hasOwnProperty(\"deployer\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.deployer);\n            if (message.term != null && message.hasOwnProperty(\"term\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.term);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.timestamp);\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.sig);\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.sigAlgorithm);\n            if (message.phloPrice != null && message.hasOwnProperty(\"phloPrice\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.phloPrice);\n            if (message.phloLimit != null && message.hasOwnProperty(\"phloLimit\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.phloLimit);\n            if (message.validAfterBlockNumber != null && message.hasOwnProperty(\"validAfterBlockNumber\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).int64(message.validAfterBlockNumber);\n            if (message.cost != null && message.hasOwnProperty(\"cost\"))\n                writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.cost);\n            if (message.errored != null && message.hasOwnProperty(\"errored\"))\n                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.errored);\n            if (message.systemDeployError != null && message.hasOwnProperty(\"systemDeployError\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.systemDeployError);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DeployInfo message, length delimited. Does not implicitly {@link casper.DeployInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.DeployInfo\n         * @static\n         * @param {casper.IDeployInfo} message DeployInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeployInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DeployInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.DeployInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.DeployInfo} DeployInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeployInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DeployInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.deployer = reader.string();\n                    break;\n                case 2:\n                    message.term = reader.string();\n                    break;\n                case 3:\n                    message.timestamp = reader.int64();\n                    break;\n                case 4:\n                    message.sig = reader.string();\n                    break;\n                case 5:\n                    message.sigAlgorithm = reader.string();\n                    break;\n                case 7:\n                    message.phloPrice = reader.int64();\n                    break;\n                case 8:\n                    message.phloLimit = reader.int64();\n                    break;\n                case 9:\n                    message.validAfterBlockNumber = reader.int64();\n                    break;\n                case 10:\n                    message.cost = reader.uint64();\n                    break;\n                case 11:\n                    message.errored = reader.bool();\n                    break;\n                case 12:\n                    message.systemDeployError = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DeployInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.DeployInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.DeployInfo} DeployInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeployInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DeployInfo message.\n         * @function verify\n         * @memberof casper.DeployInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DeployInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.deployer != null && message.hasOwnProperty(\"deployer\"))\n                if (!$util.isString(message.deployer))\n                    return \"deployer: string expected\";\n            if (message.term != null && message.hasOwnProperty(\"term\"))\n                if (!$util.isString(message.term))\n                    return \"term: string expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                if (!$util.isString(message.sig))\n                    return \"sig: string expected\";\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                if (!$util.isString(message.sigAlgorithm))\n                    return \"sigAlgorithm: string expected\";\n            if (message.phloPrice != null && message.hasOwnProperty(\"phloPrice\"))\n                if (!$util.isInteger(message.phloPrice) && !(message.phloPrice && $util.isInteger(message.phloPrice.low) && $util.isInteger(message.phloPrice.high)))\n                    return \"phloPrice: integer|Long expected\";\n            if (message.phloLimit != null && message.hasOwnProperty(\"phloLimit\"))\n                if (!$util.isInteger(message.phloLimit) && !(message.phloLimit && $util.isInteger(message.phloLimit.low) && $util.isInteger(message.phloLimit.high)))\n                    return \"phloLimit: integer|Long expected\";\n            if (message.validAfterBlockNumber != null && message.hasOwnProperty(\"validAfterBlockNumber\"))\n                if (!$util.isInteger(message.validAfterBlockNumber) && !(message.validAfterBlockNumber && $util.isInteger(message.validAfterBlockNumber.low) && $util.isInteger(message.validAfterBlockNumber.high)))\n                    return \"validAfterBlockNumber: integer|Long expected\";\n            if (message.cost != null && message.hasOwnProperty(\"cost\"))\n                if (!$util.isInteger(message.cost) && !(message.cost && $util.isInteger(message.cost.low) && $util.isInteger(message.cost.high)))\n                    return \"cost: integer|Long expected\";\n            if (message.errored != null && message.hasOwnProperty(\"errored\"))\n                if (typeof message.errored !== \"boolean\")\n                    return \"errored: boolean expected\";\n            if (message.systemDeployError != null && message.hasOwnProperty(\"systemDeployError\"))\n                if (!$util.isString(message.systemDeployError))\n                    return \"systemDeployError: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a DeployInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.DeployInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.DeployInfo} DeployInfo\n         */\n        DeployInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.DeployInfo)\n                return object;\n            var message = new $root.casper.DeployInfo();\n            if (object.deployer != null)\n                message.deployer = String(object.deployer);\n            if (object.term != null)\n                message.term = String(object.term);\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n            if (object.sig != null)\n                message.sig = String(object.sig);\n            if (object.sigAlgorithm != null)\n                message.sigAlgorithm = String(object.sigAlgorithm);\n            if (object.phloPrice != null)\n                if ($util.Long)\n                    (message.phloPrice = $util.Long.fromValue(object.phloPrice)).unsigned = false;\n                else if (typeof object.phloPrice === \"string\")\n                    message.phloPrice = parseInt(object.phloPrice, 10);\n                else if (typeof object.phloPrice === \"number\")\n                    message.phloPrice = object.phloPrice;\n                else if (typeof object.phloPrice === \"object\")\n                    message.phloPrice = new $util.LongBits(object.phloPrice.low >>> 0, object.phloPrice.high >>> 0).toNumber();\n            if (object.phloLimit != null)\n                if ($util.Long)\n                    (message.phloLimit = $util.Long.fromValue(object.phloLimit)).unsigned = false;\n                else if (typeof object.phloLimit === \"string\")\n                    message.phloLimit = parseInt(object.phloLimit, 10);\n                else if (typeof object.phloLimit === \"number\")\n                    message.phloLimit = object.phloLimit;\n                else if (typeof object.phloLimit === \"object\")\n                    message.phloLimit = new $util.LongBits(object.phloLimit.low >>> 0, object.phloLimit.high >>> 0).toNumber();\n            if (object.validAfterBlockNumber != null)\n                if ($util.Long)\n                    (message.validAfterBlockNumber = $util.Long.fromValue(object.validAfterBlockNumber)).unsigned = false;\n                else if (typeof object.validAfterBlockNumber === \"string\")\n                    message.validAfterBlockNumber = parseInt(object.validAfterBlockNumber, 10);\n                else if (typeof object.validAfterBlockNumber === \"number\")\n                    message.validAfterBlockNumber = object.validAfterBlockNumber;\n                else if (typeof object.validAfterBlockNumber === \"object\")\n                    message.validAfterBlockNumber = new $util.LongBits(object.validAfterBlockNumber.low >>> 0, object.validAfterBlockNumber.high >>> 0).toNumber();\n            if (object.cost != null)\n                if ($util.Long)\n                    (message.cost = $util.Long.fromValue(object.cost)).unsigned = true;\n                else if (typeof object.cost === \"string\")\n                    message.cost = parseInt(object.cost, 10);\n                else if (typeof object.cost === \"number\")\n                    message.cost = object.cost;\n                else if (typeof object.cost === \"object\")\n                    message.cost = new $util.LongBits(object.cost.low >>> 0, object.cost.high >>> 0).toNumber(true);\n            if (object.errored != null)\n                message.errored = Boolean(object.errored);\n            if (object.systemDeployError != null)\n                message.systemDeployError = String(object.systemDeployError);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DeployInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.DeployInfo\n         * @static\n         * @param {casper.DeployInfo} message DeployInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DeployInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.deployer = \"\";\n                object.term = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n                object.sig = \"\";\n                object.sigAlgorithm = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.phloPrice = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.phloPrice = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.phloLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.phloLimit = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.validAfterBlockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.validAfterBlockNumber = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.cost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.cost = options.longs === String ? \"0\" : 0;\n                object.errored = false;\n                object.systemDeployError = \"\";\n            }\n            if (message.deployer != null && message.hasOwnProperty(\"deployer\"))\n                object.deployer = message.deployer;\n            if (message.term != null && message.hasOwnProperty(\"term\"))\n                object.term = message.term;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                object.sig = message.sig;\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                object.sigAlgorithm = message.sigAlgorithm;\n            if (message.phloPrice != null && message.hasOwnProperty(\"phloPrice\"))\n                if (typeof message.phloPrice === \"number\")\n                    object.phloPrice = options.longs === String ? String(message.phloPrice) : message.phloPrice;\n                else\n                    object.phloPrice = options.longs === String ? $util.Long.prototype.toString.call(message.phloPrice) : options.longs === Number ? new $util.LongBits(message.phloPrice.low >>> 0, message.phloPrice.high >>> 0).toNumber() : message.phloPrice;\n            if (message.phloLimit != null && message.hasOwnProperty(\"phloLimit\"))\n                if (typeof message.phloLimit === \"number\")\n                    object.phloLimit = options.longs === String ? String(message.phloLimit) : message.phloLimit;\n                else\n                    object.phloLimit = options.longs === String ? $util.Long.prototype.toString.call(message.phloLimit) : options.longs === Number ? new $util.LongBits(message.phloLimit.low >>> 0, message.phloLimit.high >>> 0).toNumber() : message.phloLimit;\n            if (message.validAfterBlockNumber != null && message.hasOwnProperty(\"validAfterBlockNumber\"))\n                if (typeof message.validAfterBlockNumber === \"number\")\n                    object.validAfterBlockNumber = options.longs === String ? String(message.validAfterBlockNumber) : message.validAfterBlockNumber;\n                else\n                    object.validAfterBlockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.validAfterBlockNumber) : options.longs === Number ? new $util.LongBits(message.validAfterBlockNumber.low >>> 0, message.validAfterBlockNumber.high >>> 0).toNumber() : message.validAfterBlockNumber;\n            if (message.cost != null && message.hasOwnProperty(\"cost\"))\n                if (typeof message.cost === \"number\")\n                    object.cost = options.longs === String ? String(message.cost) : message.cost;\n                else\n                    object.cost = options.longs === String ? $util.Long.prototype.toString.call(message.cost) : options.longs === Number ? new $util.LongBits(message.cost.low >>> 0, message.cost.high >>> 0).toNumber(true) : message.cost;\n            if (message.errored != null && message.hasOwnProperty(\"errored\"))\n                object.errored = message.errored;\n            if (message.systemDeployError != null && message.hasOwnProperty(\"systemDeployError\"))\n                object.systemDeployError = message.systemDeployError;\n            return object;\n        };\n\n        /**\n         * Converts this DeployInfo to JSON.\n         * @function toJSON\n         * @memberof casper.DeployInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DeployInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DeployInfo;\n    })();\n\n    casper.LightBlockInfo = (function() {\n\n        /**\n         * Properties of a LightBlockInfo.\n         * @memberof casper\n         * @interface ILightBlockInfo\n         * @property {string|null} [blockHash] LightBlockInfo blockHash\n         * @property {string|null} [sender] LightBlockInfo sender\n         * @property {number|Long|null} [seqNum] LightBlockInfo seqNum\n         * @property {string|null} [sig] LightBlockInfo sig\n         * @property {string|null} [sigAlgorithm] LightBlockInfo sigAlgorithm\n         * @property {string|null} [shardId] LightBlockInfo shardId\n         * @property {Uint8Array|null} [extraBytes] LightBlockInfo extraBytes\n         * @property {number|Long|null} [version] LightBlockInfo version\n         * @property {number|Long|null} [timestamp] LightBlockInfo timestamp\n         * @property {Uint8Array|null} [headerExtraBytes] LightBlockInfo headerExtraBytes\n         * @property {Array.<string>|null} [parentsHashList] LightBlockInfo parentsHashList\n         * @property {number|Long|null} [blockNumber] LightBlockInfo blockNumber\n         * @property {string|null} [preStateHash] LightBlockInfo preStateHash\n         * @property {string|null} [postStateHash] LightBlockInfo postStateHash\n         * @property {Uint8Array|null} [bodyExtraBytes] LightBlockInfo bodyExtraBytes\n         * @property {Array.<casper.IBondInfo>|null} [bonds] LightBlockInfo bonds\n         * @property {string|null} [blockSize] LightBlockInfo blockSize\n         * @property {number|null} [deployCount] LightBlockInfo deployCount\n         * @property {number|null} [faultTolerance] LightBlockInfo faultTolerance\n         * @property {Array.<casper.IJustificationInfo>|null} [justifications] LightBlockInfo justifications\n         */\n\n        /**\n         * Constructs a new LightBlockInfo.\n         * @memberof casper\n         * @classdesc Represents a LightBlockInfo.\n         * @implements ILightBlockInfo\n         * @constructor\n         * @param {casper.ILightBlockInfo=} [properties] Properties to set\n         */\n        function LightBlockInfo(properties) {\n            this.parentsHashList = [];\n            this.bonds = [];\n            this.justifications = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LightBlockInfo blockHash.\n         * @member {string} blockHash\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.blockHash = \"\";\n\n        /**\n         * LightBlockInfo sender.\n         * @member {string} sender\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.sender = \"\";\n\n        /**\n         * LightBlockInfo seqNum.\n         * @member {number|Long} seqNum\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.seqNum = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * LightBlockInfo sig.\n         * @member {string} sig\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.sig = \"\";\n\n        /**\n         * LightBlockInfo sigAlgorithm.\n         * @member {string} sigAlgorithm\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.sigAlgorithm = \"\";\n\n        /**\n         * LightBlockInfo shardId.\n         * @member {string} shardId\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.shardId = \"\";\n\n        /**\n         * LightBlockInfo extraBytes.\n         * @member {Uint8Array} extraBytes\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.extraBytes = $util.newBuffer([]);\n\n        /**\n         * LightBlockInfo version.\n         * @member {number|Long} version\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * LightBlockInfo timestamp.\n         * @member {number|Long} timestamp\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * LightBlockInfo headerExtraBytes.\n         * @member {Uint8Array} headerExtraBytes\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.headerExtraBytes = $util.newBuffer([]);\n\n        /**\n         * LightBlockInfo parentsHashList.\n         * @member {Array.<string>} parentsHashList\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.parentsHashList = $util.emptyArray;\n\n        /**\n         * LightBlockInfo blockNumber.\n         * @member {number|Long} blockNumber\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.blockNumber = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * LightBlockInfo preStateHash.\n         * @member {string} preStateHash\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.preStateHash = \"\";\n\n        /**\n         * LightBlockInfo postStateHash.\n         * @member {string} postStateHash\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.postStateHash = \"\";\n\n        /**\n         * LightBlockInfo bodyExtraBytes.\n         * @member {Uint8Array} bodyExtraBytes\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.bodyExtraBytes = $util.newBuffer([]);\n\n        /**\n         * LightBlockInfo bonds.\n         * @member {Array.<casper.IBondInfo>} bonds\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.bonds = $util.emptyArray;\n\n        /**\n         * LightBlockInfo blockSize.\n         * @member {string} blockSize\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.blockSize = \"\";\n\n        /**\n         * LightBlockInfo deployCount.\n         * @member {number} deployCount\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.deployCount = 0;\n\n        /**\n         * LightBlockInfo faultTolerance.\n         * @member {number} faultTolerance\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.faultTolerance = 0;\n\n        /**\n         * LightBlockInfo justifications.\n         * @member {Array.<casper.IJustificationInfo>} justifications\n         * @memberof casper.LightBlockInfo\n         * @instance\n         */\n        LightBlockInfo.prototype.justifications = $util.emptyArray;\n\n        /**\n         * Creates a new LightBlockInfo instance using the specified properties.\n         * @function create\n         * @memberof casper.LightBlockInfo\n         * @static\n         * @param {casper.ILightBlockInfo=} [properties] Properties to set\n         * @returns {casper.LightBlockInfo} LightBlockInfo instance\n         */\n        LightBlockInfo.create = function create(properties) {\n            return new LightBlockInfo(properties);\n        };\n\n        /**\n         * Encodes the specified LightBlockInfo message. Does not implicitly {@link casper.LightBlockInfo.verify|verify} messages.\n         * @function encode\n         * @memberof casper.LightBlockInfo\n         * @static\n         * @param {casper.ILightBlockInfo} message LightBlockInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LightBlockInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.blockHash);\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.sender);\n            if (message.seqNum != null && message.hasOwnProperty(\"seqNum\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.seqNum);\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.sig);\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.sigAlgorithm);\n            if (message.shardId != null && message.hasOwnProperty(\"shardId\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.shardId);\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.extraBytes);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.version);\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).int64(message.timestamp);\n            if (message.headerExtraBytes != null && message.hasOwnProperty(\"headerExtraBytes\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.headerExtraBytes);\n            if (message.parentsHashList != null && message.parentsHashList.length)\n                for (var i = 0; i < message.parentsHashList.length; ++i)\n                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.parentsHashList[i]);\n            if (message.blockNumber != null && message.hasOwnProperty(\"blockNumber\"))\n                writer.uint32(/* id 12, wireType 0 =*/96).int64(message.blockNumber);\n            if (message.preStateHash != null && message.hasOwnProperty(\"preStateHash\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.preStateHash);\n            if (message.postStateHash != null && message.hasOwnProperty(\"postStateHash\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.postStateHash);\n            if (message.bodyExtraBytes != null && message.hasOwnProperty(\"bodyExtraBytes\"))\n                writer.uint32(/* id 15, wireType 2 =*/122).bytes(message.bodyExtraBytes);\n            if (message.bonds != null && message.bonds.length)\n                for (var i = 0; i < message.bonds.length; ++i)\n                    $root.casper.BondInfo.encode(message.bonds[i], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                writer.uint32(/* id 17, wireType 2 =*/138).string(message.blockSize);\n            if (message.deployCount != null && message.hasOwnProperty(\"deployCount\"))\n                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.deployCount);\n            if (message.faultTolerance != null && message.hasOwnProperty(\"faultTolerance\"))\n                writer.uint32(/* id 19, wireType 5 =*/157).float(message.faultTolerance);\n            if (message.justifications != null && message.justifications.length)\n                for (var i = 0; i < message.justifications.length; ++i)\n                    $root.casper.JustificationInfo.encode(message.justifications[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LightBlockInfo message, length delimited. Does not implicitly {@link casper.LightBlockInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.LightBlockInfo\n         * @static\n         * @param {casper.ILightBlockInfo} message LightBlockInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LightBlockInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LightBlockInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.LightBlockInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.LightBlockInfo} LightBlockInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LightBlockInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.LightBlockInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.blockHash = reader.string();\n                    break;\n                case 2:\n                    message.sender = reader.string();\n                    break;\n                case 3:\n                    message.seqNum = reader.int64();\n                    break;\n                case 4:\n                    message.sig = reader.string();\n                    break;\n                case 5:\n                    message.sigAlgorithm = reader.string();\n                    break;\n                case 6:\n                    message.shardId = reader.string();\n                    break;\n                case 7:\n                    message.extraBytes = reader.bytes();\n                    break;\n                case 8:\n                    message.version = reader.int64();\n                    break;\n                case 9:\n                    message.timestamp = reader.int64();\n                    break;\n                case 10:\n                    message.headerExtraBytes = reader.bytes();\n                    break;\n                case 11:\n                    if (!(message.parentsHashList && message.parentsHashList.length))\n                        message.parentsHashList = [];\n                    message.parentsHashList.push(reader.string());\n                    break;\n                case 12:\n                    message.blockNumber = reader.int64();\n                    break;\n                case 13:\n                    message.preStateHash = reader.string();\n                    break;\n                case 14:\n                    message.postStateHash = reader.string();\n                    break;\n                case 15:\n                    message.bodyExtraBytes = reader.bytes();\n                    break;\n                case 16:\n                    if (!(message.bonds && message.bonds.length))\n                        message.bonds = [];\n                    message.bonds.push($root.casper.BondInfo.decode(reader, reader.uint32()));\n                    break;\n                case 17:\n                    message.blockSize = reader.string();\n                    break;\n                case 18:\n                    message.deployCount = reader.int32();\n                    break;\n                case 19:\n                    message.faultTolerance = reader.float();\n                    break;\n                case 20:\n                    if (!(message.justifications && message.justifications.length))\n                        message.justifications = [];\n                    message.justifications.push($root.casper.JustificationInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LightBlockInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.LightBlockInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.LightBlockInfo} LightBlockInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LightBlockInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LightBlockInfo message.\n         * @function verify\n         * @memberof casper.LightBlockInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LightBlockInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                if (!$util.isString(message.blockHash))\n                    return \"blockHash: string expected\";\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                if (!$util.isString(message.sender))\n                    return \"sender: string expected\";\n            if (message.seqNum != null && message.hasOwnProperty(\"seqNum\"))\n                if (!$util.isInteger(message.seqNum) && !(message.seqNum && $util.isInteger(message.seqNum.low) && $util.isInteger(message.seqNum.high)))\n                    return \"seqNum: integer|Long expected\";\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                if (!$util.isString(message.sig))\n                    return \"sig: string expected\";\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                if (!$util.isString(message.sigAlgorithm))\n                    return \"sigAlgorithm: string expected\";\n            if (message.shardId != null && message.hasOwnProperty(\"shardId\"))\n                if (!$util.isString(message.shardId))\n                    return \"shardId: string expected\";\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                if (!(message.extraBytes && typeof message.extraBytes.length === \"number\" || $util.isString(message.extraBytes)))\n                    return \"extraBytes: buffer expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))\n                    return \"timestamp: integer|Long expected\";\n            if (message.headerExtraBytes != null && message.hasOwnProperty(\"headerExtraBytes\"))\n                if (!(message.headerExtraBytes && typeof message.headerExtraBytes.length === \"number\" || $util.isString(message.headerExtraBytes)))\n                    return \"headerExtraBytes: buffer expected\";\n            if (message.parentsHashList != null && message.hasOwnProperty(\"parentsHashList\")) {\n                if (!Array.isArray(message.parentsHashList))\n                    return \"parentsHashList: array expected\";\n                for (var i = 0; i < message.parentsHashList.length; ++i)\n                    if (!$util.isString(message.parentsHashList[i]))\n                        return \"parentsHashList: string[] expected\";\n            }\n            if (message.blockNumber != null && message.hasOwnProperty(\"blockNumber\"))\n                if (!$util.isInteger(message.blockNumber) && !(message.blockNumber && $util.isInteger(message.blockNumber.low) && $util.isInteger(message.blockNumber.high)))\n                    return \"blockNumber: integer|Long expected\";\n            if (message.preStateHash != null && message.hasOwnProperty(\"preStateHash\"))\n                if (!$util.isString(message.preStateHash))\n                    return \"preStateHash: string expected\";\n            if (message.postStateHash != null && message.hasOwnProperty(\"postStateHash\"))\n                if (!$util.isString(message.postStateHash))\n                    return \"postStateHash: string expected\";\n            if (message.bodyExtraBytes != null && message.hasOwnProperty(\"bodyExtraBytes\"))\n                if (!(message.bodyExtraBytes && typeof message.bodyExtraBytes.length === \"number\" || $util.isString(message.bodyExtraBytes)))\n                    return \"bodyExtraBytes: buffer expected\";\n            if (message.bonds != null && message.hasOwnProperty(\"bonds\")) {\n                if (!Array.isArray(message.bonds))\n                    return \"bonds: array expected\";\n                for (var i = 0; i < message.bonds.length; ++i) {\n                    var error = $root.casper.BondInfo.verify(message.bonds[i]);\n                    if (error)\n                        return \"bonds.\" + error;\n                }\n            }\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                if (!$util.isString(message.blockSize))\n                    return \"blockSize: string expected\";\n            if (message.deployCount != null && message.hasOwnProperty(\"deployCount\"))\n                if (!$util.isInteger(message.deployCount))\n                    return \"deployCount: integer expected\";\n            if (message.faultTolerance != null && message.hasOwnProperty(\"faultTolerance\"))\n                if (typeof message.faultTolerance !== \"number\")\n                    return \"faultTolerance: number expected\";\n            if (message.justifications != null && message.hasOwnProperty(\"justifications\")) {\n                if (!Array.isArray(message.justifications))\n                    return \"justifications: array expected\";\n                for (var i = 0; i < message.justifications.length; ++i) {\n                    var error = $root.casper.JustificationInfo.verify(message.justifications[i]);\n                    if (error)\n                        return \"justifications.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a LightBlockInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.LightBlockInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.LightBlockInfo} LightBlockInfo\n         */\n        LightBlockInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.LightBlockInfo)\n                return object;\n            var message = new $root.casper.LightBlockInfo();\n            if (object.blockHash != null)\n                message.blockHash = String(object.blockHash);\n            if (object.sender != null)\n                message.sender = String(object.sender);\n            if (object.seqNum != null)\n                if ($util.Long)\n                    (message.seqNum = $util.Long.fromValue(object.seqNum)).unsigned = false;\n                else if (typeof object.seqNum === \"string\")\n                    message.seqNum = parseInt(object.seqNum, 10);\n                else if (typeof object.seqNum === \"number\")\n                    message.seqNum = object.seqNum;\n                else if (typeof object.seqNum === \"object\")\n                    message.seqNum = new $util.LongBits(object.seqNum.low >>> 0, object.seqNum.high >>> 0).toNumber();\n            if (object.sig != null)\n                message.sig = String(object.sig);\n            if (object.sigAlgorithm != null)\n                message.sigAlgorithm = String(object.sigAlgorithm);\n            if (object.shardId != null)\n                message.shardId = String(object.shardId);\n            if (object.extraBytes != null)\n                if (typeof object.extraBytes === \"string\")\n                    $util.base64.decode(object.extraBytes, message.extraBytes = $util.newBuffer($util.base64.length(object.extraBytes)), 0);\n                else if (object.extraBytes.length)\n                    message.extraBytes = object.extraBytes;\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            if (object.timestamp != null)\n                if ($util.Long)\n                    (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = false;\n                else if (typeof object.timestamp === \"string\")\n                    message.timestamp = parseInt(object.timestamp, 10);\n                else if (typeof object.timestamp === \"number\")\n                    message.timestamp = object.timestamp;\n                else if (typeof object.timestamp === \"object\")\n                    message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber();\n            if (object.headerExtraBytes != null)\n                if (typeof object.headerExtraBytes === \"string\")\n                    $util.base64.decode(object.headerExtraBytes, message.headerExtraBytes = $util.newBuffer($util.base64.length(object.headerExtraBytes)), 0);\n                else if (object.headerExtraBytes.length)\n                    message.headerExtraBytes = object.headerExtraBytes;\n            if (object.parentsHashList) {\n                if (!Array.isArray(object.parentsHashList))\n                    throw TypeError(\".casper.LightBlockInfo.parentsHashList: array expected\");\n                message.parentsHashList = [];\n                for (var i = 0; i < object.parentsHashList.length; ++i)\n                    message.parentsHashList[i] = String(object.parentsHashList[i]);\n            }\n            if (object.blockNumber != null)\n                if ($util.Long)\n                    (message.blockNumber = $util.Long.fromValue(object.blockNumber)).unsigned = false;\n                else if (typeof object.blockNumber === \"string\")\n                    message.blockNumber = parseInt(object.blockNumber, 10);\n                else if (typeof object.blockNumber === \"number\")\n                    message.blockNumber = object.blockNumber;\n                else if (typeof object.blockNumber === \"object\")\n                    message.blockNumber = new $util.LongBits(object.blockNumber.low >>> 0, object.blockNumber.high >>> 0).toNumber();\n            if (object.preStateHash != null)\n                message.preStateHash = String(object.preStateHash);\n            if (object.postStateHash != null)\n                message.postStateHash = String(object.postStateHash);\n            if (object.bodyExtraBytes != null)\n                if (typeof object.bodyExtraBytes === \"string\")\n                    $util.base64.decode(object.bodyExtraBytes, message.bodyExtraBytes = $util.newBuffer($util.base64.length(object.bodyExtraBytes)), 0);\n                else if (object.bodyExtraBytes.length)\n                    message.bodyExtraBytes = object.bodyExtraBytes;\n            if (object.bonds) {\n                if (!Array.isArray(object.bonds))\n                    throw TypeError(\".casper.LightBlockInfo.bonds: array expected\");\n                message.bonds = [];\n                for (var i = 0; i < object.bonds.length; ++i) {\n                    if (typeof object.bonds[i] !== \"object\")\n                        throw TypeError(\".casper.LightBlockInfo.bonds: object expected\");\n                    message.bonds[i] = $root.casper.BondInfo.fromObject(object.bonds[i]);\n                }\n            }\n            if (object.blockSize != null)\n                message.blockSize = String(object.blockSize);\n            if (object.deployCount != null)\n                message.deployCount = object.deployCount | 0;\n            if (object.faultTolerance != null)\n                message.faultTolerance = Number(object.faultTolerance);\n            if (object.justifications) {\n                if (!Array.isArray(object.justifications))\n                    throw TypeError(\".casper.LightBlockInfo.justifications: array expected\");\n                message.justifications = [];\n                for (var i = 0; i < object.justifications.length; ++i) {\n                    if (typeof object.justifications[i] !== \"object\")\n                        throw TypeError(\".casper.LightBlockInfo.justifications: object expected\");\n                    message.justifications[i] = $root.casper.JustificationInfo.fromObject(object.justifications[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LightBlockInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.LightBlockInfo\n         * @static\n         * @param {casper.LightBlockInfo} message LightBlockInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LightBlockInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.parentsHashList = [];\n                object.bonds = [];\n                object.justifications = [];\n            }\n            if (options.defaults) {\n                object.blockHash = \"\";\n                object.sender = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.seqNum = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.seqNum = options.longs === String ? \"0\" : 0;\n                object.sig = \"\";\n                object.sigAlgorithm = \"\";\n                object.shardId = \"\";\n                if (options.bytes === String)\n                    object.extraBytes = \"\";\n                else {\n                    object.extraBytes = [];\n                    if (options.bytes !== Array)\n                        object.extraBytes = $util.newBuffer(object.extraBytes);\n                }\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timestamp = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.headerExtraBytes = \"\";\n                else {\n                    object.headerExtraBytes = [];\n                    if (options.bytes !== Array)\n                        object.headerExtraBytes = $util.newBuffer(object.headerExtraBytes);\n                }\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.blockNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.blockNumber = options.longs === String ? \"0\" : 0;\n                object.preStateHash = \"\";\n                object.postStateHash = \"\";\n                if (options.bytes === String)\n                    object.bodyExtraBytes = \"\";\n                else {\n                    object.bodyExtraBytes = [];\n                    if (options.bytes !== Array)\n                        object.bodyExtraBytes = $util.newBuffer(object.bodyExtraBytes);\n                }\n                object.blockSize = \"\";\n                object.deployCount = 0;\n                object.faultTolerance = 0;\n            }\n            if (message.blockHash != null && message.hasOwnProperty(\"blockHash\"))\n                object.blockHash = message.blockHash;\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                object.sender = message.sender;\n            if (message.seqNum != null && message.hasOwnProperty(\"seqNum\"))\n                if (typeof message.seqNum === \"number\")\n                    object.seqNum = options.longs === String ? String(message.seqNum) : message.seqNum;\n                else\n                    object.seqNum = options.longs === String ? $util.Long.prototype.toString.call(message.seqNum) : options.longs === Number ? new $util.LongBits(message.seqNum.low >>> 0, message.seqNum.high >>> 0).toNumber() : message.seqNum;\n            if (message.sig != null && message.hasOwnProperty(\"sig\"))\n                object.sig = message.sig;\n            if (message.sigAlgorithm != null && message.hasOwnProperty(\"sigAlgorithm\"))\n                object.sigAlgorithm = message.sigAlgorithm;\n            if (message.shardId != null && message.hasOwnProperty(\"shardId\"))\n                object.shardId = message.shardId;\n            if (message.extraBytes != null && message.hasOwnProperty(\"extraBytes\"))\n                object.extraBytes = options.bytes === String ? $util.base64.encode(message.extraBytes, 0, message.extraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.extraBytes) : message.extraBytes;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            if (message.timestamp != null && message.hasOwnProperty(\"timestamp\"))\n                if (typeof message.timestamp === \"number\")\n                    object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;\n                else\n                    object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber() : message.timestamp;\n            if (message.headerExtraBytes != null && message.hasOwnProperty(\"headerExtraBytes\"))\n                object.headerExtraBytes = options.bytes === String ? $util.base64.encode(message.headerExtraBytes, 0, message.headerExtraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.headerExtraBytes) : message.headerExtraBytes;\n            if (message.parentsHashList && message.parentsHashList.length) {\n                object.parentsHashList = [];\n                for (var j = 0; j < message.parentsHashList.length; ++j)\n                    object.parentsHashList[j] = message.parentsHashList[j];\n            }\n            if (message.blockNumber != null && message.hasOwnProperty(\"blockNumber\"))\n                if (typeof message.blockNumber === \"number\")\n                    object.blockNumber = options.longs === String ? String(message.blockNumber) : message.blockNumber;\n                else\n                    object.blockNumber = options.longs === String ? $util.Long.prototype.toString.call(message.blockNumber) : options.longs === Number ? new $util.LongBits(message.blockNumber.low >>> 0, message.blockNumber.high >>> 0).toNumber() : message.blockNumber;\n            if (message.preStateHash != null && message.hasOwnProperty(\"preStateHash\"))\n                object.preStateHash = message.preStateHash;\n            if (message.postStateHash != null && message.hasOwnProperty(\"postStateHash\"))\n                object.postStateHash = message.postStateHash;\n            if (message.bodyExtraBytes != null && message.hasOwnProperty(\"bodyExtraBytes\"))\n                object.bodyExtraBytes = options.bytes === String ? $util.base64.encode(message.bodyExtraBytes, 0, message.bodyExtraBytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.bodyExtraBytes) : message.bodyExtraBytes;\n            if (message.bonds && message.bonds.length) {\n                object.bonds = [];\n                for (var j = 0; j < message.bonds.length; ++j)\n                    object.bonds[j] = $root.casper.BondInfo.toObject(message.bonds[j], options);\n            }\n            if (message.blockSize != null && message.hasOwnProperty(\"blockSize\"))\n                object.blockSize = message.blockSize;\n            if (message.deployCount != null && message.hasOwnProperty(\"deployCount\"))\n                object.deployCount = message.deployCount;\n            if (message.faultTolerance != null && message.hasOwnProperty(\"faultTolerance\"))\n                object.faultTolerance = options.json && !isFinite(message.faultTolerance) ? String(message.faultTolerance) : message.faultTolerance;\n            if (message.justifications && message.justifications.length) {\n                object.justifications = [];\n                for (var j = 0; j < message.justifications.length; ++j)\n                    object.justifications[j] = $root.casper.JustificationInfo.toObject(message.justifications[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this LightBlockInfo to JSON.\n         * @function toJSON\n         * @memberof casper.LightBlockInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LightBlockInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return LightBlockInfo;\n    })();\n\n    casper.BlockInfo = (function() {\n\n        /**\n         * Properties of a BlockInfo.\n         * @memberof casper\n         * @interface IBlockInfo\n         * @property {casper.ILightBlockInfo|null} [blockInfo] BlockInfo blockInfo\n         * @property {Array.<casper.IDeployInfo>|null} [deploys] BlockInfo deploys\n         */\n\n        /**\n         * Constructs a new BlockInfo.\n         * @memberof casper\n         * @classdesc Represents a BlockInfo.\n         * @implements IBlockInfo\n         * @constructor\n         * @param {casper.IBlockInfo=} [properties] Properties to set\n         */\n        function BlockInfo(properties) {\n            this.deploys = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlockInfo blockInfo.\n         * @member {casper.ILightBlockInfo|null|undefined} blockInfo\n         * @memberof casper.BlockInfo\n         * @instance\n         */\n        BlockInfo.prototype.blockInfo = null;\n\n        /**\n         * BlockInfo deploys.\n         * @member {Array.<casper.IDeployInfo>} deploys\n         * @memberof casper.BlockInfo\n         * @instance\n         */\n        BlockInfo.prototype.deploys = $util.emptyArray;\n\n        /**\n         * Creates a new BlockInfo instance using the specified properties.\n         * @function create\n         * @memberof casper.BlockInfo\n         * @static\n         * @param {casper.IBlockInfo=} [properties] Properties to set\n         * @returns {casper.BlockInfo} BlockInfo instance\n         */\n        BlockInfo.create = function create(properties) {\n            return new BlockInfo(properties);\n        };\n\n        /**\n         * Encodes the specified BlockInfo message. Does not implicitly {@link casper.BlockInfo.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlockInfo\n         * @static\n         * @param {casper.IBlockInfo} message BlockInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\"))\n                $root.casper.LightBlockInfo.encode(message.blockInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.deploys != null && message.deploys.length)\n                for (var i = 0; i < message.deploys.length; ++i)\n                    $root.casper.DeployInfo.encode(message.deploys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlockInfo message, length delimited. Does not implicitly {@link casper.BlockInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlockInfo\n         * @static\n         * @param {casper.IBlockInfo} message BlockInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlockInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlockInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlockInfo} BlockInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.blockInfo = $root.casper.LightBlockInfo.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    if (!(message.deploys && message.deploys.length))\n                        message.deploys = [];\n                    message.deploys.push($root.casper.DeployInfo.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlockInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlockInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlockInfo} BlockInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlockInfo message.\n         * @function verify\n         * @memberof casper.BlockInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlockInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                var error = $root.casper.LightBlockInfo.verify(message.blockInfo);\n                if (error)\n                    return \"blockInfo.\" + error;\n            }\n            if (message.deploys != null && message.hasOwnProperty(\"deploys\")) {\n                if (!Array.isArray(message.deploys))\n                    return \"deploys: array expected\";\n                for (var i = 0; i < message.deploys.length; ++i) {\n                    var error = $root.casper.DeployInfo.verify(message.deploys[i]);\n                    if (error)\n                        return \"deploys.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BlockInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlockInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlockInfo} BlockInfo\n         */\n        BlockInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlockInfo)\n                return object;\n            var message = new $root.casper.BlockInfo();\n            if (object.blockInfo != null) {\n                if (typeof object.blockInfo !== \"object\")\n                    throw TypeError(\".casper.BlockInfo.blockInfo: object expected\");\n                message.blockInfo = $root.casper.LightBlockInfo.fromObject(object.blockInfo);\n            }\n            if (object.deploys) {\n                if (!Array.isArray(object.deploys))\n                    throw TypeError(\".casper.BlockInfo.deploys: array expected\");\n                message.deploys = [];\n                for (var i = 0; i < object.deploys.length; ++i) {\n                    if (typeof object.deploys[i] !== \"object\")\n                        throw TypeError(\".casper.BlockInfo.deploys: object expected\");\n                    message.deploys[i] = $root.casper.DeployInfo.fromObject(object.deploys[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlockInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlockInfo\n         * @static\n         * @param {casper.BlockInfo} message BlockInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.deploys = [];\n            if (options.defaults)\n                object.blockInfo = null;\n            if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\"))\n                object.blockInfo = $root.casper.LightBlockInfo.toObject(message.blockInfo, options);\n            if (message.deploys && message.deploys.length) {\n                object.deploys = [];\n                for (var j = 0; j < message.deploys.length; ++j)\n                    object.deploys[j] = $root.casper.DeployInfo.toObject(message.deploys[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this BlockInfo to JSON.\n         * @function toJSON\n         * @memberof casper.BlockInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlockInfo;\n    })();\n\n    casper.DataWithBlockInfo = (function() {\n\n        /**\n         * Properties of a DataWithBlockInfo.\n         * @memberof casper\n         * @interface IDataWithBlockInfo\n         * @property {Array.<IPar>|null} [postBlockData] DataWithBlockInfo postBlockData\n         * @property {casper.ILightBlockInfo|null} [block] DataWithBlockInfo block\n         */\n\n        /**\n         * Constructs a new DataWithBlockInfo.\n         * @memberof casper\n         * @classdesc Represents a DataWithBlockInfo.\n         * @implements IDataWithBlockInfo\n         * @constructor\n         * @param {casper.IDataWithBlockInfo=} [properties] Properties to set\n         */\n        function DataWithBlockInfo(properties) {\n            this.postBlockData = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DataWithBlockInfo postBlockData.\n         * @member {Array.<IPar>} postBlockData\n         * @memberof casper.DataWithBlockInfo\n         * @instance\n         */\n        DataWithBlockInfo.prototype.postBlockData = $util.emptyArray;\n\n        /**\n         * DataWithBlockInfo block.\n         * @member {casper.ILightBlockInfo|null|undefined} block\n         * @memberof casper.DataWithBlockInfo\n         * @instance\n         */\n        DataWithBlockInfo.prototype.block = null;\n\n        /**\n         * Creates a new DataWithBlockInfo instance using the specified properties.\n         * @function create\n         * @memberof casper.DataWithBlockInfo\n         * @static\n         * @param {casper.IDataWithBlockInfo=} [properties] Properties to set\n         * @returns {casper.DataWithBlockInfo} DataWithBlockInfo instance\n         */\n        DataWithBlockInfo.create = function create(properties) {\n            return new DataWithBlockInfo(properties);\n        };\n\n        /**\n         * Encodes the specified DataWithBlockInfo message. Does not implicitly {@link casper.DataWithBlockInfo.verify|verify} messages.\n         * @function encode\n         * @memberof casper.DataWithBlockInfo\n         * @static\n         * @param {casper.IDataWithBlockInfo} message DataWithBlockInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DataWithBlockInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.postBlockData != null && message.postBlockData.length)\n                for (var i = 0; i < message.postBlockData.length; ++i)\n                    $root.Par.encode(message.postBlockData[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.block != null && message.hasOwnProperty(\"block\"))\n                $root.casper.LightBlockInfo.encode(message.block, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DataWithBlockInfo message, length delimited. Does not implicitly {@link casper.DataWithBlockInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.DataWithBlockInfo\n         * @static\n         * @param {casper.IDataWithBlockInfo} message DataWithBlockInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DataWithBlockInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DataWithBlockInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.DataWithBlockInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.DataWithBlockInfo} DataWithBlockInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DataWithBlockInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DataWithBlockInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.postBlockData && message.postBlockData.length))\n                        message.postBlockData = [];\n                    message.postBlockData.push($root.Par.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.block = $root.casper.LightBlockInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DataWithBlockInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.DataWithBlockInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.DataWithBlockInfo} DataWithBlockInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DataWithBlockInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DataWithBlockInfo message.\n         * @function verify\n         * @memberof casper.DataWithBlockInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DataWithBlockInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.postBlockData != null && message.hasOwnProperty(\"postBlockData\")) {\n                if (!Array.isArray(message.postBlockData))\n                    return \"postBlockData: array expected\";\n                for (var i = 0; i < message.postBlockData.length; ++i) {\n                    var error = $root.Par.verify(message.postBlockData[i]);\n                    if (error)\n                        return \"postBlockData.\" + error;\n                }\n            }\n            if (message.block != null && message.hasOwnProperty(\"block\")) {\n                var error = $root.casper.LightBlockInfo.verify(message.block);\n                if (error)\n                    return \"block.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DataWithBlockInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.DataWithBlockInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.DataWithBlockInfo} DataWithBlockInfo\n         */\n        DataWithBlockInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.DataWithBlockInfo)\n                return object;\n            var message = new $root.casper.DataWithBlockInfo();\n            if (object.postBlockData) {\n                if (!Array.isArray(object.postBlockData))\n                    throw TypeError(\".casper.DataWithBlockInfo.postBlockData: array expected\");\n                message.postBlockData = [];\n                for (var i = 0; i < object.postBlockData.length; ++i) {\n                    if (typeof object.postBlockData[i] !== \"object\")\n                        throw TypeError(\".casper.DataWithBlockInfo.postBlockData: object expected\");\n                    message.postBlockData[i] = $root.Par.fromObject(object.postBlockData[i]);\n                }\n            }\n            if (object.block != null) {\n                if (typeof object.block !== \"object\")\n                    throw TypeError(\".casper.DataWithBlockInfo.block: object expected\");\n                message.block = $root.casper.LightBlockInfo.fromObject(object.block);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DataWithBlockInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.DataWithBlockInfo\n         * @static\n         * @param {casper.DataWithBlockInfo} message DataWithBlockInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DataWithBlockInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.postBlockData = [];\n            if (options.defaults)\n                object.block = null;\n            if (message.postBlockData && message.postBlockData.length) {\n                object.postBlockData = [];\n                for (var j = 0; j < message.postBlockData.length; ++j)\n                    object.postBlockData[j] = $root.Par.toObject(message.postBlockData[j], options);\n            }\n            if (message.block != null && message.hasOwnProperty(\"block\"))\n                object.block = $root.casper.LightBlockInfo.toObject(message.block, options);\n            return object;\n        };\n\n        /**\n         * Converts this DataWithBlockInfo to JSON.\n         * @function toJSON\n         * @memberof casper.DataWithBlockInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DataWithBlockInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DataWithBlockInfo;\n    })();\n\n    casper.ContinuationsWithBlockInfo = (function() {\n\n        /**\n         * Properties of a ContinuationsWithBlockInfo.\n         * @memberof casper\n         * @interface IContinuationsWithBlockInfo\n         * @property {Array.<casper.IWaitingContinuationInfo>|null} [postBlockContinuations] ContinuationsWithBlockInfo postBlockContinuations\n         * @property {casper.ILightBlockInfo|null} [block] ContinuationsWithBlockInfo block\n         */\n\n        /**\n         * Constructs a new ContinuationsWithBlockInfo.\n         * @memberof casper\n         * @classdesc Represents a ContinuationsWithBlockInfo.\n         * @implements IContinuationsWithBlockInfo\n         * @constructor\n         * @param {casper.IContinuationsWithBlockInfo=} [properties] Properties to set\n         */\n        function ContinuationsWithBlockInfo(properties) {\n            this.postBlockContinuations = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ContinuationsWithBlockInfo postBlockContinuations.\n         * @member {Array.<casper.IWaitingContinuationInfo>} postBlockContinuations\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @instance\n         */\n        ContinuationsWithBlockInfo.prototype.postBlockContinuations = $util.emptyArray;\n\n        /**\n         * ContinuationsWithBlockInfo block.\n         * @member {casper.ILightBlockInfo|null|undefined} block\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @instance\n         */\n        ContinuationsWithBlockInfo.prototype.block = null;\n\n        /**\n         * Creates a new ContinuationsWithBlockInfo instance using the specified properties.\n         * @function create\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @static\n         * @param {casper.IContinuationsWithBlockInfo=} [properties] Properties to set\n         * @returns {casper.ContinuationsWithBlockInfo} ContinuationsWithBlockInfo instance\n         */\n        ContinuationsWithBlockInfo.create = function create(properties) {\n            return new ContinuationsWithBlockInfo(properties);\n        };\n\n        /**\n         * Encodes the specified ContinuationsWithBlockInfo message. Does not implicitly {@link casper.ContinuationsWithBlockInfo.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @static\n         * @param {casper.IContinuationsWithBlockInfo} message ContinuationsWithBlockInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContinuationsWithBlockInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.postBlockContinuations != null && message.postBlockContinuations.length)\n                for (var i = 0; i < message.postBlockContinuations.length; ++i)\n                    $root.casper.WaitingContinuationInfo.encode(message.postBlockContinuations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.block != null && message.hasOwnProperty(\"block\"))\n                $root.casper.LightBlockInfo.encode(message.block, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ContinuationsWithBlockInfo message, length delimited. Does not implicitly {@link casper.ContinuationsWithBlockInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @static\n         * @param {casper.IContinuationsWithBlockInfo} message ContinuationsWithBlockInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ContinuationsWithBlockInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ContinuationsWithBlockInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ContinuationsWithBlockInfo} ContinuationsWithBlockInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContinuationsWithBlockInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ContinuationsWithBlockInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.postBlockContinuations && message.postBlockContinuations.length))\n                        message.postBlockContinuations = [];\n                    message.postBlockContinuations.push($root.casper.WaitingContinuationInfo.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.block = $root.casper.LightBlockInfo.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ContinuationsWithBlockInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ContinuationsWithBlockInfo} ContinuationsWithBlockInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ContinuationsWithBlockInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ContinuationsWithBlockInfo message.\n         * @function verify\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ContinuationsWithBlockInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.postBlockContinuations != null && message.hasOwnProperty(\"postBlockContinuations\")) {\n                if (!Array.isArray(message.postBlockContinuations))\n                    return \"postBlockContinuations: array expected\";\n                for (var i = 0; i < message.postBlockContinuations.length; ++i) {\n                    var error = $root.casper.WaitingContinuationInfo.verify(message.postBlockContinuations[i]);\n                    if (error)\n                        return \"postBlockContinuations.\" + error;\n                }\n            }\n            if (message.block != null && message.hasOwnProperty(\"block\")) {\n                var error = $root.casper.LightBlockInfo.verify(message.block);\n                if (error)\n                    return \"block.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ContinuationsWithBlockInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ContinuationsWithBlockInfo} ContinuationsWithBlockInfo\n         */\n        ContinuationsWithBlockInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ContinuationsWithBlockInfo)\n                return object;\n            var message = new $root.casper.ContinuationsWithBlockInfo();\n            if (object.postBlockContinuations) {\n                if (!Array.isArray(object.postBlockContinuations))\n                    throw TypeError(\".casper.ContinuationsWithBlockInfo.postBlockContinuations: array expected\");\n                message.postBlockContinuations = [];\n                for (var i = 0; i < object.postBlockContinuations.length; ++i) {\n                    if (typeof object.postBlockContinuations[i] !== \"object\")\n                        throw TypeError(\".casper.ContinuationsWithBlockInfo.postBlockContinuations: object expected\");\n                    message.postBlockContinuations[i] = $root.casper.WaitingContinuationInfo.fromObject(object.postBlockContinuations[i]);\n                }\n            }\n            if (object.block != null) {\n                if (typeof object.block !== \"object\")\n                    throw TypeError(\".casper.ContinuationsWithBlockInfo.block: object expected\");\n                message.block = $root.casper.LightBlockInfo.fromObject(object.block);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ContinuationsWithBlockInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @static\n         * @param {casper.ContinuationsWithBlockInfo} message ContinuationsWithBlockInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ContinuationsWithBlockInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.postBlockContinuations = [];\n            if (options.defaults)\n                object.block = null;\n            if (message.postBlockContinuations && message.postBlockContinuations.length) {\n                object.postBlockContinuations = [];\n                for (var j = 0; j < message.postBlockContinuations.length; ++j)\n                    object.postBlockContinuations[j] = $root.casper.WaitingContinuationInfo.toObject(message.postBlockContinuations[j], options);\n            }\n            if (message.block != null && message.hasOwnProperty(\"block\"))\n                object.block = $root.casper.LightBlockInfo.toObject(message.block, options);\n            return object;\n        };\n\n        /**\n         * Converts this ContinuationsWithBlockInfo to JSON.\n         * @function toJSON\n         * @memberof casper.ContinuationsWithBlockInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ContinuationsWithBlockInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ContinuationsWithBlockInfo;\n    })();\n\n    casper.WaitingContinuationInfo = (function() {\n\n        /**\n         * Properties of a WaitingContinuationInfo.\n         * @memberof casper\n         * @interface IWaitingContinuationInfo\n         * @property {Array.<IBindPattern>|null} [postBlockPatterns] WaitingContinuationInfo postBlockPatterns\n         * @property {IPar|null} [postBlockContinuation] WaitingContinuationInfo postBlockContinuation\n         */\n\n        /**\n         * Constructs a new WaitingContinuationInfo.\n         * @memberof casper\n         * @classdesc Represents a WaitingContinuationInfo.\n         * @implements IWaitingContinuationInfo\n         * @constructor\n         * @param {casper.IWaitingContinuationInfo=} [properties] Properties to set\n         */\n        function WaitingContinuationInfo(properties) {\n            this.postBlockPatterns = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * WaitingContinuationInfo postBlockPatterns.\n         * @member {Array.<IBindPattern>} postBlockPatterns\n         * @memberof casper.WaitingContinuationInfo\n         * @instance\n         */\n        WaitingContinuationInfo.prototype.postBlockPatterns = $util.emptyArray;\n\n        /**\n         * WaitingContinuationInfo postBlockContinuation.\n         * @member {IPar|null|undefined} postBlockContinuation\n         * @memberof casper.WaitingContinuationInfo\n         * @instance\n         */\n        WaitingContinuationInfo.prototype.postBlockContinuation = null;\n\n        /**\n         * Creates a new WaitingContinuationInfo instance using the specified properties.\n         * @function create\n         * @memberof casper.WaitingContinuationInfo\n         * @static\n         * @param {casper.IWaitingContinuationInfo=} [properties] Properties to set\n         * @returns {casper.WaitingContinuationInfo} WaitingContinuationInfo instance\n         */\n        WaitingContinuationInfo.create = function create(properties) {\n            return new WaitingContinuationInfo(properties);\n        };\n\n        /**\n         * Encodes the specified WaitingContinuationInfo message. Does not implicitly {@link casper.WaitingContinuationInfo.verify|verify} messages.\n         * @function encode\n         * @memberof casper.WaitingContinuationInfo\n         * @static\n         * @param {casper.IWaitingContinuationInfo} message WaitingContinuationInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WaitingContinuationInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.postBlockPatterns != null && message.postBlockPatterns.length)\n                for (var i = 0; i < message.postBlockPatterns.length; ++i)\n                    $root.BindPattern.encode(message.postBlockPatterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.postBlockContinuation != null && message.hasOwnProperty(\"postBlockContinuation\"))\n                $root.Par.encode(message.postBlockContinuation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified WaitingContinuationInfo message, length delimited. Does not implicitly {@link casper.WaitingContinuationInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.WaitingContinuationInfo\n         * @static\n         * @param {casper.IWaitingContinuationInfo} message WaitingContinuationInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WaitingContinuationInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a WaitingContinuationInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.WaitingContinuationInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.WaitingContinuationInfo} WaitingContinuationInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WaitingContinuationInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.WaitingContinuationInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.postBlockPatterns && message.postBlockPatterns.length))\n                        message.postBlockPatterns = [];\n                    message.postBlockPatterns.push($root.BindPattern.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.postBlockContinuation = $root.Par.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a WaitingContinuationInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.WaitingContinuationInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.WaitingContinuationInfo} WaitingContinuationInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WaitingContinuationInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a WaitingContinuationInfo message.\n         * @function verify\n         * @memberof casper.WaitingContinuationInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WaitingContinuationInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.postBlockPatterns != null && message.hasOwnProperty(\"postBlockPatterns\")) {\n                if (!Array.isArray(message.postBlockPatterns))\n                    return \"postBlockPatterns: array expected\";\n                for (var i = 0; i < message.postBlockPatterns.length; ++i) {\n                    var error = $root.BindPattern.verify(message.postBlockPatterns[i]);\n                    if (error)\n                        return \"postBlockPatterns.\" + error;\n                }\n            }\n            if (message.postBlockContinuation != null && message.hasOwnProperty(\"postBlockContinuation\")) {\n                var error = $root.Par.verify(message.postBlockContinuation);\n                if (error)\n                    return \"postBlockContinuation.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a WaitingContinuationInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.WaitingContinuationInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.WaitingContinuationInfo} WaitingContinuationInfo\n         */\n        WaitingContinuationInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.WaitingContinuationInfo)\n                return object;\n            var message = new $root.casper.WaitingContinuationInfo();\n            if (object.postBlockPatterns) {\n                if (!Array.isArray(object.postBlockPatterns))\n                    throw TypeError(\".casper.WaitingContinuationInfo.postBlockPatterns: array expected\");\n                message.postBlockPatterns = [];\n                for (var i = 0; i < object.postBlockPatterns.length; ++i) {\n                    if (typeof object.postBlockPatterns[i] !== \"object\")\n                        throw TypeError(\".casper.WaitingContinuationInfo.postBlockPatterns: object expected\");\n                    message.postBlockPatterns[i] = $root.BindPattern.fromObject(object.postBlockPatterns[i]);\n                }\n            }\n            if (object.postBlockContinuation != null) {\n                if (typeof object.postBlockContinuation !== \"object\")\n                    throw TypeError(\".casper.WaitingContinuationInfo.postBlockContinuation: object expected\");\n                message.postBlockContinuation = $root.Par.fromObject(object.postBlockContinuation);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a WaitingContinuationInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.WaitingContinuationInfo\n         * @static\n         * @param {casper.WaitingContinuationInfo} message WaitingContinuationInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WaitingContinuationInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.postBlockPatterns = [];\n            if (options.defaults)\n                object.postBlockContinuation = null;\n            if (message.postBlockPatterns && message.postBlockPatterns.length) {\n                object.postBlockPatterns = [];\n                for (var j = 0; j < message.postBlockPatterns.length; ++j)\n                    object.postBlockPatterns[j] = $root.BindPattern.toObject(message.postBlockPatterns[j], options);\n            }\n            if (message.postBlockContinuation != null && message.hasOwnProperty(\"postBlockContinuation\"))\n                object.postBlockContinuation = $root.Par.toObject(message.postBlockContinuation, options);\n            return object;\n        };\n\n        /**\n         * Converts this WaitingContinuationInfo to JSON.\n         * @function toJSON\n         * @memberof casper.WaitingContinuationInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WaitingContinuationInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return WaitingContinuationInfo;\n    })();\n\n    casper.ReportProduceProto = (function() {\n\n        /**\n         * Properties of a ReportProduceProto.\n         * @memberof casper\n         * @interface IReportProduceProto\n         * @property {IPar|null} [channel] ReportProduceProto channel\n         * @property {IListParWithRandom|null} [data] ReportProduceProto data\n         */\n\n        /**\n         * Constructs a new ReportProduceProto.\n         * @memberof casper\n         * @classdesc Represents a ReportProduceProto.\n         * @implements IReportProduceProto\n         * @constructor\n         * @param {casper.IReportProduceProto=} [properties] Properties to set\n         */\n        function ReportProduceProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ReportProduceProto channel.\n         * @member {IPar|null|undefined} channel\n         * @memberof casper.ReportProduceProto\n         * @instance\n         */\n        ReportProduceProto.prototype.channel = null;\n\n        /**\n         * ReportProduceProto data.\n         * @member {IListParWithRandom|null|undefined} data\n         * @memberof casper.ReportProduceProto\n         * @instance\n         */\n        ReportProduceProto.prototype.data = null;\n\n        /**\n         * Creates a new ReportProduceProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ReportProduceProto\n         * @static\n         * @param {casper.IReportProduceProto=} [properties] Properties to set\n         * @returns {casper.ReportProduceProto} ReportProduceProto instance\n         */\n        ReportProduceProto.create = function create(properties) {\n            return new ReportProduceProto(properties);\n        };\n\n        /**\n         * Encodes the specified ReportProduceProto message. Does not implicitly {@link casper.ReportProduceProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ReportProduceProto\n         * @static\n         * @param {casper.IReportProduceProto} message ReportProduceProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReportProduceProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                $root.Par.encode(message.channel, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                $root.ListParWithRandom.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ReportProduceProto message, length delimited. Does not implicitly {@link casper.ReportProduceProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ReportProduceProto\n         * @static\n         * @param {casper.IReportProduceProto} message ReportProduceProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReportProduceProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ReportProduceProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ReportProduceProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ReportProduceProto} ReportProduceProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReportProduceProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ReportProduceProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.channel = $root.Par.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.data = $root.ListParWithRandom.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ReportProduceProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ReportProduceProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ReportProduceProto} ReportProduceProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReportProduceProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ReportProduceProto message.\n         * @function verify\n         * @memberof casper.ReportProduceProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ReportProduceProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.channel != null && message.hasOwnProperty(\"channel\")) {\n                var error = $root.Par.verify(message.channel);\n                if (error)\n                    return \"channel.\" + error;\n            }\n            if (message.data != null && message.hasOwnProperty(\"data\")) {\n                var error = $root.ListParWithRandom.verify(message.data);\n                if (error)\n                    return \"data.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ReportProduceProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ReportProduceProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ReportProduceProto} ReportProduceProto\n         */\n        ReportProduceProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ReportProduceProto)\n                return object;\n            var message = new $root.casper.ReportProduceProto();\n            if (object.channel != null) {\n                if (typeof object.channel !== \"object\")\n                    throw TypeError(\".casper.ReportProduceProto.channel: object expected\");\n                message.channel = $root.Par.fromObject(object.channel);\n            }\n            if (object.data != null) {\n                if (typeof object.data !== \"object\")\n                    throw TypeError(\".casper.ReportProduceProto.data: object expected\");\n                message.data = $root.ListParWithRandom.fromObject(object.data);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ReportProduceProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ReportProduceProto\n         * @static\n         * @param {casper.ReportProduceProto} message ReportProduceProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ReportProduceProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.channel = null;\n                object.data = null;\n            }\n            if (message.channel != null && message.hasOwnProperty(\"channel\"))\n                object.channel = $root.Par.toObject(message.channel, options);\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = $root.ListParWithRandom.toObject(message.data, options);\n            return object;\n        };\n\n        /**\n         * Converts this ReportProduceProto to JSON.\n         * @function toJSON\n         * @memberof casper.ReportProduceProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ReportProduceProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ReportProduceProto;\n    })();\n\n    casper.ReportConsumeProto = (function() {\n\n        /**\n         * Properties of a ReportConsumeProto.\n         * @memberof casper\n         * @interface IReportConsumeProto\n         * @property {Array.<IPar>|null} [channels] ReportConsumeProto channels\n         * @property {Array.<IBindPattern>|null} [patterns] ReportConsumeProto patterns\n         * @property {Array.<casper.IPeekProto>|null} [peeks] ReportConsumeProto peeks\n         */\n\n        /**\n         * Constructs a new ReportConsumeProto.\n         * @memberof casper\n         * @classdesc Represents a ReportConsumeProto.\n         * @implements IReportConsumeProto\n         * @constructor\n         * @param {casper.IReportConsumeProto=} [properties] Properties to set\n         */\n        function ReportConsumeProto(properties) {\n            this.channels = [];\n            this.patterns = [];\n            this.peeks = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ReportConsumeProto channels.\n         * @member {Array.<IPar>} channels\n         * @memberof casper.ReportConsumeProto\n         * @instance\n         */\n        ReportConsumeProto.prototype.channels = $util.emptyArray;\n\n        /**\n         * ReportConsumeProto patterns.\n         * @member {Array.<IBindPattern>} patterns\n         * @memberof casper.ReportConsumeProto\n         * @instance\n         */\n        ReportConsumeProto.prototype.patterns = $util.emptyArray;\n\n        /**\n         * ReportConsumeProto peeks.\n         * @member {Array.<casper.IPeekProto>} peeks\n         * @memberof casper.ReportConsumeProto\n         * @instance\n         */\n        ReportConsumeProto.prototype.peeks = $util.emptyArray;\n\n        /**\n         * Creates a new ReportConsumeProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ReportConsumeProto\n         * @static\n         * @param {casper.IReportConsumeProto=} [properties] Properties to set\n         * @returns {casper.ReportConsumeProto} ReportConsumeProto instance\n         */\n        ReportConsumeProto.create = function create(properties) {\n            return new ReportConsumeProto(properties);\n        };\n\n        /**\n         * Encodes the specified ReportConsumeProto message. Does not implicitly {@link casper.ReportConsumeProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ReportConsumeProto\n         * @static\n         * @param {casper.IReportConsumeProto} message ReportConsumeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReportConsumeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.channels != null && message.channels.length)\n                for (var i = 0; i < message.channels.length; ++i)\n                    $root.Par.encode(message.channels[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.patterns != null && message.patterns.length)\n                for (var i = 0; i < message.patterns.length; ++i)\n                    $root.BindPattern.encode(message.patterns[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.peeks != null && message.peeks.length)\n                for (var i = 0; i < message.peeks.length; ++i)\n                    $root.casper.PeekProto.encode(message.peeks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ReportConsumeProto message, length delimited. Does not implicitly {@link casper.ReportConsumeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ReportConsumeProto\n         * @static\n         * @param {casper.IReportConsumeProto} message ReportConsumeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReportConsumeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ReportConsumeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ReportConsumeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ReportConsumeProto} ReportConsumeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReportConsumeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ReportConsumeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.channels && message.channels.length))\n                        message.channels = [];\n                    message.channels.push($root.Par.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    if (!(message.patterns && message.patterns.length))\n                        message.patterns = [];\n                    message.patterns.push($root.BindPattern.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    if (!(message.peeks && message.peeks.length))\n                        message.peeks = [];\n                    message.peeks.push($root.casper.PeekProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ReportConsumeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ReportConsumeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ReportConsumeProto} ReportConsumeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReportConsumeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ReportConsumeProto message.\n         * @function verify\n         * @memberof casper.ReportConsumeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ReportConsumeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.channels != null && message.hasOwnProperty(\"channels\")) {\n                if (!Array.isArray(message.channels))\n                    return \"channels: array expected\";\n                for (var i = 0; i < message.channels.length; ++i) {\n                    var error = $root.Par.verify(message.channels[i]);\n                    if (error)\n                        return \"channels.\" + error;\n                }\n            }\n            if (message.patterns != null && message.hasOwnProperty(\"patterns\")) {\n                if (!Array.isArray(message.patterns))\n                    return \"patterns: array expected\";\n                for (var i = 0; i < message.patterns.length; ++i) {\n                    var error = $root.BindPattern.verify(message.patterns[i]);\n                    if (error)\n                        return \"patterns.\" + error;\n                }\n            }\n            if (message.peeks != null && message.hasOwnProperty(\"peeks\")) {\n                if (!Array.isArray(message.peeks))\n                    return \"peeks: array expected\";\n                for (var i = 0; i < message.peeks.length; ++i) {\n                    var error = $root.casper.PeekProto.verify(message.peeks[i]);\n                    if (error)\n                        return \"peeks.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ReportConsumeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ReportConsumeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ReportConsumeProto} ReportConsumeProto\n         */\n        ReportConsumeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ReportConsumeProto)\n                return object;\n            var message = new $root.casper.ReportConsumeProto();\n            if (object.channels) {\n                if (!Array.isArray(object.channels))\n                    throw TypeError(\".casper.ReportConsumeProto.channels: array expected\");\n                message.channels = [];\n                for (var i = 0; i < object.channels.length; ++i) {\n                    if (typeof object.channels[i] !== \"object\")\n                        throw TypeError(\".casper.ReportConsumeProto.channels: object expected\");\n                    message.channels[i] = $root.Par.fromObject(object.channels[i]);\n                }\n            }\n            if (object.patterns) {\n                if (!Array.isArray(object.patterns))\n                    throw TypeError(\".casper.ReportConsumeProto.patterns: array expected\");\n                message.patterns = [];\n                for (var i = 0; i < object.patterns.length; ++i) {\n                    if (typeof object.patterns[i] !== \"object\")\n                        throw TypeError(\".casper.ReportConsumeProto.patterns: object expected\");\n                    message.patterns[i] = $root.BindPattern.fromObject(object.patterns[i]);\n                }\n            }\n            if (object.peeks) {\n                if (!Array.isArray(object.peeks))\n                    throw TypeError(\".casper.ReportConsumeProto.peeks: array expected\");\n                message.peeks = [];\n                for (var i = 0; i < object.peeks.length; ++i) {\n                    if (typeof object.peeks[i] !== \"object\")\n                        throw TypeError(\".casper.ReportConsumeProto.peeks: object expected\");\n                    message.peeks[i] = $root.casper.PeekProto.fromObject(object.peeks[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ReportConsumeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ReportConsumeProto\n         * @static\n         * @param {casper.ReportConsumeProto} message ReportConsumeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ReportConsumeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.channels = [];\n                object.patterns = [];\n                object.peeks = [];\n            }\n            if (message.channels && message.channels.length) {\n                object.channels = [];\n                for (var j = 0; j < message.channels.length; ++j)\n                    object.channels[j] = $root.Par.toObject(message.channels[j], options);\n            }\n            if (message.patterns && message.patterns.length) {\n                object.patterns = [];\n                for (var j = 0; j < message.patterns.length; ++j)\n                    object.patterns[j] = $root.BindPattern.toObject(message.patterns[j], options);\n            }\n            if (message.peeks && message.peeks.length) {\n                object.peeks = [];\n                for (var j = 0; j < message.peeks.length; ++j)\n                    object.peeks[j] = $root.casper.PeekProto.toObject(message.peeks[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ReportConsumeProto to JSON.\n         * @function toJSON\n         * @memberof casper.ReportConsumeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ReportConsumeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ReportConsumeProto;\n    })();\n\n    casper.ReportCommProto = (function() {\n\n        /**\n         * Properties of a ReportCommProto.\n         * @memberof casper\n         * @interface IReportCommProto\n         * @property {casper.IReportConsumeProto|null} [consume] ReportCommProto consume\n         * @property {Array.<casper.IReportProduceProto>|null} [produces] ReportCommProto produces\n         */\n\n        /**\n         * Constructs a new ReportCommProto.\n         * @memberof casper\n         * @classdesc Represents a ReportCommProto.\n         * @implements IReportCommProto\n         * @constructor\n         * @param {casper.IReportCommProto=} [properties] Properties to set\n         */\n        function ReportCommProto(properties) {\n            this.produces = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ReportCommProto consume.\n         * @member {casper.IReportConsumeProto|null|undefined} consume\n         * @memberof casper.ReportCommProto\n         * @instance\n         */\n        ReportCommProto.prototype.consume = null;\n\n        /**\n         * ReportCommProto produces.\n         * @member {Array.<casper.IReportProduceProto>} produces\n         * @memberof casper.ReportCommProto\n         * @instance\n         */\n        ReportCommProto.prototype.produces = $util.emptyArray;\n\n        /**\n         * Creates a new ReportCommProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ReportCommProto\n         * @static\n         * @param {casper.IReportCommProto=} [properties] Properties to set\n         * @returns {casper.ReportCommProto} ReportCommProto instance\n         */\n        ReportCommProto.create = function create(properties) {\n            return new ReportCommProto(properties);\n        };\n\n        /**\n         * Encodes the specified ReportCommProto message. Does not implicitly {@link casper.ReportCommProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ReportCommProto\n         * @static\n         * @param {casper.IReportCommProto} message ReportCommProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReportCommProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.consume != null && message.hasOwnProperty(\"consume\"))\n                $root.casper.ReportConsumeProto.encode(message.consume, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.produces != null && message.produces.length)\n                for (var i = 0; i < message.produces.length; ++i)\n                    $root.casper.ReportProduceProto.encode(message.produces[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ReportCommProto message, length delimited. Does not implicitly {@link casper.ReportCommProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ReportCommProto\n         * @static\n         * @param {casper.IReportCommProto} message ReportCommProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReportCommProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ReportCommProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ReportCommProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ReportCommProto} ReportCommProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReportCommProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ReportCommProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.consume = $root.casper.ReportConsumeProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    if (!(message.produces && message.produces.length))\n                        message.produces = [];\n                    message.produces.push($root.casper.ReportProduceProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ReportCommProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ReportCommProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ReportCommProto} ReportCommProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReportCommProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ReportCommProto message.\n         * @function verify\n         * @memberof casper.ReportCommProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ReportCommProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.consume != null && message.hasOwnProperty(\"consume\")) {\n                var error = $root.casper.ReportConsumeProto.verify(message.consume);\n                if (error)\n                    return \"consume.\" + error;\n            }\n            if (message.produces != null && message.hasOwnProperty(\"produces\")) {\n                if (!Array.isArray(message.produces))\n                    return \"produces: array expected\";\n                for (var i = 0; i < message.produces.length; ++i) {\n                    var error = $root.casper.ReportProduceProto.verify(message.produces[i]);\n                    if (error)\n                        return \"produces.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ReportCommProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ReportCommProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ReportCommProto} ReportCommProto\n         */\n        ReportCommProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ReportCommProto)\n                return object;\n            var message = new $root.casper.ReportCommProto();\n            if (object.consume != null) {\n                if (typeof object.consume !== \"object\")\n                    throw TypeError(\".casper.ReportCommProto.consume: object expected\");\n                message.consume = $root.casper.ReportConsumeProto.fromObject(object.consume);\n            }\n            if (object.produces) {\n                if (!Array.isArray(object.produces))\n                    throw TypeError(\".casper.ReportCommProto.produces: array expected\");\n                message.produces = [];\n                for (var i = 0; i < object.produces.length; ++i) {\n                    if (typeof object.produces[i] !== \"object\")\n                        throw TypeError(\".casper.ReportCommProto.produces: object expected\");\n                    message.produces[i] = $root.casper.ReportProduceProto.fromObject(object.produces[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ReportCommProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ReportCommProto\n         * @static\n         * @param {casper.ReportCommProto} message ReportCommProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ReportCommProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.produces = [];\n            if (options.defaults)\n                object.consume = null;\n            if (message.consume != null && message.hasOwnProperty(\"consume\"))\n                object.consume = $root.casper.ReportConsumeProto.toObject(message.consume, options);\n            if (message.produces && message.produces.length) {\n                object.produces = [];\n                for (var j = 0; j < message.produces.length; ++j)\n                    object.produces[j] = $root.casper.ReportProduceProto.toObject(message.produces[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ReportCommProto to JSON.\n         * @function toJSON\n         * @memberof casper.ReportCommProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ReportCommProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ReportCommProto;\n    })();\n\n    casper.ReportProto = (function() {\n\n        /**\n         * Properties of a ReportProto.\n         * @memberof casper\n         * @interface IReportProto\n         * @property {casper.IReportProduceProto|null} [produce] ReportProto produce\n         * @property {casper.IReportConsumeProto|null} [consume] ReportProto consume\n         * @property {casper.IReportCommProto|null} [comm] ReportProto comm\n         */\n\n        /**\n         * Constructs a new ReportProto.\n         * @memberof casper\n         * @classdesc Represents a ReportProto.\n         * @implements IReportProto\n         * @constructor\n         * @param {casper.IReportProto=} [properties] Properties to set\n         */\n        function ReportProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ReportProto produce.\n         * @member {casper.IReportProduceProto|null|undefined} produce\n         * @memberof casper.ReportProto\n         * @instance\n         */\n        ReportProto.prototype.produce = null;\n\n        /**\n         * ReportProto consume.\n         * @member {casper.IReportConsumeProto|null|undefined} consume\n         * @memberof casper.ReportProto\n         * @instance\n         */\n        ReportProto.prototype.consume = null;\n\n        /**\n         * ReportProto comm.\n         * @member {casper.IReportCommProto|null|undefined} comm\n         * @memberof casper.ReportProto\n         * @instance\n         */\n        ReportProto.prototype.comm = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * ReportProto report.\n         * @member {\"produce\"|\"consume\"|\"comm\"|undefined} report\n         * @memberof casper.ReportProto\n         * @instance\n         */\n        Object.defineProperty(ReportProto.prototype, \"report\", {\n            get: $util.oneOfGetter($oneOfFields = [\"produce\", \"consume\", \"comm\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ReportProto instance using the specified properties.\n         * @function create\n         * @memberof casper.ReportProto\n         * @static\n         * @param {casper.IReportProto=} [properties] Properties to set\n         * @returns {casper.ReportProto} ReportProto instance\n         */\n        ReportProto.create = function create(properties) {\n            return new ReportProto(properties);\n        };\n\n        /**\n         * Encodes the specified ReportProto message. Does not implicitly {@link casper.ReportProto.verify|verify} messages.\n         * @function encode\n         * @memberof casper.ReportProto\n         * @static\n         * @param {casper.IReportProto} message ReportProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReportProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.produce != null && message.hasOwnProperty(\"produce\"))\n                $root.casper.ReportProduceProto.encode(message.produce, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.consume != null && message.hasOwnProperty(\"consume\"))\n                $root.casper.ReportConsumeProto.encode(message.consume, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.comm != null && message.hasOwnProperty(\"comm\"))\n                $root.casper.ReportCommProto.encode(message.comm, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ReportProto message, length delimited. Does not implicitly {@link casper.ReportProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.ReportProto\n         * @static\n         * @param {casper.IReportProto} message ReportProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ReportProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ReportProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.ReportProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.ReportProto} ReportProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReportProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.ReportProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.produce = $root.casper.ReportProduceProto.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.consume = $root.casper.ReportConsumeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.comm = $root.casper.ReportCommProto.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ReportProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.ReportProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.ReportProto} ReportProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ReportProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ReportProto message.\n         * @function verify\n         * @memberof casper.ReportProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ReportProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.produce != null && message.hasOwnProperty(\"produce\")) {\n                properties.report = 1;\n                {\n                    var error = $root.casper.ReportProduceProto.verify(message.produce);\n                    if (error)\n                        return \"produce.\" + error;\n                }\n            }\n            if (message.consume != null && message.hasOwnProperty(\"consume\")) {\n                if (properties.report === 1)\n                    return \"report: multiple values\";\n                properties.report = 1;\n                {\n                    var error = $root.casper.ReportConsumeProto.verify(message.consume);\n                    if (error)\n                        return \"consume.\" + error;\n                }\n            }\n            if (message.comm != null && message.hasOwnProperty(\"comm\")) {\n                if (properties.report === 1)\n                    return \"report: multiple values\";\n                properties.report = 1;\n                {\n                    var error = $root.casper.ReportCommProto.verify(message.comm);\n                    if (error)\n                        return \"comm.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ReportProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.ReportProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.ReportProto} ReportProto\n         */\n        ReportProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.ReportProto)\n                return object;\n            var message = new $root.casper.ReportProto();\n            if (object.produce != null) {\n                if (typeof object.produce !== \"object\")\n                    throw TypeError(\".casper.ReportProto.produce: object expected\");\n                message.produce = $root.casper.ReportProduceProto.fromObject(object.produce);\n            }\n            if (object.consume != null) {\n                if (typeof object.consume !== \"object\")\n                    throw TypeError(\".casper.ReportProto.consume: object expected\");\n                message.consume = $root.casper.ReportConsumeProto.fromObject(object.consume);\n            }\n            if (object.comm != null) {\n                if (typeof object.comm !== \"object\")\n                    throw TypeError(\".casper.ReportProto.comm: object expected\");\n                message.comm = $root.casper.ReportCommProto.fromObject(object.comm);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ReportProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.ReportProto\n         * @static\n         * @param {casper.ReportProto} message ReportProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ReportProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.produce != null && message.hasOwnProperty(\"produce\")) {\n                object.produce = $root.casper.ReportProduceProto.toObject(message.produce, options);\n                if (options.oneofs)\n                    object.report = \"produce\";\n            }\n            if (message.consume != null && message.hasOwnProperty(\"consume\")) {\n                object.consume = $root.casper.ReportConsumeProto.toObject(message.consume, options);\n                if (options.oneofs)\n                    object.report = \"consume\";\n            }\n            if (message.comm != null && message.hasOwnProperty(\"comm\")) {\n                object.comm = $root.casper.ReportCommProto.toObject(message.comm, options);\n                if (options.oneofs)\n                    object.report = \"comm\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ReportProto to JSON.\n         * @function toJSON\n         * @memberof casper.ReportProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ReportProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ReportProto;\n    })();\n\n    casper.SingleReport = (function() {\n\n        /**\n         * Properties of a SingleReport.\n         * @memberof casper\n         * @interface ISingleReport\n         * @property {Array.<casper.IReportProto>|null} [events] SingleReport events\n         */\n\n        /**\n         * Constructs a new SingleReport.\n         * @memberof casper\n         * @classdesc Represents a SingleReport.\n         * @implements ISingleReport\n         * @constructor\n         * @param {casper.ISingleReport=} [properties] Properties to set\n         */\n        function SingleReport(properties) {\n            this.events = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SingleReport events.\n         * @member {Array.<casper.IReportProto>} events\n         * @memberof casper.SingleReport\n         * @instance\n         */\n        SingleReport.prototype.events = $util.emptyArray;\n\n        /**\n         * Creates a new SingleReport instance using the specified properties.\n         * @function create\n         * @memberof casper.SingleReport\n         * @static\n         * @param {casper.ISingleReport=} [properties] Properties to set\n         * @returns {casper.SingleReport} SingleReport instance\n         */\n        SingleReport.create = function create(properties) {\n            return new SingleReport(properties);\n        };\n\n        /**\n         * Encodes the specified SingleReport message. Does not implicitly {@link casper.SingleReport.verify|verify} messages.\n         * @function encode\n         * @memberof casper.SingleReport\n         * @static\n         * @param {casper.ISingleReport} message SingleReport message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SingleReport.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.events != null && message.events.length)\n                for (var i = 0; i < message.events.length; ++i)\n                    $root.casper.ReportProto.encode(message.events[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SingleReport message, length delimited. Does not implicitly {@link casper.SingleReport.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.SingleReport\n         * @static\n         * @param {casper.ISingleReport} message SingleReport message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SingleReport.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SingleReport message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.SingleReport\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.SingleReport} SingleReport\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SingleReport.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.SingleReport();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.events && message.events.length))\n                        message.events = [];\n                    message.events.push($root.casper.ReportProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SingleReport message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.SingleReport\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.SingleReport} SingleReport\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SingleReport.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SingleReport message.\n         * @function verify\n         * @memberof casper.SingleReport\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SingleReport.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.events != null && message.hasOwnProperty(\"events\")) {\n                if (!Array.isArray(message.events))\n                    return \"events: array expected\";\n                for (var i = 0; i < message.events.length; ++i) {\n                    var error = $root.casper.ReportProto.verify(message.events[i]);\n                    if (error)\n                        return \"events.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SingleReport message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.SingleReport\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.SingleReport} SingleReport\n         */\n        SingleReport.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.SingleReport)\n                return object;\n            var message = new $root.casper.SingleReport();\n            if (object.events) {\n                if (!Array.isArray(object.events))\n                    throw TypeError(\".casper.SingleReport.events: array expected\");\n                message.events = [];\n                for (var i = 0; i < object.events.length; ++i) {\n                    if (typeof object.events[i] !== \"object\")\n                        throw TypeError(\".casper.SingleReport.events: object expected\");\n                    message.events[i] = $root.casper.ReportProto.fromObject(object.events[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SingleReport message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.SingleReport\n         * @static\n         * @param {casper.SingleReport} message SingleReport\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SingleReport.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.events = [];\n            if (message.events && message.events.length) {\n                object.events = [];\n                for (var j = 0; j < message.events.length; ++j)\n                    object.events[j] = $root.casper.ReportProto.toObject(message.events[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SingleReport to JSON.\n         * @function toJSON\n         * @memberof casper.SingleReport\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SingleReport.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return SingleReport;\n    })();\n\n    casper.DeployInfoWithEventData = (function() {\n\n        /**\n         * Properties of a DeployInfoWithEventData.\n         * @memberof casper\n         * @interface IDeployInfoWithEventData\n         * @property {casper.IDeployInfo|null} [deployInfo] DeployInfoWithEventData deployInfo\n         * @property {Array.<casper.ISingleReport>|null} [report] DeployInfoWithEventData report\n         */\n\n        /**\n         * Constructs a new DeployInfoWithEventData.\n         * @memberof casper\n         * @classdesc Represents a DeployInfoWithEventData.\n         * @implements IDeployInfoWithEventData\n         * @constructor\n         * @param {casper.IDeployInfoWithEventData=} [properties] Properties to set\n         */\n        function DeployInfoWithEventData(properties) {\n            this.report = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * DeployInfoWithEventData deployInfo.\n         * @member {casper.IDeployInfo|null|undefined} deployInfo\n         * @memberof casper.DeployInfoWithEventData\n         * @instance\n         */\n        DeployInfoWithEventData.prototype.deployInfo = null;\n\n        /**\n         * DeployInfoWithEventData report.\n         * @member {Array.<casper.ISingleReport>} report\n         * @memberof casper.DeployInfoWithEventData\n         * @instance\n         */\n        DeployInfoWithEventData.prototype.report = $util.emptyArray;\n\n        /**\n         * Creates a new DeployInfoWithEventData instance using the specified properties.\n         * @function create\n         * @memberof casper.DeployInfoWithEventData\n         * @static\n         * @param {casper.IDeployInfoWithEventData=} [properties] Properties to set\n         * @returns {casper.DeployInfoWithEventData} DeployInfoWithEventData instance\n         */\n        DeployInfoWithEventData.create = function create(properties) {\n            return new DeployInfoWithEventData(properties);\n        };\n\n        /**\n         * Encodes the specified DeployInfoWithEventData message. Does not implicitly {@link casper.DeployInfoWithEventData.verify|verify} messages.\n         * @function encode\n         * @memberof casper.DeployInfoWithEventData\n         * @static\n         * @param {casper.IDeployInfoWithEventData} message DeployInfoWithEventData message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeployInfoWithEventData.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.deployInfo != null && message.hasOwnProperty(\"deployInfo\"))\n                $root.casper.DeployInfo.encode(message.deployInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.report != null && message.report.length)\n                for (var i = 0; i < message.report.length; ++i)\n                    $root.casper.SingleReport.encode(message.report[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified DeployInfoWithEventData message, length delimited. Does not implicitly {@link casper.DeployInfoWithEventData.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.DeployInfoWithEventData\n         * @static\n         * @param {casper.IDeployInfoWithEventData} message DeployInfoWithEventData message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        DeployInfoWithEventData.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a DeployInfoWithEventData message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.DeployInfoWithEventData\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.DeployInfoWithEventData} DeployInfoWithEventData\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeployInfoWithEventData.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.DeployInfoWithEventData();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.deployInfo = $root.casper.DeployInfo.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    if (!(message.report && message.report.length))\n                        message.report = [];\n                    message.report.push($root.casper.SingleReport.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a DeployInfoWithEventData message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.DeployInfoWithEventData\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.DeployInfoWithEventData} DeployInfoWithEventData\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        DeployInfoWithEventData.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a DeployInfoWithEventData message.\n         * @function verify\n         * @memberof casper.DeployInfoWithEventData\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        DeployInfoWithEventData.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.deployInfo != null && message.hasOwnProperty(\"deployInfo\")) {\n                var error = $root.casper.DeployInfo.verify(message.deployInfo);\n                if (error)\n                    return \"deployInfo.\" + error;\n            }\n            if (message.report != null && message.hasOwnProperty(\"report\")) {\n                if (!Array.isArray(message.report))\n                    return \"report: array expected\";\n                for (var i = 0; i < message.report.length; ++i) {\n                    var error = $root.casper.SingleReport.verify(message.report[i]);\n                    if (error)\n                        return \"report.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a DeployInfoWithEventData message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.DeployInfoWithEventData\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.DeployInfoWithEventData} DeployInfoWithEventData\n         */\n        DeployInfoWithEventData.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.DeployInfoWithEventData)\n                return object;\n            var message = new $root.casper.DeployInfoWithEventData();\n            if (object.deployInfo != null) {\n                if (typeof object.deployInfo !== \"object\")\n                    throw TypeError(\".casper.DeployInfoWithEventData.deployInfo: object expected\");\n                message.deployInfo = $root.casper.DeployInfo.fromObject(object.deployInfo);\n            }\n            if (object.report) {\n                if (!Array.isArray(object.report))\n                    throw TypeError(\".casper.DeployInfoWithEventData.report: array expected\");\n                message.report = [];\n                for (var i = 0; i < object.report.length; ++i) {\n                    if (typeof object.report[i] !== \"object\")\n                        throw TypeError(\".casper.DeployInfoWithEventData.report: object expected\");\n                    message.report[i] = $root.casper.SingleReport.fromObject(object.report[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a DeployInfoWithEventData message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.DeployInfoWithEventData\n         * @static\n         * @param {casper.DeployInfoWithEventData} message DeployInfoWithEventData\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        DeployInfoWithEventData.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.report = [];\n            if (options.defaults)\n                object.deployInfo = null;\n            if (message.deployInfo != null && message.hasOwnProperty(\"deployInfo\"))\n                object.deployInfo = $root.casper.DeployInfo.toObject(message.deployInfo, options);\n            if (message.report && message.report.length) {\n                object.report = [];\n                for (var j = 0; j < message.report.length; ++j)\n                    object.report[j] = $root.casper.SingleReport.toObject(message.report[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this DeployInfoWithEventData to JSON.\n         * @function toJSON\n         * @memberof casper.DeployInfoWithEventData\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        DeployInfoWithEventData.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return DeployInfoWithEventData;\n    })();\n\n    casper.BlockEventInfo = (function() {\n\n        /**\n         * Properties of a BlockEventInfo.\n         * @memberof casper\n         * @interface IBlockEventInfo\n         * @property {casper.ILightBlockInfo|null} [blockInfo] BlockEventInfo blockInfo\n         * @property {Array.<casper.IDeployInfoWithEventData>|null} [deploys] BlockEventInfo deploys\n         */\n\n        /**\n         * Constructs a new BlockEventInfo.\n         * @memberof casper\n         * @classdesc Represents a BlockEventInfo.\n         * @implements IBlockEventInfo\n         * @constructor\n         * @param {casper.IBlockEventInfo=} [properties] Properties to set\n         */\n        function BlockEventInfo(properties) {\n            this.deploys = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * BlockEventInfo blockInfo.\n         * @member {casper.ILightBlockInfo|null|undefined} blockInfo\n         * @memberof casper.BlockEventInfo\n         * @instance\n         */\n        BlockEventInfo.prototype.blockInfo = null;\n\n        /**\n         * BlockEventInfo deploys.\n         * @member {Array.<casper.IDeployInfoWithEventData>} deploys\n         * @memberof casper.BlockEventInfo\n         * @instance\n         */\n        BlockEventInfo.prototype.deploys = $util.emptyArray;\n\n        /**\n         * Creates a new BlockEventInfo instance using the specified properties.\n         * @function create\n         * @memberof casper.BlockEventInfo\n         * @static\n         * @param {casper.IBlockEventInfo=} [properties] Properties to set\n         * @returns {casper.BlockEventInfo} BlockEventInfo instance\n         */\n        BlockEventInfo.create = function create(properties) {\n            return new BlockEventInfo(properties);\n        };\n\n        /**\n         * Encodes the specified BlockEventInfo message. Does not implicitly {@link casper.BlockEventInfo.verify|verify} messages.\n         * @function encode\n         * @memberof casper.BlockEventInfo\n         * @static\n         * @param {casper.IBlockEventInfo} message BlockEventInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockEventInfo.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\"))\n                $root.casper.LightBlockInfo.encode(message.blockInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.deploys != null && message.deploys.length)\n                for (var i = 0; i < message.deploys.length; ++i)\n                    $root.casper.DeployInfoWithEventData.encode(message.deploys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified BlockEventInfo message, length delimited. Does not implicitly {@link casper.BlockEventInfo.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.BlockEventInfo\n         * @static\n         * @param {casper.IBlockEventInfo} message BlockEventInfo message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockEventInfo.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a BlockEventInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.BlockEventInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.BlockEventInfo} BlockEventInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockEventInfo.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.BlockEventInfo();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.blockInfo = $root.casper.LightBlockInfo.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    if (!(message.deploys && message.deploys.length))\n                        message.deploys = [];\n                    message.deploys.push($root.casper.DeployInfoWithEventData.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a BlockEventInfo message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.BlockEventInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.BlockEventInfo} BlockEventInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockEventInfo.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a BlockEventInfo message.\n         * @function verify\n         * @memberof casper.BlockEventInfo\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        BlockEventInfo.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                var error = $root.casper.LightBlockInfo.verify(message.blockInfo);\n                if (error)\n                    return \"blockInfo.\" + error;\n            }\n            if (message.deploys != null && message.hasOwnProperty(\"deploys\")) {\n                if (!Array.isArray(message.deploys))\n                    return \"deploys: array expected\";\n                for (var i = 0; i < message.deploys.length; ++i) {\n                    var error = $root.casper.DeployInfoWithEventData.verify(message.deploys[i]);\n                    if (error)\n                        return \"deploys.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a BlockEventInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.BlockEventInfo\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.BlockEventInfo} BlockEventInfo\n         */\n        BlockEventInfo.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.BlockEventInfo)\n                return object;\n            var message = new $root.casper.BlockEventInfo();\n            if (object.blockInfo != null) {\n                if (typeof object.blockInfo !== \"object\")\n                    throw TypeError(\".casper.BlockEventInfo.blockInfo: object expected\");\n                message.blockInfo = $root.casper.LightBlockInfo.fromObject(object.blockInfo);\n            }\n            if (object.deploys) {\n                if (!Array.isArray(object.deploys))\n                    throw TypeError(\".casper.BlockEventInfo.deploys: array expected\");\n                message.deploys = [];\n                for (var i = 0; i < object.deploys.length; ++i) {\n                    if (typeof object.deploys[i] !== \"object\")\n                        throw TypeError(\".casper.BlockEventInfo.deploys: object expected\");\n                    message.deploys[i] = $root.casper.DeployInfoWithEventData.fromObject(object.deploys[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a BlockEventInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.BlockEventInfo\n         * @static\n         * @param {casper.BlockEventInfo} message BlockEventInfo\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockEventInfo.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.deploys = [];\n            if (options.defaults)\n                object.blockInfo = null;\n            if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\"))\n                object.blockInfo = $root.casper.LightBlockInfo.toObject(message.blockInfo, options);\n            if (message.deploys && message.deploys.length) {\n                object.deploys = [];\n                for (var j = 0; j < message.deploys.length; ++j)\n                    object.deploys[j] = $root.casper.DeployInfoWithEventData.toObject(message.deploys[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this BlockEventInfo to JSON.\n         * @function toJSON\n         * @memberof casper.BlockEventInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockEventInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return BlockEventInfo;\n    })();\n\n    casper.v1 = (function() {\n\n        /**\n         * Namespace v1.\n         * @memberof casper\n         * @namespace\n         */\n        var v1 = {};\n\n        v1.DeployService = (function() {\n\n            /**\n             * Constructs a new DeployService service.\n             * @memberof casper.v1\n             * @classdesc Represents a DeployService\n             * @extends $protobuf.rpc.Service\n             * @constructor\n             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n             */\n            function DeployService(rpcImpl, requestDelimited, responseDelimited) {\n                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n            }\n\n            (DeployService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = DeployService;\n\n            /**\n             * Creates new DeployService service using the specified rpc implementation.\n             * @function create\n             * @memberof casper.v1.DeployService\n             * @static\n             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n             * @returns {DeployService} RPC service. Useful where requests and/or responses are streamed.\n             */\n            DeployService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                return new this(rpcImpl, requestDelimited, responseDelimited);\n            };\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#doDeploy}.\n             * @memberof casper.v1.DeployService\n             * @typedef doDeployCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.DeployResponse} [response] DeployResponse\n             */\n\n            /**\n             * Calls doDeploy.\n             * @function doDeploy\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IDeployDataProto} request DeployDataProto message or plain object\n             * @param {casper.v1.DeployService.doDeployCallback} callback Node-style callback called with the error, if any, and DeployResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.doDeploy = function doDeploy(request, callback) {\n                return this.rpcCall(doDeploy, $root.casper.DeployDataProto, $root.casper.v1.DeployResponse, request, callback);\n            }, \"name\", { value: \"doDeploy\" });\n\n            /**\n             * Calls doDeploy.\n             * @function doDeploy\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IDeployDataProto} request DeployDataProto message or plain object\n             * @returns {Promise<casper.v1.DeployResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#getBlock}.\n             * @memberof casper.v1.DeployService\n             * @typedef getBlockCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.BlockResponse} [response] BlockResponse\n             */\n\n            /**\n             * Calls getBlock.\n             * @function getBlock\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlockQuery} request BlockQuery message or plain object\n             * @param {casper.v1.DeployService.getBlockCallback} callback Node-style callback called with the error, if any, and BlockResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.getBlock = function getBlock(request, callback) {\n                return this.rpcCall(getBlock, $root.casper.BlockQuery, $root.casper.v1.BlockResponse, request, callback);\n            }, \"name\", { value: \"getBlock\" });\n\n            /**\n             * Calls getBlock.\n             * @function getBlock\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlockQuery} request BlockQuery message or plain object\n             * @returns {Promise<casper.v1.BlockResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#visualizeDag}.\n             * @memberof casper.v1.DeployService\n             * @typedef visualizeDagCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.VisualizeBlocksResponse} [response] VisualizeBlocksResponse\n             */\n\n            /**\n             * Calls visualizeDag.\n             * @function visualizeDag\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IVisualizeDagQuery} request VisualizeDagQuery message or plain object\n             * @param {casper.v1.DeployService.visualizeDagCallback} callback Node-style callback called with the error, if any, and VisualizeBlocksResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.visualizeDag = function visualizeDag(request, callback) {\n                return this.rpcCall(visualizeDag, $root.casper.VisualizeDagQuery, $root.casper.v1.VisualizeBlocksResponse, request, callback);\n            }, \"name\", { value: \"visualizeDag\" });\n\n            /**\n             * Calls visualizeDag.\n             * @function visualizeDag\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IVisualizeDagQuery} request VisualizeDagQuery message or plain object\n             * @returns {Promise<casper.v1.VisualizeBlocksResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#machineVerifiableDag}.\n             * @memberof casper.v1.DeployService\n             * @typedef machineVerifiableDagCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.MachineVerifyResponse} [response] MachineVerifyResponse\n             */\n\n            /**\n             * Calls machineVerifiableDag.\n             * @function machineVerifiableDag\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IMachineVerifyQuery} request MachineVerifyQuery message or plain object\n             * @param {casper.v1.DeployService.machineVerifiableDagCallback} callback Node-style callback called with the error, if any, and MachineVerifyResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.machineVerifiableDag = function machineVerifiableDag(request, callback) {\n                return this.rpcCall(machineVerifiableDag, $root.casper.MachineVerifyQuery, $root.casper.v1.MachineVerifyResponse, request, callback);\n            }, \"name\", { value: \"machineVerifiableDag\" });\n\n            /**\n             * Calls machineVerifiableDag.\n             * @function machineVerifiableDag\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IMachineVerifyQuery} request MachineVerifyQuery message or plain object\n             * @returns {Promise<casper.v1.MachineVerifyResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#showMainChain}.\n             * @memberof casper.v1.DeployService\n             * @typedef showMainChainCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.BlockInfoResponse} [response] BlockInfoResponse\n             */\n\n            /**\n             * Calls showMainChain.\n             * @function showMainChain\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlocksQuery} request BlocksQuery message or plain object\n             * @param {casper.v1.DeployService.showMainChainCallback} callback Node-style callback called with the error, if any, and BlockInfoResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.showMainChain = function showMainChain(request, callback) {\n                return this.rpcCall(showMainChain, $root.casper.BlocksQuery, $root.casper.v1.BlockInfoResponse, request, callback);\n            }, \"name\", { value: \"showMainChain\" });\n\n            /**\n             * Calls showMainChain.\n             * @function showMainChain\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlocksQuery} request BlocksQuery message or plain object\n             * @returns {Promise<casper.v1.BlockInfoResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#getBlocks}.\n             * @memberof casper.v1.DeployService\n             * @typedef getBlocksCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.BlockInfoResponse} [response] BlockInfoResponse\n             */\n\n            /**\n             * Calls getBlocks.\n             * @function getBlocks\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlocksQuery} request BlocksQuery message or plain object\n             * @param {casper.v1.DeployService.getBlocksCallback} callback Node-style callback called with the error, if any, and BlockInfoResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.getBlocks = function getBlocks(request, callback) {\n                return this.rpcCall(getBlocks, $root.casper.BlocksQuery, $root.casper.v1.BlockInfoResponse, request, callback);\n            }, \"name\", { value: \"getBlocks\" });\n\n            /**\n             * Calls getBlocks.\n             * @function getBlocks\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlocksQuery} request BlocksQuery message or plain object\n             * @returns {Promise<casper.v1.BlockInfoResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#listenForDataAtName}.\n             * @memberof casper.v1.DeployService\n             * @typedef listenForDataAtNameCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.ListeningNameDataResponse} [response] ListeningNameDataResponse\n             */\n\n            /**\n             * Calls listenForDataAtName.\n             * @function listenForDataAtName\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IDataAtNameQuery} request DataAtNameQuery message or plain object\n             * @param {casper.v1.DeployService.listenForDataAtNameCallback} callback Node-style callback called with the error, if any, and ListeningNameDataResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.listenForDataAtName = function listenForDataAtName(request, callback) {\n                return this.rpcCall(listenForDataAtName, $root.casper.DataAtNameQuery, $root.casper.v1.ListeningNameDataResponse, request, callback);\n            }, \"name\", { value: \"listenForDataAtName\" });\n\n            /**\n             * Calls listenForDataAtName.\n             * @function listenForDataAtName\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IDataAtNameQuery} request DataAtNameQuery message or plain object\n             * @returns {Promise<casper.v1.ListeningNameDataResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#listenForContinuationAtName}.\n             * @memberof casper.v1.DeployService\n             * @typedef listenForContinuationAtNameCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.ContinuationAtNameResponse} [response] ContinuationAtNameResponse\n             */\n\n            /**\n             * Calls listenForContinuationAtName.\n             * @function listenForContinuationAtName\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IContinuationAtNameQuery} request ContinuationAtNameQuery message or plain object\n             * @param {casper.v1.DeployService.listenForContinuationAtNameCallback} callback Node-style callback called with the error, if any, and ContinuationAtNameResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.listenForContinuationAtName = function listenForContinuationAtName(request, callback) {\n                return this.rpcCall(listenForContinuationAtName, $root.casper.ContinuationAtNameQuery, $root.casper.v1.ContinuationAtNameResponse, request, callback);\n            }, \"name\", { value: \"listenForContinuationAtName\" });\n\n            /**\n             * Calls listenForContinuationAtName.\n             * @function listenForContinuationAtName\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IContinuationAtNameQuery} request ContinuationAtNameQuery message or plain object\n             * @returns {Promise<casper.v1.ContinuationAtNameResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#findDeploy}.\n             * @memberof casper.v1.DeployService\n             * @typedef findDeployCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.FindDeployResponse} [response] FindDeployResponse\n             */\n\n            /**\n             * Calls findDeploy.\n             * @function findDeploy\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IFindDeployQuery} request FindDeployQuery message or plain object\n             * @param {casper.v1.DeployService.findDeployCallback} callback Node-style callback called with the error, if any, and FindDeployResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.findDeploy = function findDeploy(request, callback) {\n                return this.rpcCall(findDeploy, $root.casper.FindDeployQuery, $root.casper.v1.FindDeployResponse, request, callback);\n            }, \"name\", { value: \"findDeploy\" });\n\n            /**\n             * Calls findDeploy.\n             * @function findDeploy\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IFindDeployQuery} request FindDeployQuery message or plain object\n             * @returns {Promise<casper.v1.FindDeployResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#previewPrivateNames}.\n             * @memberof casper.v1.DeployService\n             * @typedef previewPrivateNamesCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.PrivateNamePreviewResponse} [response] PrivateNamePreviewResponse\n             */\n\n            /**\n             * Calls previewPrivateNames.\n             * @function previewPrivateNames\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IPrivateNamePreviewQuery} request PrivateNamePreviewQuery message or plain object\n             * @param {casper.v1.DeployService.previewPrivateNamesCallback} callback Node-style callback called with the error, if any, and PrivateNamePreviewResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.previewPrivateNames = function previewPrivateNames(request, callback) {\n                return this.rpcCall(previewPrivateNames, $root.casper.PrivateNamePreviewQuery, $root.casper.v1.PrivateNamePreviewResponse, request, callback);\n            }, \"name\", { value: \"previewPrivateNames\" });\n\n            /**\n             * Calls previewPrivateNames.\n             * @function previewPrivateNames\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IPrivateNamePreviewQuery} request PrivateNamePreviewQuery message or plain object\n             * @returns {Promise<casper.v1.PrivateNamePreviewResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#lastFinalizedBlock}.\n             * @memberof casper.v1.DeployService\n             * @typedef lastFinalizedBlockCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.LastFinalizedBlockResponse} [response] LastFinalizedBlockResponse\n             */\n\n            /**\n             * Calls lastFinalizedBlock.\n             * @function lastFinalizedBlock\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.ILastFinalizedBlockQuery} request LastFinalizedBlockQuery message or plain object\n             * @param {casper.v1.DeployService.lastFinalizedBlockCallback} callback Node-style callback called with the error, if any, and LastFinalizedBlockResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.lastFinalizedBlock = function lastFinalizedBlock(request, callback) {\n                return this.rpcCall(lastFinalizedBlock, $root.casper.LastFinalizedBlockQuery, $root.casper.v1.LastFinalizedBlockResponse, request, callback);\n            }, \"name\", { value: \"lastFinalizedBlock\" });\n\n            /**\n             * Calls lastFinalizedBlock.\n             * @function lastFinalizedBlock\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.ILastFinalizedBlockQuery} request LastFinalizedBlockQuery message or plain object\n             * @returns {Promise<casper.v1.LastFinalizedBlockResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#isFinalized}.\n             * @memberof casper.v1.DeployService\n             * @typedef isFinalizedCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.IsFinalizedResponse} [response] IsFinalizedResponse\n             */\n\n            /**\n             * Calls isFinalized.\n             * @function isFinalized\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IIsFinalizedQuery} request IsFinalizedQuery message or plain object\n             * @param {casper.v1.DeployService.isFinalizedCallback} callback Node-style callback called with the error, if any, and IsFinalizedResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.isFinalized = function isFinalized(request, callback) {\n                return this.rpcCall(isFinalized, $root.casper.IsFinalizedQuery, $root.casper.v1.IsFinalizedResponse, request, callback);\n            }, \"name\", { value: \"isFinalized\" });\n\n            /**\n             * Calls isFinalized.\n             * @function isFinalized\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IIsFinalizedQuery} request IsFinalizedQuery message or plain object\n             * @returns {Promise<casper.v1.IsFinalizedResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#bondStatus}.\n             * @memberof casper.v1.DeployService\n             * @typedef bondStatusCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.BondStatusResponse} [response] BondStatusResponse\n             */\n\n            /**\n             * Calls bondStatus.\n             * @function bondStatus\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBondStatusQuery} request BondStatusQuery message or plain object\n             * @param {casper.v1.DeployService.bondStatusCallback} callback Node-style callback called with the error, if any, and BondStatusResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.bondStatus = function bondStatus(request, callback) {\n                return this.rpcCall(bondStatus, $root.casper.BondStatusQuery, $root.casper.v1.BondStatusResponse, request, callback);\n            }, \"name\", { value: \"bondStatus\" });\n\n            /**\n             * Calls bondStatus.\n             * @function bondStatus\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBondStatusQuery} request BondStatusQuery message or plain object\n             * @returns {Promise<casper.v1.BondStatusResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#exploratoryDeploy}.\n             * @memberof casper.v1.DeployService\n             * @typedef exploratoryDeployCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.ExploratoryDeployResponse} [response] ExploratoryDeployResponse\n             */\n\n            /**\n             * Calls exploratoryDeploy.\n             * @function exploratoryDeploy\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IExploratoryDeployQuery} request ExploratoryDeployQuery message or plain object\n             * @param {casper.v1.DeployService.exploratoryDeployCallback} callback Node-style callback called with the error, if any, and ExploratoryDeployResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.exploratoryDeploy = function exploratoryDeploy(request, callback) {\n                return this.rpcCall(exploratoryDeploy, $root.casper.ExploratoryDeployQuery, $root.casper.v1.ExploratoryDeployResponse, request, callback);\n            }, \"name\", { value: \"exploratoryDeploy\" });\n\n            /**\n             * Calls exploratoryDeploy.\n             * @function exploratoryDeploy\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IExploratoryDeployQuery} request ExploratoryDeployQuery message or plain object\n             * @returns {Promise<casper.v1.ExploratoryDeployResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#getBlocksByHeights}.\n             * @memberof casper.v1.DeployService\n             * @typedef getBlocksByHeightsCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.BlockInfoResponse} [response] BlockInfoResponse\n             */\n\n            /**\n             * Calls getBlocksByHeights.\n             * @function getBlocksByHeights\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlocksQueryByHeight} request BlocksQueryByHeight message or plain object\n             * @param {casper.v1.DeployService.getBlocksByHeightsCallback} callback Node-style callback called with the error, if any, and BlockInfoResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.getBlocksByHeights = function getBlocksByHeights(request, callback) {\n                return this.rpcCall(getBlocksByHeights, $root.casper.BlocksQueryByHeight, $root.casper.v1.BlockInfoResponse, request, callback);\n            }, \"name\", { value: \"getBlocksByHeights\" });\n\n            /**\n             * Calls getBlocksByHeights.\n             * @function getBlocksByHeights\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlocksQueryByHeight} request BlocksQueryByHeight message or plain object\n             * @returns {Promise<casper.v1.BlockInfoResponse>} Promise\n             * @variation 2\n             */\n\n            /**\n             * Callback as used by {@link casper.v1.DeployService#getEventByHash}.\n             * @memberof casper.v1.DeployService\n             * @typedef getEventByHashCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.EventInfoResponse} [response] EventInfoResponse\n             */\n\n            /**\n             * Calls getEventByHash.\n             * @function getEventByHash\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlockQuery} request BlockQuery message or plain object\n             * @param {casper.v1.DeployService.getEventByHashCallback} callback Node-style callback called with the error, if any, and EventInfoResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(DeployService.prototype.getEventByHash = function getEventByHash(request, callback) {\n                return this.rpcCall(getEventByHash, $root.casper.BlockQuery, $root.casper.v1.EventInfoResponse, request, callback);\n            }, \"name\", { value: \"getEventByHash\" });\n\n            /**\n             * Calls getEventByHash.\n             * @function getEventByHash\n             * @memberof casper.v1.DeployService\n             * @instance\n             * @param {casper.IBlockQuery} request BlockQuery message or plain object\n             * @returns {Promise<casper.v1.EventInfoResponse>} Promise\n             * @variation 2\n             */\n\n            return DeployService;\n        })();\n\n        v1.EventInfoResponse = (function() {\n\n            /**\n             * Properties of an EventInfoResponse.\n             * @memberof casper.v1\n             * @interface IEventInfoResponse\n             * @property {IServiceError|null} [error] EventInfoResponse error\n             * @property {casper.IBlockEventInfo|null} [result] EventInfoResponse result\n             */\n\n            /**\n             * Constructs a new EventInfoResponse.\n             * @memberof casper.v1\n             * @classdesc Represents an EventInfoResponse.\n             * @implements IEventInfoResponse\n             * @constructor\n             * @param {casper.v1.IEventInfoResponse=} [properties] Properties to set\n             */\n            function EventInfoResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * EventInfoResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.EventInfoResponse\n             * @instance\n             */\n            EventInfoResponse.prototype.error = null;\n\n            /**\n             * EventInfoResponse result.\n             * @member {casper.IBlockEventInfo|null|undefined} result\n             * @memberof casper.v1.EventInfoResponse\n             * @instance\n             */\n            EventInfoResponse.prototype.result = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * EventInfoResponse message.\n             * @member {\"error\"|\"result\"|undefined} message\n             * @memberof casper.v1.EventInfoResponse\n             * @instance\n             */\n            Object.defineProperty(EventInfoResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"result\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new EventInfoResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.EventInfoResponse\n             * @static\n             * @param {casper.v1.IEventInfoResponse=} [properties] Properties to set\n             * @returns {casper.v1.EventInfoResponse} EventInfoResponse instance\n             */\n            EventInfoResponse.create = function create(properties) {\n                return new EventInfoResponse(properties);\n            };\n\n            /**\n             * Encodes the specified EventInfoResponse message. Does not implicitly {@link casper.v1.EventInfoResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.EventInfoResponse\n             * @static\n             * @param {casper.v1.IEventInfoResponse} message EventInfoResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EventInfoResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    $root.casper.BlockEventInfo.encode(message.result, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified EventInfoResponse message, length delimited. Does not implicitly {@link casper.v1.EventInfoResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.EventInfoResponse\n             * @static\n             * @param {casper.v1.IEventInfoResponse} message EventInfoResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EventInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an EventInfoResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.EventInfoResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.EventInfoResponse} EventInfoResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EventInfoResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.EventInfoResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.result = $root.casper.BlockEventInfo.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an EventInfoResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.EventInfoResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.EventInfoResponse} EventInfoResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EventInfoResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an EventInfoResponse message.\n             * @function verify\n             * @memberof casper.v1.EventInfoResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            EventInfoResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    {\n                        var error = $root.casper.BlockEventInfo.verify(message.result);\n                        if (error)\n                            return \"result.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates an EventInfoResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.EventInfoResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.EventInfoResponse} EventInfoResponse\n             */\n            EventInfoResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.EventInfoResponse)\n                    return object;\n                var message = new $root.casper.v1.EventInfoResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.EventInfoResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.result != null) {\n                    if (typeof object.result !== \"object\")\n                        throw TypeError(\".casper.v1.EventInfoResponse.result: object expected\");\n                    message.result = $root.casper.BlockEventInfo.fromObject(object.result);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an EventInfoResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.EventInfoResponse\n             * @static\n             * @param {casper.v1.EventInfoResponse} message EventInfoResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            EventInfoResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\")) {\n                    object.result = $root.casper.BlockEventInfo.toObject(message.result, options);\n                    if (options.oneofs)\n                        object.message = \"result\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this EventInfoResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.EventInfoResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            EventInfoResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return EventInfoResponse;\n        })();\n\n        v1.ExploratoryDeployResponse = (function() {\n\n            /**\n             * Properties of an ExploratoryDeployResponse.\n             * @memberof casper.v1\n             * @interface IExploratoryDeployResponse\n             * @property {IServiceError|null} [error] ExploratoryDeployResponse error\n             * @property {casper.IDataWithBlockInfo|null} [result] ExploratoryDeployResponse result\n             */\n\n            /**\n             * Constructs a new ExploratoryDeployResponse.\n             * @memberof casper.v1\n             * @classdesc Represents an ExploratoryDeployResponse.\n             * @implements IExploratoryDeployResponse\n             * @constructor\n             * @param {casper.v1.IExploratoryDeployResponse=} [properties] Properties to set\n             */\n            function ExploratoryDeployResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ExploratoryDeployResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @instance\n             */\n            ExploratoryDeployResponse.prototype.error = null;\n\n            /**\n             * ExploratoryDeployResponse result.\n             * @member {casper.IDataWithBlockInfo|null|undefined} result\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @instance\n             */\n            ExploratoryDeployResponse.prototype.result = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ExploratoryDeployResponse message.\n             * @member {\"error\"|\"result\"|undefined} message\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @instance\n             */\n            Object.defineProperty(ExploratoryDeployResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"result\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ExploratoryDeployResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @static\n             * @param {casper.v1.IExploratoryDeployResponse=} [properties] Properties to set\n             * @returns {casper.v1.ExploratoryDeployResponse} ExploratoryDeployResponse instance\n             */\n            ExploratoryDeployResponse.create = function create(properties) {\n                return new ExploratoryDeployResponse(properties);\n            };\n\n            /**\n             * Encodes the specified ExploratoryDeployResponse message. Does not implicitly {@link casper.v1.ExploratoryDeployResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @static\n             * @param {casper.v1.IExploratoryDeployResponse} message ExploratoryDeployResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ExploratoryDeployResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    $root.casper.DataWithBlockInfo.encode(message.result, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ExploratoryDeployResponse message, length delimited. Does not implicitly {@link casper.v1.ExploratoryDeployResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @static\n             * @param {casper.v1.IExploratoryDeployResponse} message ExploratoryDeployResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ExploratoryDeployResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an ExploratoryDeployResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.ExploratoryDeployResponse} ExploratoryDeployResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ExploratoryDeployResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ExploratoryDeployResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.result = $root.casper.DataWithBlockInfo.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an ExploratoryDeployResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.ExploratoryDeployResponse} ExploratoryDeployResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ExploratoryDeployResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an ExploratoryDeployResponse message.\n             * @function verify\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ExploratoryDeployResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    {\n                        var error = $root.casper.DataWithBlockInfo.verify(message.result);\n                        if (error)\n                            return \"result.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates an ExploratoryDeployResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.ExploratoryDeployResponse} ExploratoryDeployResponse\n             */\n            ExploratoryDeployResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.ExploratoryDeployResponse)\n                    return object;\n                var message = new $root.casper.v1.ExploratoryDeployResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.ExploratoryDeployResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.result != null) {\n                    if (typeof object.result !== \"object\")\n                        throw TypeError(\".casper.v1.ExploratoryDeployResponse.result: object expected\");\n                    message.result = $root.casper.DataWithBlockInfo.fromObject(object.result);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an ExploratoryDeployResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @static\n             * @param {casper.v1.ExploratoryDeployResponse} message ExploratoryDeployResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ExploratoryDeployResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\")) {\n                    object.result = $root.casper.DataWithBlockInfo.toObject(message.result, options);\n                    if (options.oneofs)\n                        object.message = \"result\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ExploratoryDeployResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.ExploratoryDeployResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ExploratoryDeployResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ExploratoryDeployResponse;\n        })();\n\n        v1.DeployResponse = (function() {\n\n            /**\n             * Properties of a DeployResponse.\n             * @memberof casper.v1\n             * @interface IDeployResponse\n             * @property {IServiceError|null} [error] DeployResponse error\n             * @property {string|null} [result] DeployResponse result\n             */\n\n            /**\n             * Constructs a new DeployResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a DeployResponse.\n             * @implements IDeployResponse\n             * @constructor\n             * @param {casper.v1.IDeployResponse=} [properties] Properties to set\n             */\n            function DeployResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeployResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.DeployResponse\n             * @instance\n             */\n            DeployResponse.prototype.error = null;\n\n            /**\n             * DeployResponse result.\n             * @member {string} result\n             * @memberof casper.v1.DeployResponse\n             * @instance\n             */\n            DeployResponse.prototype.result = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * DeployResponse message.\n             * @member {\"error\"|\"result\"|undefined} message\n             * @memberof casper.v1.DeployResponse\n             * @instance\n             */\n            Object.defineProperty(DeployResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"result\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new DeployResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.DeployResponse\n             * @static\n             * @param {casper.v1.IDeployResponse=} [properties] Properties to set\n             * @returns {casper.v1.DeployResponse} DeployResponse instance\n             */\n            DeployResponse.create = function create(properties) {\n                return new DeployResponse(properties);\n            };\n\n            /**\n             * Encodes the specified DeployResponse message. Does not implicitly {@link casper.v1.DeployResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.DeployResponse\n             * @static\n             * @param {casper.v1.IDeployResponse} message DeployResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeployResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.result);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeployResponse message, length delimited. Does not implicitly {@link casper.v1.DeployResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.DeployResponse\n             * @static\n             * @param {casper.v1.IDeployResponse} message DeployResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeployResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeployResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.DeployResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.DeployResponse} DeployResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeployResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.DeployResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.result = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeployResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.DeployResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.DeployResponse} DeployResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeployResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeployResponse message.\n             * @function verify\n             * @memberof casper.v1.DeployResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeployResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    if (!$util.isString(message.result))\n                        return \"result: string expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a DeployResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.DeployResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.DeployResponse} DeployResponse\n             */\n            DeployResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.DeployResponse)\n                    return object;\n                var message = new $root.casper.v1.DeployResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.DeployResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.result != null)\n                    message.result = String(object.result);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a DeployResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.DeployResponse\n             * @static\n             * @param {casper.v1.DeployResponse} message DeployResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeployResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\")) {\n                    object.result = message.result;\n                    if (options.oneofs)\n                        object.message = \"result\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this DeployResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.DeployResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeployResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeployResponse;\n        })();\n\n        v1.BlockResponse = (function() {\n\n            /**\n             * Properties of a BlockResponse.\n             * @memberof casper.v1\n             * @interface IBlockResponse\n             * @property {IServiceError|null} [error] BlockResponse error\n             * @property {casper.IBlockInfo|null} [blockInfo] BlockResponse blockInfo\n             */\n\n            /**\n             * Constructs a new BlockResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a BlockResponse.\n             * @implements IBlockResponse\n             * @constructor\n             * @param {casper.v1.IBlockResponse=} [properties] Properties to set\n             */\n            function BlockResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * BlockResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.BlockResponse\n             * @instance\n             */\n            BlockResponse.prototype.error = null;\n\n            /**\n             * BlockResponse blockInfo.\n             * @member {casper.IBlockInfo|null|undefined} blockInfo\n             * @memberof casper.v1.BlockResponse\n             * @instance\n             */\n            BlockResponse.prototype.blockInfo = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * BlockResponse message.\n             * @member {\"error\"|\"blockInfo\"|undefined} message\n             * @memberof casper.v1.BlockResponse\n             * @instance\n             */\n            Object.defineProperty(BlockResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"blockInfo\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new BlockResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.BlockResponse\n             * @static\n             * @param {casper.v1.IBlockResponse=} [properties] Properties to set\n             * @returns {casper.v1.BlockResponse} BlockResponse instance\n             */\n            BlockResponse.create = function create(properties) {\n                return new BlockResponse(properties);\n            };\n\n            /**\n             * Encodes the specified BlockResponse message. Does not implicitly {@link casper.v1.BlockResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.BlockResponse\n             * @static\n             * @param {casper.v1.IBlockResponse} message BlockResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BlockResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\"))\n                    $root.casper.BlockInfo.encode(message.blockInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified BlockResponse message, length delimited. Does not implicitly {@link casper.v1.BlockResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.BlockResponse\n             * @static\n             * @param {casper.v1.IBlockResponse} message BlockResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BlockResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a BlockResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.BlockResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.BlockResponse} BlockResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BlockResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.BlockResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.blockInfo = $root.casper.BlockInfo.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a BlockResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.BlockResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.BlockResponse} BlockResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BlockResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a BlockResponse message.\n             * @function verify\n             * @memberof casper.v1.BlockResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            BlockResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    {\n                        var error = $root.casper.BlockInfo.verify(message.blockInfo);\n                        if (error)\n                            return \"blockInfo.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a BlockResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.BlockResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.BlockResponse} BlockResponse\n             */\n            BlockResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.BlockResponse)\n                    return object;\n                var message = new $root.casper.v1.BlockResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.BlockResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.blockInfo != null) {\n                    if (typeof object.blockInfo !== \"object\")\n                        throw TypeError(\".casper.v1.BlockResponse.blockInfo: object expected\");\n                    message.blockInfo = $root.casper.BlockInfo.fromObject(object.blockInfo);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a BlockResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.BlockResponse\n             * @static\n             * @param {casper.v1.BlockResponse} message BlockResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            BlockResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                    object.blockInfo = $root.casper.BlockInfo.toObject(message.blockInfo, options);\n                    if (options.oneofs)\n                        object.message = \"blockInfo\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this BlockResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.BlockResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            BlockResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return BlockResponse;\n        })();\n\n        v1.VisualizeBlocksResponse = (function() {\n\n            /**\n             * Properties of a VisualizeBlocksResponse.\n             * @memberof casper.v1\n             * @interface IVisualizeBlocksResponse\n             * @property {IServiceError|null} [error] VisualizeBlocksResponse error\n             * @property {string|null} [content] VisualizeBlocksResponse content\n             */\n\n            /**\n             * Constructs a new VisualizeBlocksResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a VisualizeBlocksResponse.\n             * @implements IVisualizeBlocksResponse\n             * @constructor\n             * @param {casper.v1.IVisualizeBlocksResponse=} [properties] Properties to set\n             */\n            function VisualizeBlocksResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * VisualizeBlocksResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @instance\n             */\n            VisualizeBlocksResponse.prototype.error = null;\n\n            /**\n             * VisualizeBlocksResponse content.\n             * @member {string} content\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @instance\n             */\n            VisualizeBlocksResponse.prototype.content = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * VisualizeBlocksResponse message.\n             * @member {\"error\"|\"content\"|undefined} message\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @instance\n             */\n            Object.defineProperty(VisualizeBlocksResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"content\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new VisualizeBlocksResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @static\n             * @param {casper.v1.IVisualizeBlocksResponse=} [properties] Properties to set\n             * @returns {casper.v1.VisualizeBlocksResponse} VisualizeBlocksResponse instance\n             */\n            VisualizeBlocksResponse.create = function create(properties) {\n                return new VisualizeBlocksResponse(properties);\n            };\n\n            /**\n             * Encodes the specified VisualizeBlocksResponse message. Does not implicitly {@link casper.v1.VisualizeBlocksResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @static\n             * @param {casper.v1.IVisualizeBlocksResponse} message VisualizeBlocksResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            VisualizeBlocksResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.content != null && message.hasOwnProperty(\"content\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified VisualizeBlocksResponse message, length delimited. Does not implicitly {@link casper.v1.VisualizeBlocksResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @static\n             * @param {casper.v1.IVisualizeBlocksResponse} message VisualizeBlocksResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            VisualizeBlocksResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a VisualizeBlocksResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.VisualizeBlocksResponse} VisualizeBlocksResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            VisualizeBlocksResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.VisualizeBlocksResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.content = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a VisualizeBlocksResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.VisualizeBlocksResponse} VisualizeBlocksResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            VisualizeBlocksResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a VisualizeBlocksResponse message.\n             * @function verify\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            VisualizeBlocksResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.content != null && message.hasOwnProperty(\"content\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    if (!$util.isString(message.content))\n                        return \"content: string expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a VisualizeBlocksResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.VisualizeBlocksResponse} VisualizeBlocksResponse\n             */\n            VisualizeBlocksResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.VisualizeBlocksResponse)\n                    return object;\n                var message = new $root.casper.v1.VisualizeBlocksResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.VisualizeBlocksResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.content != null)\n                    message.content = String(object.content);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a VisualizeBlocksResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @static\n             * @param {casper.v1.VisualizeBlocksResponse} message VisualizeBlocksResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            VisualizeBlocksResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.content != null && message.hasOwnProperty(\"content\")) {\n                    object.content = message.content;\n                    if (options.oneofs)\n                        object.message = \"content\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this VisualizeBlocksResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.VisualizeBlocksResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            VisualizeBlocksResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return VisualizeBlocksResponse;\n        })();\n\n        v1.MachineVerifyResponse = (function() {\n\n            /**\n             * Properties of a MachineVerifyResponse.\n             * @memberof casper.v1\n             * @interface IMachineVerifyResponse\n             * @property {IServiceError|null} [error] MachineVerifyResponse error\n             * @property {string|null} [content] MachineVerifyResponse content\n             */\n\n            /**\n             * Constructs a new MachineVerifyResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a MachineVerifyResponse.\n             * @implements IMachineVerifyResponse\n             * @constructor\n             * @param {casper.v1.IMachineVerifyResponse=} [properties] Properties to set\n             */\n            function MachineVerifyResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * MachineVerifyResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.MachineVerifyResponse\n             * @instance\n             */\n            MachineVerifyResponse.prototype.error = null;\n\n            /**\n             * MachineVerifyResponse content.\n             * @member {string} content\n             * @memberof casper.v1.MachineVerifyResponse\n             * @instance\n             */\n            MachineVerifyResponse.prototype.content = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * MachineVerifyResponse message.\n             * @member {\"error\"|\"content\"|undefined} message\n             * @memberof casper.v1.MachineVerifyResponse\n             * @instance\n             */\n            Object.defineProperty(MachineVerifyResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"content\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new MachineVerifyResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.MachineVerifyResponse\n             * @static\n             * @param {casper.v1.IMachineVerifyResponse=} [properties] Properties to set\n             * @returns {casper.v1.MachineVerifyResponse} MachineVerifyResponse instance\n             */\n            MachineVerifyResponse.create = function create(properties) {\n                return new MachineVerifyResponse(properties);\n            };\n\n            /**\n             * Encodes the specified MachineVerifyResponse message. Does not implicitly {@link casper.v1.MachineVerifyResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.MachineVerifyResponse\n             * @static\n             * @param {casper.v1.IMachineVerifyResponse} message MachineVerifyResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MachineVerifyResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.content != null && message.hasOwnProperty(\"content\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.content);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified MachineVerifyResponse message, length delimited. Does not implicitly {@link casper.v1.MachineVerifyResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.MachineVerifyResponse\n             * @static\n             * @param {casper.v1.IMachineVerifyResponse} message MachineVerifyResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MachineVerifyResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a MachineVerifyResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.MachineVerifyResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.MachineVerifyResponse} MachineVerifyResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MachineVerifyResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.MachineVerifyResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.content = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a MachineVerifyResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.MachineVerifyResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.MachineVerifyResponse} MachineVerifyResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MachineVerifyResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a MachineVerifyResponse message.\n             * @function verify\n             * @memberof casper.v1.MachineVerifyResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            MachineVerifyResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.content != null && message.hasOwnProperty(\"content\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    if (!$util.isString(message.content))\n                        return \"content: string expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a MachineVerifyResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.MachineVerifyResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.MachineVerifyResponse} MachineVerifyResponse\n             */\n            MachineVerifyResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.MachineVerifyResponse)\n                    return object;\n                var message = new $root.casper.v1.MachineVerifyResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.MachineVerifyResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.content != null)\n                    message.content = String(object.content);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a MachineVerifyResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.MachineVerifyResponse\n             * @static\n             * @param {casper.v1.MachineVerifyResponse} message MachineVerifyResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            MachineVerifyResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.content != null && message.hasOwnProperty(\"content\")) {\n                    object.content = message.content;\n                    if (options.oneofs)\n                        object.message = \"content\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this MachineVerifyResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.MachineVerifyResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            MachineVerifyResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return MachineVerifyResponse;\n        })();\n\n        v1.BlockInfoResponse = (function() {\n\n            /**\n             * Properties of a BlockInfoResponse.\n             * @memberof casper.v1\n             * @interface IBlockInfoResponse\n             * @property {IServiceError|null} [error] BlockInfoResponse error\n             * @property {casper.ILightBlockInfo|null} [blockInfo] BlockInfoResponse blockInfo\n             */\n\n            /**\n             * Constructs a new BlockInfoResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a BlockInfoResponse.\n             * @implements IBlockInfoResponse\n             * @constructor\n             * @param {casper.v1.IBlockInfoResponse=} [properties] Properties to set\n             */\n            function BlockInfoResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * BlockInfoResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.BlockInfoResponse\n             * @instance\n             */\n            BlockInfoResponse.prototype.error = null;\n\n            /**\n             * BlockInfoResponse blockInfo.\n             * @member {casper.ILightBlockInfo|null|undefined} blockInfo\n             * @memberof casper.v1.BlockInfoResponse\n             * @instance\n             */\n            BlockInfoResponse.prototype.blockInfo = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * BlockInfoResponse message.\n             * @member {\"error\"|\"blockInfo\"|undefined} message\n             * @memberof casper.v1.BlockInfoResponse\n             * @instance\n             */\n            Object.defineProperty(BlockInfoResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"blockInfo\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new BlockInfoResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.BlockInfoResponse\n             * @static\n             * @param {casper.v1.IBlockInfoResponse=} [properties] Properties to set\n             * @returns {casper.v1.BlockInfoResponse} BlockInfoResponse instance\n             */\n            BlockInfoResponse.create = function create(properties) {\n                return new BlockInfoResponse(properties);\n            };\n\n            /**\n             * Encodes the specified BlockInfoResponse message. Does not implicitly {@link casper.v1.BlockInfoResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.BlockInfoResponse\n             * @static\n             * @param {casper.v1.IBlockInfoResponse} message BlockInfoResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BlockInfoResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\"))\n                    $root.casper.LightBlockInfo.encode(message.blockInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified BlockInfoResponse message, length delimited. Does not implicitly {@link casper.v1.BlockInfoResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.BlockInfoResponse\n             * @static\n             * @param {casper.v1.IBlockInfoResponse} message BlockInfoResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BlockInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a BlockInfoResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.BlockInfoResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.BlockInfoResponse} BlockInfoResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BlockInfoResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.BlockInfoResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.blockInfo = $root.casper.LightBlockInfo.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a BlockInfoResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.BlockInfoResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.BlockInfoResponse} BlockInfoResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BlockInfoResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a BlockInfoResponse message.\n             * @function verify\n             * @memberof casper.v1.BlockInfoResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            BlockInfoResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    {\n                        var error = $root.casper.LightBlockInfo.verify(message.blockInfo);\n                        if (error)\n                            return \"blockInfo.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a BlockInfoResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.BlockInfoResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.BlockInfoResponse} BlockInfoResponse\n             */\n            BlockInfoResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.BlockInfoResponse)\n                    return object;\n                var message = new $root.casper.v1.BlockInfoResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.BlockInfoResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.blockInfo != null) {\n                    if (typeof object.blockInfo !== \"object\")\n                        throw TypeError(\".casper.v1.BlockInfoResponse.blockInfo: object expected\");\n                    message.blockInfo = $root.casper.LightBlockInfo.fromObject(object.blockInfo);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a BlockInfoResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.BlockInfoResponse\n             * @static\n             * @param {casper.v1.BlockInfoResponse} message BlockInfoResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            BlockInfoResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                    object.blockInfo = $root.casper.LightBlockInfo.toObject(message.blockInfo, options);\n                    if (options.oneofs)\n                        object.message = \"blockInfo\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this BlockInfoResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.BlockInfoResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            BlockInfoResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return BlockInfoResponse;\n        })();\n\n        v1.ListeningNameDataResponse = (function() {\n\n            /**\n             * Properties of a ListeningNameDataResponse.\n             * @memberof casper.v1\n             * @interface IListeningNameDataResponse\n             * @property {IServiceError|null} [error] ListeningNameDataResponse error\n             * @property {casper.v1.IListeningNameDataPayload|null} [payload] ListeningNameDataResponse payload\n             */\n\n            /**\n             * Constructs a new ListeningNameDataResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a ListeningNameDataResponse.\n             * @implements IListeningNameDataResponse\n             * @constructor\n             * @param {casper.v1.IListeningNameDataResponse=} [properties] Properties to set\n             */\n            function ListeningNameDataResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ListeningNameDataResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @instance\n             */\n            ListeningNameDataResponse.prototype.error = null;\n\n            /**\n             * ListeningNameDataResponse payload.\n             * @member {casper.v1.IListeningNameDataPayload|null|undefined} payload\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @instance\n             */\n            ListeningNameDataResponse.prototype.payload = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ListeningNameDataResponse message.\n             * @member {\"error\"|\"payload\"|undefined} message\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @instance\n             */\n            Object.defineProperty(ListeningNameDataResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"payload\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ListeningNameDataResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @static\n             * @param {casper.v1.IListeningNameDataResponse=} [properties] Properties to set\n             * @returns {casper.v1.ListeningNameDataResponse} ListeningNameDataResponse instance\n             */\n            ListeningNameDataResponse.create = function create(properties) {\n                return new ListeningNameDataResponse(properties);\n            };\n\n            /**\n             * Encodes the specified ListeningNameDataResponse message. Does not implicitly {@link casper.v1.ListeningNameDataResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @static\n             * @param {casper.v1.IListeningNameDataResponse} message ListeningNameDataResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ListeningNameDataResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                    $root.casper.v1.ListeningNameDataPayload.encode(message.payload, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ListeningNameDataResponse message, length delimited. Does not implicitly {@link casper.v1.ListeningNameDataResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @static\n             * @param {casper.v1.IListeningNameDataResponse} message ListeningNameDataResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ListeningNameDataResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ListeningNameDataResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.ListeningNameDataResponse} ListeningNameDataResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ListeningNameDataResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ListeningNameDataResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.payload = $root.casper.v1.ListeningNameDataPayload.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ListeningNameDataResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.ListeningNameDataResponse} ListeningNameDataResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ListeningNameDataResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ListeningNameDataResponse message.\n             * @function verify\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ListeningNameDataResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.payload != null && message.hasOwnProperty(\"payload\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    {\n                        var error = $root.casper.v1.ListeningNameDataPayload.verify(message.payload);\n                        if (error)\n                            return \"payload.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ListeningNameDataResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.ListeningNameDataResponse} ListeningNameDataResponse\n             */\n            ListeningNameDataResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.ListeningNameDataResponse)\n                    return object;\n                var message = new $root.casper.v1.ListeningNameDataResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.ListeningNameDataResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.payload != null) {\n                    if (typeof object.payload !== \"object\")\n                        throw TypeError(\".casper.v1.ListeningNameDataResponse.payload: object expected\");\n                    message.payload = $root.casper.v1.ListeningNameDataPayload.fromObject(object.payload);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ListeningNameDataResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @static\n             * @param {casper.v1.ListeningNameDataResponse} message ListeningNameDataResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ListeningNameDataResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.payload != null && message.hasOwnProperty(\"payload\")) {\n                    object.payload = $root.casper.v1.ListeningNameDataPayload.toObject(message.payload, options);\n                    if (options.oneofs)\n                        object.message = \"payload\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ListeningNameDataResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.ListeningNameDataResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ListeningNameDataResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ListeningNameDataResponse;\n        })();\n\n        v1.ListeningNameDataPayload = (function() {\n\n            /**\n             * Properties of a ListeningNameDataPayload.\n             * @memberof casper.v1\n             * @interface IListeningNameDataPayload\n             * @property {Array.<casper.IDataWithBlockInfo>|null} [blockInfo] ListeningNameDataPayload blockInfo\n             * @property {number|null} [length] ListeningNameDataPayload length\n             */\n\n            /**\n             * Constructs a new ListeningNameDataPayload.\n             * @memberof casper.v1\n             * @classdesc Represents a ListeningNameDataPayload.\n             * @implements IListeningNameDataPayload\n             * @constructor\n             * @param {casper.v1.IListeningNameDataPayload=} [properties] Properties to set\n             */\n            function ListeningNameDataPayload(properties) {\n                this.blockInfo = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ListeningNameDataPayload blockInfo.\n             * @member {Array.<casper.IDataWithBlockInfo>} blockInfo\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @instance\n             */\n            ListeningNameDataPayload.prototype.blockInfo = $util.emptyArray;\n\n            /**\n             * ListeningNameDataPayload length.\n             * @member {number} length\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @instance\n             */\n            ListeningNameDataPayload.prototype.length = 0;\n\n            /**\n             * Creates a new ListeningNameDataPayload instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @static\n             * @param {casper.v1.IListeningNameDataPayload=} [properties] Properties to set\n             * @returns {casper.v1.ListeningNameDataPayload} ListeningNameDataPayload instance\n             */\n            ListeningNameDataPayload.create = function create(properties) {\n                return new ListeningNameDataPayload(properties);\n            };\n\n            /**\n             * Encodes the specified ListeningNameDataPayload message. Does not implicitly {@link casper.v1.ListeningNameDataPayload.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @static\n             * @param {casper.v1.IListeningNameDataPayload} message ListeningNameDataPayload message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ListeningNameDataPayload.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.blockInfo != null && message.blockInfo.length)\n                    for (var i = 0; i < message.blockInfo.length; ++i)\n                        $root.casper.DataWithBlockInfo.encode(message.blockInfo[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.length != null && message.hasOwnProperty(\"length\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.length);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ListeningNameDataPayload message, length delimited. Does not implicitly {@link casper.v1.ListeningNameDataPayload.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @static\n             * @param {casper.v1.IListeningNameDataPayload} message ListeningNameDataPayload message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ListeningNameDataPayload.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ListeningNameDataPayload message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.ListeningNameDataPayload} ListeningNameDataPayload\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ListeningNameDataPayload.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ListeningNameDataPayload();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.blockInfo && message.blockInfo.length))\n                            message.blockInfo = [];\n                        message.blockInfo.push($root.casper.DataWithBlockInfo.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.length = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ListeningNameDataPayload message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.ListeningNameDataPayload} ListeningNameDataPayload\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ListeningNameDataPayload.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ListeningNameDataPayload message.\n             * @function verify\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ListeningNameDataPayload.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                    if (!Array.isArray(message.blockInfo))\n                        return \"blockInfo: array expected\";\n                    for (var i = 0; i < message.blockInfo.length; ++i) {\n                        var error = $root.casper.DataWithBlockInfo.verify(message.blockInfo[i]);\n                        if (error)\n                            return \"blockInfo.\" + error;\n                    }\n                }\n                if (message.length != null && message.hasOwnProperty(\"length\"))\n                    if (!$util.isInteger(message.length))\n                        return \"length: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a ListeningNameDataPayload message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.ListeningNameDataPayload} ListeningNameDataPayload\n             */\n            ListeningNameDataPayload.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.ListeningNameDataPayload)\n                    return object;\n                var message = new $root.casper.v1.ListeningNameDataPayload();\n                if (object.blockInfo) {\n                    if (!Array.isArray(object.blockInfo))\n                        throw TypeError(\".casper.v1.ListeningNameDataPayload.blockInfo: array expected\");\n                    message.blockInfo = [];\n                    for (var i = 0; i < object.blockInfo.length; ++i) {\n                        if (typeof object.blockInfo[i] !== \"object\")\n                            throw TypeError(\".casper.v1.ListeningNameDataPayload.blockInfo: object expected\");\n                        message.blockInfo[i] = $root.casper.DataWithBlockInfo.fromObject(object.blockInfo[i]);\n                    }\n                }\n                if (object.length != null)\n                    message.length = object.length | 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ListeningNameDataPayload message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @static\n             * @param {casper.v1.ListeningNameDataPayload} message ListeningNameDataPayload\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ListeningNameDataPayload.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.blockInfo = [];\n                if (options.defaults)\n                    object.length = 0;\n                if (message.blockInfo && message.blockInfo.length) {\n                    object.blockInfo = [];\n                    for (var j = 0; j < message.blockInfo.length; ++j)\n                        object.blockInfo[j] = $root.casper.DataWithBlockInfo.toObject(message.blockInfo[j], options);\n                }\n                if (message.length != null && message.hasOwnProperty(\"length\"))\n                    object.length = message.length;\n                return object;\n            };\n\n            /**\n             * Converts this ListeningNameDataPayload to JSON.\n             * @function toJSON\n             * @memberof casper.v1.ListeningNameDataPayload\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ListeningNameDataPayload.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ListeningNameDataPayload;\n        })();\n\n        v1.ContinuationAtNameResponse = (function() {\n\n            /**\n             * Properties of a ContinuationAtNameResponse.\n             * @memberof casper.v1\n             * @interface IContinuationAtNameResponse\n             * @property {IServiceError|null} [error] ContinuationAtNameResponse error\n             * @property {casper.v1.IContinuationAtNamePayload|null} [payload] ContinuationAtNameResponse payload\n             */\n\n            /**\n             * Constructs a new ContinuationAtNameResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a ContinuationAtNameResponse.\n             * @implements IContinuationAtNameResponse\n             * @constructor\n             * @param {casper.v1.IContinuationAtNameResponse=} [properties] Properties to set\n             */\n            function ContinuationAtNameResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ContinuationAtNameResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @instance\n             */\n            ContinuationAtNameResponse.prototype.error = null;\n\n            /**\n             * ContinuationAtNameResponse payload.\n             * @member {casper.v1.IContinuationAtNamePayload|null|undefined} payload\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @instance\n             */\n            ContinuationAtNameResponse.prototype.payload = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ContinuationAtNameResponse message.\n             * @member {\"error\"|\"payload\"|undefined} message\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @instance\n             */\n            Object.defineProperty(ContinuationAtNameResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"payload\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ContinuationAtNameResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @static\n             * @param {casper.v1.IContinuationAtNameResponse=} [properties] Properties to set\n             * @returns {casper.v1.ContinuationAtNameResponse} ContinuationAtNameResponse instance\n             */\n            ContinuationAtNameResponse.create = function create(properties) {\n                return new ContinuationAtNameResponse(properties);\n            };\n\n            /**\n             * Encodes the specified ContinuationAtNameResponse message. Does not implicitly {@link casper.v1.ContinuationAtNameResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @static\n             * @param {casper.v1.IContinuationAtNameResponse} message ContinuationAtNameResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContinuationAtNameResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                    $root.casper.v1.ContinuationAtNamePayload.encode(message.payload, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ContinuationAtNameResponse message, length delimited. Does not implicitly {@link casper.v1.ContinuationAtNameResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @static\n             * @param {casper.v1.IContinuationAtNameResponse} message ContinuationAtNameResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContinuationAtNameResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ContinuationAtNameResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.ContinuationAtNameResponse} ContinuationAtNameResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContinuationAtNameResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ContinuationAtNameResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.payload = $root.casper.v1.ContinuationAtNamePayload.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ContinuationAtNameResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.ContinuationAtNameResponse} ContinuationAtNameResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContinuationAtNameResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ContinuationAtNameResponse message.\n             * @function verify\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ContinuationAtNameResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.payload != null && message.hasOwnProperty(\"payload\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    {\n                        var error = $root.casper.v1.ContinuationAtNamePayload.verify(message.payload);\n                        if (error)\n                            return \"payload.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ContinuationAtNameResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.ContinuationAtNameResponse} ContinuationAtNameResponse\n             */\n            ContinuationAtNameResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.ContinuationAtNameResponse)\n                    return object;\n                var message = new $root.casper.v1.ContinuationAtNameResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.ContinuationAtNameResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.payload != null) {\n                    if (typeof object.payload !== \"object\")\n                        throw TypeError(\".casper.v1.ContinuationAtNameResponse.payload: object expected\");\n                    message.payload = $root.casper.v1.ContinuationAtNamePayload.fromObject(object.payload);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ContinuationAtNameResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @static\n             * @param {casper.v1.ContinuationAtNameResponse} message ContinuationAtNameResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ContinuationAtNameResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.payload != null && message.hasOwnProperty(\"payload\")) {\n                    object.payload = $root.casper.v1.ContinuationAtNamePayload.toObject(message.payload, options);\n                    if (options.oneofs)\n                        object.message = \"payload\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ContinuationAtNameResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.ContinuationAtNameResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ContinuationAtNameResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ContinuationAtNameResponse;\n        })();\n\n        v1.ContinuationAtNamePayload = (function() {\n\n            /**\n             * Properties of a ContinuationAtNamePayload.\n             * @memberof casper.v1\n             * @interface IContinuationAtNamePayload\n             * @property {Array.<casper.IContinuationsWithBlockInfo>|null} [blockResults] ContinuationAtNamePayload blockResults\n             * @property {number|null} [length] ContinuationAtNamePayload length\n             */\n\n            /**\n             * Constructs a new ContinuationAtNamePayload.\n             * @memberof casper.v1\n             * @classdesc Represents a ContinuationAtNamePayload.\n             * @implements IContinuationAtNamePayload\n             * @constructor\n             * @param {casper.v1.IContinuationAtNamePayload=} [properties] Properties to set\n             */\n            function ContinuationAtNamePayload(properties) {\n                this.blockResults = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ContinuationAtNamePayload blockResults.\n             * @member {Array.<casper.IContinuationsWithBlockInfo>} blockResults\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @instance\n             */\n            ContinuationAtNamePayload.prototype.blockResults = $util.emptyArray;\n\n            /**\n             * ContinuationAtNamePayload length.\n             * @member {number} length\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @instance\n             */\n            ContinuationAtNamePayload.prototype.length = 0;\n\n            /**\n             * Creates a new ContinuationAtNamePayload instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @static\n             * @param {casper.v1.IContinuationAtNamePayload=} [properties] Properties to set\n             * @returns {casper.v1.ContinuationAtNamePayload} ContinuationAtNamePayload instance\n             */\n            ContinuationAtNamePayload.create = function create(properties) {\n                return new ContinuationAtNamePayload(properties);\n            };\n\n            /**\n             * Encodes the specified ContinuationAtNamePayload message. Does not implicitly {@link casper.v1.ContinuationAtNamePayload.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @static\n             * @param {casper.v1.IContinuationAtNamePayload} message ContinuationAtNamePayload message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContinuationAtNamePayload.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.blockResults != null && message.blockResults.length)\n                    for (var i = 0; i < message.blockResults.length; ++i)\n                        $root.casper.ContinuationsWithBlockInfo.encode(message.blockResults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.length != null && message.hasOwnProperty(\"length\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.length);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ContinuationAtNamePayload message, length delimited. Does not implicitly {@link casper.v1.ContinuationAtNamePayload.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @static\n             * @param {casper.v1.IContinuationAtNamePayload} message ContinuationAtNamePayload message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ContinuationAtNamePayload.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ContinuationAtNamePayload message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.ContinuationAtNamePayload} ContinuationAtNamePayload\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContinuationAtNamePayload.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ContinuationAtNamePayload();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.blockResults && message.blockResults.length))\n                            message.blockResults = [];\n                        message.blockResults.push($root.casper.ContinuationsWithBlockInfo.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.length = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ContinuationAtNamePayload message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.ContinuationAtNamePayload} ContinuationAtNamePayload\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ContinuationAtNamePayload.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ContinuationAtNamePayload message.\n             * @function verify\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ContinuationAtNamePayload.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.blockResults != null && message.hasOwnProperty(\"blockResults\")) {\n                    if (!Array.isArray(message.blockResults))\n                        return \"blockResults: array expected\";\n                    for (var i = 0; i < message.blockResults.length; ++i) {\n                        var error = $root.casper.ContinuationsWithBlockInfo.verify(message.blockResults[i]);\n                        if (error)\n                            return \"blockResults.\" + error;\n                    }\n                }\n                if (message.length != null && message.hasOwnProperty(\"length\"))\n                    if (!$util.isInteger(message.length))\n                        return \"length: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a ContinuationAtNamePayload message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.ContinuationAtNamePayload} ContinuationAtNamePayload\n             */\n            ContinuationAtNamePayload.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.ContinuationAtNamePayload)\n                    return object;\n                var message = new $root.casper.v1.ContinuationAtNamePayload();\n                if (object.blockResults) {\n                    if (!Array.isArray(object.blockResults))\n                        throw TypeError(\".casper.v1.ContinuationAtNamePayload.blockResults: array expected\");\n                    message.blockResults = [];\n                    for (var i = 0; i < object.blockResults.length; ++i) {\n                        if (typeof object.blockResults[i] !== \"object\")\n                            throw TypeError(\".casper.v1.ContinuationAtNamePayload.blockResults: object expected\");\n                        message.blockResults[i] = $root.casper.ContinuationsWithBlockInfo.fromObject(object.blockResults[i]);\n                    }\n                }\n                if (object.length != null)\n                    message.length = object.length | 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ContinuationAtNamePayload message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @static\n             * @param {casper.v1.ContinuationAtNamePayload} message ContinuationAtNamePayload\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ContinuationAtNamePayload.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.blockResults = [];\n                if (options.defaults)\n                    object.length = 0;\n                if (message.blockResults && message.blockResults.length) {\n                    object.blockResults = [];\n                    for (var j = 0; j < message.blockResults.length; ++j)\n                        object.blockResults[j] = $root.casper.ContinuationsWithBlockInfo.toObject(message.blockResults[j], options);\n                }\n                if (message.length != null && message.hasOwnProperty(\"length\"))\n                    object.length = message.length;\n                return object;\n            };\n\n            /**\n             * Converts this ContinuationAtNamePayload to JSON.\n             * @function toJSON\n             * @memberof casper.v1.ContinuationAtNamePayload\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ContinuationAtNamePayload.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ContinuationAtNamePayload;\n        })();\n\n        v1.FindDeployResponse = (function() {\n\n            /**\n             * Properties of a FindDeployResponse.\n             * @memberof casper.v1\n             * @interface IFindDeployResponse\n             * @property {IServiceError|null} [error] FindDeployResponse error\n             * @property {casper.ILightBlockInfo|null} [blockInfo] FindDeployResponse blockInfo\n             */\n\n            /**\n             * Constructs a new FindDeployResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a FindDeployResponse.\n             * @implements IFindDeployResponse\n             * @constructor\n             * @param {casper.v1.IFindDeployResponse=} [properties] Properties to set\n             */\n            function FindDeployResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FindDeployResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.FindDeployResponse\n             * @instance\n             */\n            FindDeployResponse.prototype.error = null;\n\n            /**\n             * FindDeployResponse blockInfo.\n             * @member {casper.ILightBlockInfo|null|undefined} blockInfo\n             * @memberof casper.v1.FindDeployResponse\n             * @instance\n             */\n            FindDeployResponse.prototype.blockInfo = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * FindDeployResponse message.\n             * @member {\"error\"|\"blockInfo\"|undefined} message\n             * @memberof casper.v1.FindDeployResponse\n             * @instance\n             */\n            Object.defineProperty(FindDeployResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"blockInfo\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new FindDeployResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.FindDeployResponse\n             * @static\n             * @param {casper.v1.IFindDeployResponse=} [properties] Properties to set\n             * @returns {casper.v1.FindDeployResponse} FindDeployResponse instance\n             */\n            FindDeployResponse.create = function create(properties) {\n                return new FindDeployResponse(properties);\n            };\n\n            /**\n             * Encodes the specified FindDeployResponse message. Does not implicitly {@link casper.v1.FindDeployResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.FindDeployResponse\n             * @static\n             * @param {casper.v1.IFindDeployResponse} message FindDeployResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FindDeployResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\"))\n                    $root.casper.LightBlockInfo.encode(message.blockInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FindDeployResponse message, length delimited. Does not implicitly {@link casper.v1.FindDeployResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.FindDeployResponse\n             * @static\n             * @param {casper.v1.IFindDeployResponse} message FindDeployResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FindDeployResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FindDeployResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.FindDeployResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.FindDeployResponse} FindDeployResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FindDeployResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.FindDeployResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.blockInfo = $root.casper.LightBlockInfo.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FindDeployResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.FindDeployResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.FindDeployResponse} FindDeployResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FindDeployResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FindDeployResponse message.\n             * @function verify\n             * @memberof casper.v1.FindDeployResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FindDeployResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    {\n                        var error = $root.casper.LightBlockInfo.verify(message.blockInfo);\n                        if (error)\n                            return \"blockInfo.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FindDeployResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.FindDeployResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.FindDeployResponse} FindDeployResponse\n             */\n            FindDeployResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.FindDeployResponse)\n                    return object;\n                var message = new $root.casper.v1.FindDeployResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.FindDeployResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.blockInfo != null) {\n                    if (typeof object.blockInfo !== \"object\")\n                        throw TypeError(\".casper.v1.FindDeployResponse.blockInfo: object expected\");\n                    message.blockInfo = $root.casper.LightBlockInfo.fromObject(object.blockInfo);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FindDeployResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.FindDeployResponse\n             * @static\n             * @param {casper.v1.FindDeployResponse} message FindDeployResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FindDeployResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                    object.blockInfo = $root.casper.LightBlockInfo.toObject(message.blockInfo, options);\n                    if (options.oneofs)\n                        object.message = \"blockInfo\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this FindDeployResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.FindDeployResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FindDeployResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FindDeployResponse;\n        })();\n\n        v1.PrivateNamePreviewResponse = (function() {\n\n            /**\n             * Properties of a PrivateNamePreviewResponse.\n             * @memberof casper.v1\n             * @interface IPrivateNamePreviewResponse\n             * @property {IServiceError|null} [error] PrivateNamePreviewResponse error\n             * @property {casper.v1.IPrivateNamePreviewPayload|null} [payload] PrivateNamePreviewResponse payload\n             */\n\n            /**\n             * Constructs a new PrivateNamePreviewResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a PrivateNamePreviewResponse.\n             * @implements IPrivateNamePreviewResponse\n             * @constructor\n             * @param {casper.v1.IPrivateNamePreviewResponse=} [properties] Properties to set\n             */\n            function PrivateNamePreviewResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * PrivateNamePreviewResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @instance\n             */\n            PrivateNamePreviewResponse.prototype.error = null;\n\n            /**\n             * PrivateNamePreviewResponse payload.\n             * @member {casper.v1.IPrivateNamePreviewPayload|null|undefined} payload\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @instance\n             */\n            PrivateNamePreviewResponse.prototype.payload = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * PrivateNamePreviewResponse message.\n             * @member {\"error\"|\"payload\"|undefined} message\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @instance\n             */\n            Object.defineProperty(PrivateNamePreviewResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"payload\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new PrivateNamePreviewResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @static\n             * @param {casper.v1.IPrivateNamePreviewResponse=} [properties] Properties to set\n             * @returns {casper.v1.PrivateNamePreviewResponse} PrivateNamePreviewResponse instance\n             */\n            PrivateNamePreviewResponse.create = function create(properties) {\n                return new PrivateNamePreviewResponse(properties);\n            };\n\n            /**\n             * Encodes the specified PrivateNamePreviewResponse message. Does not implicitly {@link casper.v1.PrivateNamePreviewResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @static\n             * @param {casper.v1.IPrivateNamePreviewResponse} message PrivateNamePreviewResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            PrivateNamePreviewResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                    $root.casper.v1.PrivateNamePreviewPayload.encode(message.payload, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified PrivateNamePreviewResponse message, length delimited. Does not implicitly {@link casper.v1.PrivateNamePreviewResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @static\n             * @param {casper.v1.IPrivateNamePreviewResponse} message PrivateNamePreviewResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            PrivateNamePreviewResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a PrivateNamePreviewResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.PrivateNamePreviewResponse} PrivateNamePreviewResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            PrivateNamePreviewResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.PrivateNamePreviewResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.payload = $root.casper.v1.PrivateNamePreviewPayload.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a PrivateNamePreviewResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.PrivateNamePreviewResponse} PrivateNamePreviewResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            PrivateNamePreviewResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a PrivateNamePreviewResponse message.\n             * @function verify\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            PrivateNamePreviewResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.payload != null && message.hasOwnProperty(\"payload\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    {\n                        var error = $root.casper.v1.PrivateNamePreviewPayload.verify(message.payload);\n                        if (error)\n                            return \"payload.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a PrivateNamePreviewResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.PrivateNamePreviewResponse} PrivateNamePreviewResponse\n             */\n            PrivateNamePreviewResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.PrivateNamePreviewResponse)\n                    return object;\n                var message = new $root.casper.v1.PrivateNamePreviewResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.PrivateNamePreviewResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.payload != null) {\n                    if (typeof object.payload !== \"object\")\n                        throw TypeError(\".casper.v1.PrivateNamePreviewResponse.payload: object expected\");\n                    message.payload = $root.casper.v1.PrivateNamePreviewPayload.fromObject(object.payload);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a PrivateNamePreviewResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @static\n             * @param {casper.v1.PrivateNamePreviewResponse} message PrivateNamePreviewResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            PrivateNamePreviewResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.payload != null && message.hasOwnProperty(\"payload\")) {\n                    object.payload = $root.casper.v1.PrivateNamePreviewPayload.toObject(message.payload, options);\n                    if (options.oneofs)\n                        object.message = \"payload\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this PrivateNamePreviewResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.PrivateNamePreviewResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            PrivateNamePreviewResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return PrivateNamePreviewResponse;\n        })();\n\n        v1.PrivateNamePreviewPayload = (function() {\n\n            /**\n             * Properties of a PrivateNamePreviewPayload.\n             * @memberof casper.v1\n             * @interface IPrivateNamePreviewPayload\n             * @property {Array.<Uint8Array>|null} [ids] PrivateNamePreviewPayload ids\n             */\n\n            /**\n             * Constructs a new PrivateNamePreviewPayload.\n             * @memberof casper.v1\n             * @classdesc Represents a PrivateNamePreviewPayload.\n             * @implements IPrivateNamePreviewPayload\n             * @constructor\n             * @param {casper.v1.IPrivateNamePreviewPayload=} [properties] Properties to set\n             */\n            function PrivateNamePreviewPayload(properties) {\n                this.ids = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * PrivateNamePreviewPayload ids.\n             * @member {Array.<Uint8Array>} ids\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @instance\n             */\n            PrivateNamePreviewPayload.prototype.ids = $util.emptyArray;\n\n            /**\n             * Creates a new PrivateNamePreviewPayload instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @static\n             * @param {casper.v1.IPrivateNamePreviewPayload=} [properties] Properties to set\n             * @returns {casper.v1.PrivateNamePreviewPayload} PrivateNamePreviewPayload instance\n             */\n            PrivateNamePreviewPayload.create = function create(properties) {\n                return new PrivateNamePreviewPayload(properties);\n            };\n\n            /**\n             * Encodes the specified PrivateNamePreviewPayload message. Does not implicitly {@link casper.v1.PrivateNamePreviewPayload.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @static\n             * @param {casper.v1.IPrivateNamePreviewPayload} message PrivateNamePreviewPayload message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            PrivateNamePreviewPayload.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.ids != null && message.ids.length)\n                    for (var i = 0; i < message.ids.length; ++i)\n                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ids[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified PrivateNamePreviewPayload message, length delimited. Does not implicitly {@link casper.v1.PrivateNamePreviewPayload.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @static\n             * @param {casper.v1.IPrivateNamePreviewPayload} message PrivateNamePreviewPayload message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            PrivateNamePreviewPayload.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a PrivateNamePreviewPayload message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.PrivateNamePreviewPayload} PrivateNamePreviewPayload\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            PrivateNamePreviewPayload.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.PrivateNamePreviewPayload();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.ids && message.ids.length))\n                            message.ids = [];\n                        message.ids.push(reader.bytes());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a PrivateNamePreviewPayload message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.PrivateNamePreviewPayload} PrivateNamePreviewPayload\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            PrivateNamePreviewPayload.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a PrivateNamePreviewPayload message.\n             * @function verify\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            PrivateNamePreviewPayload.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.ids != null && message.hasOwnProperty(\"ids\")) {\n                    if (!Array.isArray(message.ids))\n                        return \"ids: array expected\";\n                    for (var i = 0; i < message.ids.length; ++i)\n                        if (!(message.ids[i] && typeof message.ids[i].length === \"number\" || $util.isString(message.ids[i])))\n                            return \"ids: buffer[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a PrivateNamePreviewPayload message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.PrivateNamePreviewPayload} PrivateNamePreviewPayload\n             */\n            PrivateNamePreviewPayload.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.PrivateNamePreviewPayload)\n                    return object;\n                var message = new $root.casper.v1.PrivateNamePreviewPayload();\n                if (object.ids) {\n                    if (!Array.isArray(object.ids))\n                        throw TypeError(\".casper.v1.PrivateNamePreviewPayload.ids: array expected\");\n                    message.ids = [];\n                    for (var i = 0; i < object.ids.length; ++i)\n                        if (typeof object.ids[i] === \"string\")\n                            $util.base64.decode(object.ids[i], message.ids[i] = $util.newBuffer($util.base64.length(object.ids[i])), 0);\n                        else if (object.ids[i].length)\n                            message.ids[i] = object.ids[i];\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a PrivateNamePreviewPayload message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @static\n             * @param {casper.v1.PrivateNamePreviewPayload} message PrivateNamePreviewPayload\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            PrivateNamePreviewPayload.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.ids = [];\n                if (message.ids && message.ids.length) {\n                    object.ids = [];\n                    for (var j = 0; j < message.ids.length; ++j)\n                        object.ids[j] = options.bytes === String ? $util.base64.encode(message.ids[j], 0, message.ids[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.ids[j]) : message.ids[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this PrivateNamePreviewPayload to JSON.\n             * @function toJSON\n             * @memberof casper.v1.PrivateNamePreviewPayload\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            PrivateNamePreviewPayload.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return PrivateNamePreviewPayload;\n        })();\n\n        v1.LastFinalizedBlockResponse = (function() {\n\n            /**\n             * Properties of a LastFinalizedBlockResponse.\n             * @memberof casper.v1\n             * @interface ILastFinalizedBlockResponse\n             * @property {IServiceError|null} [error] LastFinalizedBlockResponse error\n             * @property {casper.IBlockInfo|null} [blockInfo] LastFinalizedBlockResponse blockInfo\n             */\n\n            /**\n             * Constructs a new LastFinalizedBlockResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a LastFinalizedBlockResponse.\n             * @implements ILastFinalizedBlockResponse\n             * @constructor\n             * @param {casper.v1.ILastFinalizedBlockResponse=} [properties] Properties to set\n             */\n            function LastFinalizedBlockResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * LastFinalizedBlockResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @instance\n             */\n            LastFinalizedBlockResponse.prototype.error = null;\n\n            /**\n             * LastFinalizedBlockResponse blockInfo.\n             * @member {casper.IBlockInfo|null|undefined} blockInfo\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @instance\n             */\n            LastFinalizedBlockResponse.prototype.blockInfo = null;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * LastFinalizedBlockResponse message.\n             * @member {\"error\"|\"blockInfo\"|undefined} message\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @instance\n             */\n            Object.defineProperty(LastFinalizedBlockResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"blockInfo\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new LastFinalizedBlockResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @static\n             * @param {casper.v1.ILastFinalizedBlockResponse=} [properties] Properties to set\n             * @returns {casper.v1.LastFinalizedBlockResponse} LastFinalizedBlockResponse instance\n             */\n            LastFinalizedBlockResponse.create = function create(properties) {\n                return new LastFinalizedBlockResponse(properties);\n            };\n\n            /**\n             * Encodes the specified LastFinalizedBlockResponse message. Does not implicitly {@link casper.v1.LastFinalizedBlockResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @static\n             * @param {casper.v1.ILastFinalizedBlockResponse} message LastFinalizedBlockResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            LastFinalizedBlockResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\"))\n                    $root.casper.BlockInfo.encode(message.blockInfo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified LastFinalizedBlockResponse message, length delimited. Does not implicitly {@link casper.v1.LastFinalizedBlockResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @static\n             * @param {casper.v1.ILastFinalizedBlockResponse} message LastFinalizedBlockResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            LastFinalizedBlockResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a LastFinalizedBlockResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.LastFinalizedBlockResponse} LastFinalizedBlockResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            LastFinalizedBlockResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.LastFinalizedBlockResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.blockInfo = $root.casper.BlockInfo.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a LastFinalizedBlockResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.LastFinalizedBlockResponse} LastFinalizedBlockResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            LastFinalizedBlockResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a LastFinalizedBlockResponse message.\n             * @function verify\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            LastFinalizedBlockResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    {\n                        var error = $root.casper.BlockInfo.verify(message.blockInfo);\n                        if (error)\n                            return \"blockInfo.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a LastFinalizedBlockResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.LastFinalizedBlockResponse} LastFinalizedBlockResponse\n             */\n            LastFinalizedBlockResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.LastFinalizedBlockResponse)\n                    return object;\n                var message = new $root.casper.v1.LastFinalizedBlockResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.LastFinalizedBlockResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.blockInfo != null) {\n                    if (typeof object.blockInfo !== \"object\")\n                        throw TypeError(\".casper.v1.LastFinalizedBlockResponse.blockInfo: object expected\");\n                    message.blockInfo = $root.casper.BlockInfo.fromObject(object.blockInfo);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a LastFinalizedBlockResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @static\n             * @param {casper.v1.LastFinalizedBlockResponse} message LastFinalizedBlockResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            LastFinalizedBlockResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.blockInfo != null && message.hasOwnProperty(\"blockInfo\")) {\n                    object.blockInfo = $root.casper.BlockInfo.toObject(message.blockInfo, options);\n                    if (options.oneofs)\n                        object.message = \"blockInfo\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this LastFinalizedBlockResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.LastFinalizedBlockResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            LastFinalizedBlockResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return LastFinalizedBlockResponse;\n        })();\n\n        v1.IsFinalizedResponse = (function() {\n\n            /**\n             * Properties of an IsFinalizedResponse.\n             * @memberof casper.v1\n             * @interface IIsFinalizedResponse\n             * @property {IServiceError|null} [error] IsFinalizedResponse error\n             * @property {boolean|null} [isFinalized] IsFinalizedResponse isFinalized\n             */\n\n            /**\n             * Constructs a new IsFinalizedResponse.\n             * @memberof casper.v1\n             * @classdesc Represents an IsFinalizedResponse.\n             * @implements IIsFinalizedResponse\n             * @constructor\n             * @param {casper.v1.IIsFinalizedResponse=} [properties] Properties to set\n             */\n            function IsFinalizedResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * IsFinalizedResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.IsFinalizedResponse\n             * @instance\n             */\n            IsFinalizedResponse.prototype.error = null;\n\n            /**\n             * IsFinalizedResponse isFinalized.\n             * @member {boolean} isFinalized\n             * @memberof casper.v1.IsFinalizedResponse\n             * @instance\n             */\n            IsFinalizedResponse.prototype.isFinalized = false;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * IsFinalizedResponse message.\n             * @member {\"error\"|\"isFinalized\"|undefined} message\n             * @memberof casper.v1.IsFinalizedResponse\n             * @instance\n             */\n            Object.defineProperty(IsFinalizedResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"isFinalized\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new IsFinalizedResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.IsFinalizedResponse\n             * @static\n             * @param {casper.v1.IIsFinalizedResponse=} [properties] Properties to set\n             * @returns {casper.v1.IsFinalizedResponse} IsFinalizedResponse instance\n             */\n            IsFinalizedResponse.create = function create(properties) {\n                return new IsFinalizedResponse(properties);\n            };\n\n            /**\n             * Encodes the specified IsFinalizedResponse message. Does not implicitly {@link casper.v1.IsFinalizedResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.IsFinalizedResponse\n             * @static\n             * @param {casper.v1.IIsFinalizedResponse} message IsFinalizedResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            IsFinalizedResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.isFinalized != null && message.hasOwnProperty(\"isFinalized\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isFinalized);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified IsFinalizedResponse message, length delimited. Does not implicitly {@link casper.v1.IsFinalizedResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.IsFinalizedResponse\n             * @static\n             * @param {casper.v1.IIsFinalizedResponse} message IsFinalizedResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            IsFinalizedResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an IsFinalizedResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.IsFinalizedResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.IsFinalizedResponse} IsFinalizedResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            IsFinalizedResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.IsFinalizedResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.isFinalized = reader.bool();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an IsFinalizedResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.IsFinalizedResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.IsFinalizedResponse} IsFinalizedResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            IsFinalizedResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an IsFinalizedResponse message.\n             * @function verify\n             * @memberof casper.v1.IsFinalizedResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            IsFinalizedResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.isFinalized != null && message.hasOwnProperty(\"isFinalized\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    if (typeof message.isFinalized !== \"boolean\")\n                        return \"isFinalized: boolean expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates an IsFinalizedResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.IsFinalizedResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.IsFinalizedResponse} IsFinalizedResponse\n             */\n            IsFinalizedResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.IsFinalizedResponse)\n                    return object;\n                var message = new $root.casper.v1.IsFinalizedResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.IsFinalizedResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.isFinalized != null)\n                    message.isFinalized = Boolean(object.isFinalized);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an IsFinalizedResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.IsFinalizedResponse\n             * @static\n             * @param {casper.v1.IsFinalizedResponse} message IsFinalizedResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            IsFinalizedResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.isFinalized != null && message.hasOwnProperty(\"isFinalized\")) {\n                    object.isFinalized = message.isFinalized;\n                    if (options.oneofs)\n                        object.message = \"isFinalized\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this IsFinalizedResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.IsFinalizedResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            IsFinalizedResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return IsFinalizedResponse;\n        })();\n\n        v1.BondStatusResponse = (function() {\n\n            /**\n             * Properties of a BondStatusResponse.\n             * @memberof casper.v1\n             * @interface IBondStatusResponse\n             * @property {IServiceError|null} [error] BondStatusResponse error\n             * @property {boolean|null} [isBonded] BondStatusResponse isBonded\n             */\n\n            /**\n             * Constructs a new BondStatusResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a BondStatusResponse.\n             * @implements IBondStatusResponse\n             * @constructor\n             * @param {casper.v1.IBondStatusResponse=} [properties] Properties to set\n             */\n            function BondStatusResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * BondStatusResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.BondStatusResponse\n             * @instance\n             */\n            BondStatusResponse.prototype.error = null;\n\n            /**\n             * BondStatusResponse isBonded.\n             * @member {boolean} isBonded\n             * @memberof casper.v1.BondStatusResponse\n             * @instance\n             */\n            BondStatusResponse.prototype.isBonded = false;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * BondStatusResponse message.\n             * @member {\"error\"|\"isBonded\"|undefined} message\n             * @memberof casper.v1.BondStatusResponse\n             * @instance\n             */\n            Object.defineProperty(BondStatusResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"isBonded\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new BondStatusResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.BondStatusResponse\n             * @static\n             * @param {casper.v1.IBondStatusResponse=} [properties] Properties to set\n             * @returns {casper.v1.BondStatusResponse} BondStatusResponse instance\n             */\n            BondStatusResponse.create = function create(properties) {\n                return new BondStatusResponse(properties);\n            };\n\n            /**\n             * Encodes the specified BondStatusResponse message. Does not implicitly {@link casper.v1.BondStatusResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.BondStatusResponse\n             * @static\n             * @param {casper.v1.IBondStatusResponse} message BondStatusResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BondStatusResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.isBonded != null && message.hasOwnProperty(\"isBonded\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isBonded);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified BondStatusResponse message, length delimited. Does not implicitly {@link casper.v1.BondStatusResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.BondStatusResponse\n             * @static\n             * @param {casper.v1.IBondStatusResponse} message BondStatusResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            BondStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a BondStatusResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.BondStatusResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.BondStatusResponse} BondStatusResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BondStatusResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.BondStatusResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.isBonded = reader.bool();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a BondStatusResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.BondStatusResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.BondStatusResponse} BondStatusResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            BondStatusResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a BondStatusResponse message.\n             * @function verify\n             * @memberof casper.v1.BondStatusResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            BondStatusResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.isBonded != null && message.hasOwnProperty(\"isBonded\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    if (typeof message.isBonded !== \"boolean\")\n                        return \"isBonded: boolean expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a BondStatusResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.BondStatusResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.BondStatusResponse} BondStatusResponse\n             */\n            BondStatusResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.BondStatusResponse)\n                    return object;\n                var message = new $root.casper.v1.BondStatusResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.BondStatusResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.isBonded != null)\n                    message.isBonded = Boolean(object.isBonded);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a BondStatusResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.BondStatusResponse\n             * @static\n             * @param {casper.v1.BondStatusResponse} message BondStatusResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            BondStatusResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.isBonded != null && message.hasOwnProperty(\"isBonded\")) {\n                    object.isBonded = message.isBonded;\n                    if (options.oneofs)\n                        object.message = \"isBonded\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this BondStatusResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.BondStatusResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            BondStatusResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return BondStatusResponse;\n        })();\n\n        v1.ProposeService = (function() {\n\n            /**\n             * Constructs a new ProposeService service.\n             * @memberof casper.v1\n             * @classdesc Represents a ProposeService\n             * @extends $protobuf.rpc.Service\n             * @constructor\n             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n             */\n            function ProposeService(rpcImpl, requestDelimited, responseDelimited) {\n                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n            }\n\n            (ProposeService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ProposeService;\n\n            /**\n             * Creates new ProposeService service using the specified rpc implementation.\n             * @function create\n             * @memberof casper.v1.ProposeService\n             * @static\n             * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n             * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n             * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n             * @returns {ProposeService} RPC service. Useful where requests and/or responses are streamed.\n             */\n            ProposeService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                return new this(rpcImpl, requestDelimited, responseDelimited);\n            };\n\n            /**\n             * Callback as used by {@link casper.v1.ProposeService#propose}.\n             * @memberof casper.v1.ProposeService\n             * @typedef proposeCallback\n             * @type {function}\n             * @param {Error|null} error Error, if any\n             * @param {casper.v1.ProposeResponse} [response] ProposeResponse\n             */\n\n            /**\n             * Calls propose.\n             * @function propose\n             * @memberof casper.v1.ProposeService\n             * @instance\n             * @param {casper.IPrintUnmatchedSendsQuery} request PrintUnmatchedSendsQuery message or plain object\n             * @param {casper.v1.ProposeService.proposeCallback} callback Node-style callback called with the error, if any, and ProposeResponse\n             * @returns {undefined}\n             * @variation 1\n             */\n            Object.defineProperty(ProposeService.prototype.propose = function propose(request, callback) {\n                return this.rpcCall(propose, $root.casper.PrintUnmatchedSendsQuery, $root.casper.v1.ProposeResponse, request, callback);\n            }, \"name\", { value: \"propose\" });\n\n            /**\n             * Calls propose.\n             * @function propose\n             * @memberof casper.v1.ProposeService\n             * @instance\n             * @param {casper.IPrintUnmatchedSendsQuery} request PrintUnmatchedSendsQuery message or plain object\n             * @returns {Promise<casper.v1.ProposeResponse>} Promise\n             * @variation 2\n             */\n\n            return ProposeService;\n        })();\n\n        v1.ProposeResponse = (function() {\n\n            /**\n             * Properties of a ProposeResponse.\n             * @memberof casper.v1\n             * @interface IProposeResponse\n             * @property {IServiceError|null} [error] ProposeResponse error\n             * @property {string|null} [result] ProposeResponse result\n             */\n\n            /**\n             * Constructs a new ProposeResponse.\n             * @memberof casper.v1\n             * @classdesc Represents a ProposeResponse.\n             * @implements IProposeResponse\n             * @constructor\n             * @param {casper.v1.IProposeResponse=} [properties] Properties to set\n             */\n            function ProposeResponse(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ProposeResponse error.\n             * @member {IServiceError|null|undefined} error\n             * @memberof casper.v1.ProposeResponse\n             * @instance\n             */\n            ProposeResponse.prototype.error = null;\n\n            /**\n             * ProposeResponse result.\n             * @member {string} result\n             * @memberof casper.v1.ProposeResponse\n             * @instance\n             */\n            ProposeResponse.prototype.result = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ProposeResponse message.\n             * @member {\"error\"|\"result\"|undefined} message\n             * @memberof casper.v1.ProposeResponse\n             * @instance\n             */\n            Object.defineProperty(ProposeResponse.prototype, \"message\", {\n                get: $util.oneOfGetter($oneOfFields = [\"error\", \"result\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ProposeResponse instance using the specified properties.\n             * @function create\n             * @memberof casper.v1.ProposeResponse\n             * @static\n             * @param {casper.v1.IProposeResponse=} [properties] Properties to set\n             * @returns {casper.v1.ProposeResponse} ProposeResponse instance\n             */\n            ProposeResponse.create = function create(properties) {\n                return new ProposeResponse(properties);\n            };\n\n            /**\n             * Encodes the specified ProposeResponse message. Does not implicitly {@link casper.v1.ProposeResponse.verify|verify} messages.\n             * @function encode\n             * @memberof casper.v1.ProposeResponse\n             * @static\n             * @param {casper.v1.IProposeResponse} message ProposeResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ProposeResponse.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.error != null && message.hasOwnProperty(\"error\"))\n                    $root.ServiceError.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.result != null && message.hasOwnProperty(\"result\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.result);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ProposeResponse message, length delimited. Does not implicitly {@link casper.v1.ProposeResponse.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof casper.v1.ProposeResponse\n             * @static\n             * @param {casper.v1.IProposeResponse} message ProposeResponse message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ProposeResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ProposeResponse message from the specified reader or buffer.\n             * @function decode\n             * @memberof casper.v1.ProposeResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {casper.v1.ProposeResponse} ProposeResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ProposeResponse.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.v1.ProposeResponse();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.error = $root.ServiceError.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        message.result = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ProposeResponse message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof casper.v1.ProposeResponse\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {casper.v1.ProposeResponse} ProposeResponse\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ProposeResponse.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ProposeResponse message.\n             * @function verify\n             * @memberof casper.v1.ProposeResponse\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ProposeResponse.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    properties.message = 1;\n                    {\n                        var error = $root.ServiceError.verify(message.error);\n                        if (error)\n                            return \"error.\" + error;\n                    }\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\")) {\n                    if (properties.message === 1)\n                        return \"message: multiple values\";\n                    properties.message = 1;\n                    if (!$util.isString(message.result))\n                        return \"result: string expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ProposeResponse message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof casper.v1.ProposeResponse\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {casper.v1.ProposeResponse} ProposeResponse\n             */\n            ProposeResponse.fromObject = function fromObject(object) {\n                if (object instanceof $root.casper.v1.ProposeResponse)\n                    return object;\n                var message = new $root.casper.v1.ProposeResponse();\n                if (object.error != null) {\n                    if (typeof object.error !== \"object\")\n                        throw TypeError(\".casper.v1.ProposeResponse.error: object expected\");\n                    message.error = $root.ServiceError.fromObject(object.error);\n                }\n                if (object.result != null)\n                    message.result = String(object.result);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ProposeResponse message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof casper.v1.ProposeResponse\n             * @static\n             * @param {casper.v1.ProposeResponse} message ProposeResponse\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ProposeResponse.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.error != null && message.hasOwnProperty(\"error\")) {\n                    object.error = $root.ServiceError.toObject(message.error, options);\n                    if (options.oneofs)\n                        object.message = \"error\";\n                }\n                if (message.result != null && message.hasOwnProperty(\"result\")) {\n                    object.result = message.result;\n                    if (options.oneofs)\n                        object.message = \"result\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ProposeResponse to JSON.\n             * @function toJSON\n             * @memberof casper.v1.ProposeResponse\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ProposeResponse.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ProposeResponse;\n        })();\n\n        return v1;\n    })();\n\n    casper.PrintUnmatchedSendsQuery = (function() {\n\n        /**\n         * Properties of a PrintUnmatchedSendsQuery.\n         * @memberof casper\n         * @interface IPrintUnmatchedSendsQuery\n         * @property {boolean|null} [printUnmatchedSends] PrintUnmatchedSendsQuery printUnmatchedSends\n         */\n\n        /**\n         * Constructs a new PrintUnmatchedSendsQuery.\n         * @memberof casper\n         * @classdesc Represents a PrintUnmatchedSendsQuery.\n         * @implements IPrintUnmatchedSendsQuery\n         * @constructor\n         * @param {casper.IPrintUnmatchedSendsQuery=} [properties] Properties to set\n         */\n        function PrintUnmatchedSendsQuery(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PrintUnmatchedSendsQuery printUnmatchedSends.\n         * @member {boolean} printUnmatchedSends\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @instance\n         */\n        PrintUnmatchedSendsQuery.prototype.printUnmatchedSends = false;\n\n        /**\n         * Creates a new PrintUnmatchedSendsQuery instance using the specified properties.\n         * @function create\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @static\n         * @param {casper.IPrintUnmatchedSendsQuery=} [properties] Properties to set\n         * @returns {casper.PrintUnmatchedSendsQuery} PrintUnmatchedSendsQuery instance\n         */\n        PrintUnmatchedSendsQuery.create = function create(properties) {\n            return new PrintUnmatchedSendsQuery(properties);\n        };\n\n        /**\n         * Encodes the specified PrintUnmatchedSendsQuery message. Does not implicitly {@link casper.PrintUnmatchedSendsQuery.verify|verify} messages.\n         * @function encode\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @static\n         * @param {casper.IPrintUnmatchedSendsQuery} message PrintUnmatchedSendsQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PrintUnmatchedSendsQuery.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.printUnmatchedSends != null && message.hasOwnProperty(\"printUnmatchedSends\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.printUnmatchedSends);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PrintUnmatchedSendsQuery message, length delimited. Does not implicitly {@link casper.PrintUnmatchedSendsQuery.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @static\n         * @param {casper.IPrintUnmatchedSendsQuery} message PrintUnmatchedSendsQuery message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PrintUnmatchedSendsQuery.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PrintUnmatchedSendsQuery message from the specified reader or buffer.\n         * @function decode\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {casper.PrintUnmatchedSendsQuery} PrintUnmatchedSendsQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PrintUnmatchedSendsQuery.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.casper.PrintUnmatchedSendsQuery();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.printUnmatchedSends = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PrintUnmatchedSendsQuery message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {casper.PrintUnmatchedSendsQuery} PrintUnmatchedSendsQuery\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PrintUnmatchedSendsQuery.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PrintUnmatchedSendsQuery message.\n         * @function verify\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PrintUnmatchedSendsQuery.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.printUnmatchedSends != null && message.hasOwnProperty(\"printUnmatchedSends\"))\n                if (typeof message.printUnmatchedSends !== \"boolean\")\n                    return \"printUnmatchedSends: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a PrintUnmatchedSendsQuery message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {casper.PrintUnmatchedSendsQuery} PrintUnmatchedSendsQuery\n         */\n        PrintUnmatchedSendsQuery.fromObject = function fromObject(object) {\n            if (object instanceof $root.casper.PrintUnmatchedSendsQuery)\n                return object;\n            var message = new $root.casper.PrintUnmatchedSendsQuery();\n            if (object.printUnmatchedSends != null)\n                message.printUnmatchedSends = Boolean(object.printUnmatchedSends);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PrintUnmatchedSendsQuery message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @static\n         * @param {casper.PrintUnmatchedSendsQuery} message PrintUnmatchedSendsQuery\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PrintUnmatchedSendsQuery.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.printUnmatchedSends = false;\n            if (message.printUnmatchedSends != null && message.hasOwnProperty(\"printUnmatchedSends\"))\n                object.printUnmatchedSends = message.printUnmatchedSends;\n            return object;\n        };\n\n        /**\n         * Converts this PrintUnmatchedSendsQuery to JSON.\n         * @function toJSON\n         * @memberof casper.PrintUnmatchedSendsQuery\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PrintUnmatchedSendsQuery.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return PrintUnmatchedSendsQuery;\n    })();\n\n    return casper;\n})();\n\n$root.scalapb = (function() {\n\n    /**\n     * Namespace scalapb.\n     * @exports scalapb\n     * @namespace\n     */\n    var scalapb = {};\n\n    scalapb.ScalaPbOptions = (function() {\n\n        /**\n         * Properties of a ScalaPbOptions.\n         * @memberof scalapb\n         * @interface IScalaPbOptions\n         * @property {string|null} [package_name] ScalaPbOptions package_name\n         * @property {boolean|null} [flat_package] ScalaPbOptions flat_package\n         * @property {Array.<string>|null} [\"import\"] ScalaPbOptions import\n         * @property {Array.<string>|null} [preamble] ScalaPbOptions preamble\n         * @property {boolean|null} [single_file] ScalaPbOptions single_file\n         * @property {boolean|null} [no_primitive_wrappers] ScalaPbOptions no_primitive_wrappers\n         * @property {boolean|null} [primitive_wrappers] ScalaPbOptions primitive_wrappers\n         * @property {string|null} [collection_type] ScalaPbOptions collection_type\n         * @property {boolean|null} [preserve_unknown_fields] ScalaPbOptions preserve_unknown_fields\n         * @property {string|null} [object_name] ScalaPbOptions object_name\n         * @property {scalapb.ScalaPbOptions.OptionsScope|null} [scope] ScalaPbOptions scope\n         * @property {boolean|null} [lenses] ScalaPbOptions lenses\n         * @property {boolean|null} [retain_source_code_info] ScalaPbOptions retain_source_code_info\n         * @property {string|null} [map_type] ScalaPbOptions map_type\n         * @property {boolean|null} [no_default_values_in_constructor] ScalaPbOptions no_default_values_in_constructor\n         * @property {scalapb.ScalaPbOptions.EnumValueNaming|null} [enum_value_naming] ScalaPbOptions enum_value_naming\n         * @property {boolean|null} [enum_strip_prefix] ScalaPbOptions enum_strip_prefix\n         * @property {string|null} [bytes_type] ScalaPbOptions bytes_type\n         * @property {boolean|null} [java_conversions] ScalaPbOptions java_conversions\n         * @property {Array.<scalapb.ScalaPbOptions.IAuxMessageOptions>|null} [aux_message_options] ScalaPbOptions aux_message_options\n         * @property {Array.<scalapb.ScalaPbOptions.IAuxFieldOptions>|null} [aux_field_options] ScalaPbOptions aux_field_options\n         * @property {Array.<scalapb.ScalaPbOptions.IAuxEnumOptions>|null} [aux_enum_options] ScalaPbOptions aux_enum_options\n         * @property {Array.<scalapb.ScalaPbOptions.IAuxEnumValueOptions>|null} [aux_enum_value_options] ScalaPbOptions aux_enum_value_options\n         * @property {boolean|null} [test_only_no_java_conversions] ScalaPbOptions test_only_no_java_conversions\n         */\n\n        /**\n         * Constructs a new ScalaPbOptions.\n         * @memberof scalapb\n         * @classdesc Represents a ScalaPbOptions.\n         * @implements IScalaPbOptions\n         * @constructor\n         * @param {scalapb.IScalaPbOptions=} [properties] Properties to set\n         */\n        function ScalaPbOptions(properties) {\n            this[\"import\"] = [];\n            this.preamble = [];\n            this.aux_message_options = [];\n            this.aux_field_options = [];\n            this.aux_enum_options = [];\n            this.aux_enum_value_options = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ScalaPbOptions package_name.\n         * @member {string} package_name\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.package_name = \"\";\n\n        /**\n         * ScalaPbOptions flat_package.\n         * @member {boolean} flat_package\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.flat_package = false;\n\n        /**\n         * ScalaPbOptions import.\n         * @member {Array.<string>} import\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype[\"import\"] = $util.emptyArray;\n\n        /**\n         * ScalaPbOptions preamble.\n         * @member {Array.<string>} preamble\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.preamble = $util.emptyArray;\n\n        /**\n         * ScalaPbOptions single_file.\n         * @member {boolean} single_file\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.single_file = false;\n\n        /**\n         * ScalaPbOptions no_primitive_wrappers.\n         * @member {boolean} no_primitive_wrappers\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.no_primitive_wrappers = false;\n\n        /**\n         * ScalaPbOptions primitive_wrappers.\n         * @member {boolean} primitive_wrappers\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.primitive_wrappers = false;\n\n        /**\n         * ScalaPbOptions collection_type.\n         * @member {string} collection_type\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.collection_type = \"\";\n\n        /**\n         * ScalaPbOptions preserve_unknown_fields.\n         * @member {boolean} preserve_unknown_fields\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.preserve_unknown_fields = true;\n\n        /**\n         * ScalaPbOptions object_name.\n         * @member {string} object_name\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.object_name = \"\";\n\n        /**\n         * ScalaPbOptions scope.\n         * @member {scalapb.ScalaPbOptions.OptionsScope} scope\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.scope = 0;\n\n        /**\n         * ScalaPbOptions lenses.\n         * @member {boolean} lenses\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.lenses = true;\n\n        /**\n         * ScalaPbOptions retain_source_code_info.\n         * @member {boolean} retain_source_code_info\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.retain_source_code_info = false;\n\n        /**\n         * ScalaPbOptions map_type.\n         * @member {string} map_type\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.map_type = \"\";\n\n        /**\n         * ScalaPbOptions no_default_values_in_constructor.\n         * @member {boolean} no_default_values_in_constructor\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.no_default_values_in_constructor = false;\n\n        /**\n         * ScalaPbOptions enum_value_naming.\n         * @member {scalapb.ScalaPbOptions.EnumValueNaming} enum_value_naming\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.enum_value_naming = 0;\n\n        /**\n         * ScalaPbOptions enum_strip_prefix.\n         * @member {boolean} enum_strip_prefix\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.enum_strip_prefix = false;\n\n        /**\n         * ScalaPbOptions bytes_type.\n         * @member {string} bytes_type\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.bytes_type = \"\";\n\n        /**\n         * ScalaPbOptions java_conversions.\n         * @member {boolean} java_conversions\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.java_conversions = false;\n\n        /**\n         * ScalaPbOptions aux_message_options.\n         * @member {Array.<scalapb.ScalaPbOptions.IAuxMessageOptions>} aux_message_options\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.aux_message_options = $util.emptyArray;\n\n        /**\n         * ScalaPbOptions aux_field_options.\n         * @member {Array.<scalapb.ScalaPbOptions.IAuxFieldOptions>} aux_field_options\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.aux_field_options = $util.emptyArray;\n\n        /**\n         * ScalaPbOptions aux_enum_options.\n         * @member {Array.<scalapb.ScalaPbOptions.IAuxEnumOptions>} aux_enum_options\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.aux_enum_options = $util.emptyArray;\n\n        /**\n         * ScalaPbOptions aux_enum_value_options.\n         * @member {Array.<scalapb.ScalaPbOptions.IAuxEnumValueOptions>} aux_enum_value_options\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.aux_enum_value_options = $util.emptyArray;\n\n        /**\n         * ScalaPbOptions test_only_no_java_conversions.\n         * @member {boolean} test_only_no_java_conversions\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         */\n        ScalaPbOptions.prototype.test_only_no_java_conversions = false;\n\n        /**\n         * Creates a new ScalaPbOptions instance using the specified properties.\n         * @function create\n         * @memberof scalapb.ScalaPbOptions\n         * @static\n         * @param {scalapb.IScalaPbOptions=} [properties] Properties to set\n         * @returns {scalapb.ScalaPbOptions} ScalaPbOptions instance\n         */\n        ScalaPbOptions.create = function create(properties) {\n            return new ScalaPbOptions(properties);\n        };\n\n        /**\n         * Encodes the specified ScalaPbOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.verify|verify} messages.\n         * @function encode\n         * @memberof scalapb.ScalaPbOptions\n         * @static\n         * @param {scalapb.IScalaPbOptions} message ScalaPbOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ScalaPbOptions.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.package_name != null && message.hasOwnProperty(\"package_name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.package_name);\n            if (message.flat_package != null && message.hasOwnProperty(\"flat_package\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.flat_package);\n            if (message[\"import\"] != null && message[\"import\"].length)\n                for (var i = 0; i < message[\"import\"].length; ++i)\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message[\"import\"][i]);\n            if (message.preamble != null && message.preamble.length)\n                for (var i = 0; i < message.preamble.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.preamble[i]);\n            if (message.single_file != null && message.hasOwnProperty(\"single_file\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.single_file);\n            if (message.primitive_wrappers != null && message.hasOwnProperty(\"primitive_wrappers\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.primitive_wrappers);\n            if (message.no_primitive_wrappers != null && message.hasOwnProperty(\"no_primitive_wrappers\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.no_primitive_wrappers);\n            if (message.collection_type != null && message.hasOwnProperty(\"collection_type\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.collection_type);\n            if (message.preserve_unknown_fields != null && message.hasOwnProperty(\"preserve_unknown_fields\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.preserve_unknown_fields);\n            if (message.object_name != null && message.hasOwnProperty(\"object_name\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.object_name);\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.scope);\n            if (message.lenses != null && message.hasOwnProperty(\"lenses\"))\n                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.lenses);\n            if (message.retain_source_code_info != null && message.hasOwnProperty(\"retain_source_code_info\"))\n                writer.uint32(/* id 13, wireType 0 =*/104).bool(message.retain_source_code_info);\n            if (message.map_type != null && message.hasOwnProperty(\"map_type\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.map_type);\n            if (message.no_default_values_in_constructor != null && message.hasOwnProperty(\"no_default_values_in_constructor\"))\n                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.no_default_values_in_constructor);\n            if (message.enum_value_naming != null && message.hasOwnProperty(\"enum_value_naming\"))\n                writer.uint32(/* id 16, wireType 0 =*/128).int32(message.enum_value_naming);\n            if (message.enum_strip_prefix != null && message.hasOwnProperty(\"enum_strip_prefix\"))\n                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.enum_strip_prefix);\n            if (message.aux_message_options != null && message.aux_message_options.length)\n                for (var i = 0; i < message.aux_message_options.length; ++i)\n                    $root.scalapb.ScalaPbOptions.AuxMessageOptions.encode(message.aux_message_options[i], writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n            if (message.aux_field_options != null && message.aux_field_options.length)\n                for (var i = 0; i < message.aux_field_options.length; ++i)\n                    $root.scalapb.ScalaPbOptions.AuxFieldOptions.encode(message.aux_field_options[i], writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n            if (message.aux_enum_options != null && message.aux_enum_options.length)\n                for (var i = 0; i < message.aux_enum_options.length; ++i)\n                    $root.scalapb.ScalaPbOptions.AuxEnumOptions.encode(message.aux_enum_options[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.bytes_type != null && message.hasOwnProperty(\"bytes_type\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.bytes_type);\n            if (message.aux_enum_value_options != null && message.aux_enum_value_options.length)\n                for (var i = 0; i < message.aux_enum_value_options.length; ++i)\n                    $root.scalapb.ScalaPbOptions.AuxEnumValueOptions.encode(message.aux_enum_value_options[i], writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.java_conversions != null && message.hasOwnProperty(\"java_conversions\"))\n                writer.uint32(/* id 23, wireType 0 =*/184).bool(message.java_conversions);\n            if (message.test_only_no_java_conversions != null && message.hasOwnProperty(\"test_only_no_java_conversions\"))\n                writer.uint32(/* id 1001, wireType 0 =*/8008).bool(message.test_only_no_java_conversions);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ScalaPbOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof scalapb.ScalaPbOptions\n         * @static\n         * @param {scalapb.IScalaPbOptions} message ScalaPbOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ScalaPbOptions.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ScalaPbOptions message from the specified reader or buffer.\n         * @function decode\n         * @memberof scalapb.ScalaPbOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {scalapb.ScalaPbOptions} ScalaPbOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ScalaPbOptions.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.package_name = reader.string();\n                    break;\n                case 2:\n                    message.flat_package = reader.bool();\n                    break;\n                case 3:\n                    if (!(message[\"import\"] && message[\"import\"].length))\n                        message[\"import\"] = [];\n                    message[\"import\"].push(reader.string());\n                    break;\n                case 4:\n                    if (!(message.preamble && message.preamble.length))\n                        message.preamble = [];\n                    message.preamble.push(reader.string());\n                    break;\n                case 5:\n                    message.single_file = reader.bool();\n                    break;\n                case 7:\n                    message.no_primitive_wrappers = reader.bool();\n                    break;\n                case 6:\n                    message.primitive_wrappers = reader.bool();\n                    break;\n                case 8:\n                    message.collection_type = reader.string();\n                    break;\n                case 9:\n                    message.preserve_unknown_fields = reader.bool();\n                    break;\n                case 10:\n                    message.object_name = reader.string();\n                    break;\n                case 11:\n                    message.scope = reader.int32();\n                    break;\n                case 12:\n                    message.lenses = reader.bool();\n                    break;\n                case 13:\n                    message.retain_source_code_info = reader.bool();\n                    break;\n                case 14:\n                    message.map_type = reader.string();\n                    break;\n                case 15:\n                    message.no_default_values_in_constructor = reader.bool();\n                    break;\n                case 16:\n                    message.enum_value_naming = reader.int32();\n                    break;\n                case 17:\n                    message.enum_strip_prefix = reader.bool();\n                    break;\n                case 21:\n                    message.bytes_type = reader.string();\n                    break;\n                case 23:\n                    message.java_conversions = reader.bool();\n                    break;\n                case 18:\n                    if (!(message.aux_message_options && message.aux_message_options.length))\n                        message.aux_message_options = [];\n                    message.aux_message_options.push($root.scalapb.ScalaPbOptions.AuxMessageOptions.decode(reader, reader.uint32()));\n                    break;\n                case 19:\n                    if (!(message.aux_field_options && message.aux_field_options.length))\n                        message.aux_field_options = [];\n                    message.aux_field_options.push($root.scalapb.ScalaPbOptions.AuxFieldOptions.decode(reader, reader.uint32()));\n                    break;\n                case 20:\n                    if (!(message.aux_enum_options && message.aux_enum_options.length))\n                        message.aux_enum_options = [];\n                    message.aux_enum_options.push($root.scalapb.ScalaPbOptions.AuxEnumOptions.decode(reader, reader.uint32()));\n                    break;\n                case 22:\n                    if (!(message.aux_enum_value_options && message.aux_enum_value_options.length))\n                        message.aux_enum_value_options = [];\n                    message.aux_enum_value_options.push($root.scalapb.ScalaPbOptions.AuxEnumValueOptions.decode(reader, reader.uint32()));\n                    break;\n                case 1001:\n                    message.test_only_no_java_conversions = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ScalaPbOptions message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof scalapb.ScalaPbOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {scalapb.ScalaPbOptions} ScalaPbOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ScalaPbOptions.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ScalaPbOptions message.\n         * @function verify\n         * @memberof scalapb.ScalaPbOptions\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ScalaPbOptions.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.package_name != null && message.hasOwnProperty(\"package_name\"))\n                if (!$util.isString(message.package_name))\n                    return \"package_name: string expected\";\n            if (message.flat_package != null && message.hasOwnProperty(\"flat_package\"))\n                if (typeof message.flat_package !== \"boolean\")\n                    return \"flat_package: boolean expected\";\n            if (message[\"import\"] != null && message.hasOwnProperty(\"import\")) {\n                if (!Array.isArray(message[\"import\"]))\n                    return \"import: array expected\";\n                for (var i = 0; i < message[\"import\"].length; ++i)\n                    if (!$util.isString(message[\"import\"][i]))\n                        return \"import: string[] expected\";\n            }\n            if (message.preamble != null && message.hasOwnProperty(\"preamble\")) {\n                if (!Array.isArray(message.preamble))\n                    return \"preamble: array expected\";\n                for (var i = 0; i < message.preamble.length; ++i)\n                    if (!$util.isString(message.preamble[i]))\n                        return \"preamble: string[] expected\";\n            }\n            if (message.single_file != null && message.hasOwnProperty(\"single_file\"))\n                if (typeof message.single_file !== \"boolean\")\n                    return \"single_file: boolean expected\";\n            if (message.no_primitive_wrappers != null && message.hasOwnProperty(\"no_primitive_wrappers\"))\n                if (typeof message.no_primitive_wrappers !== \"boolean\")\n                    return \"no_primitive_wrappers: boolean expected\";\n            if (message.primitive_wrappers != null && message.hasOwnProperty(\"primitive_wrappers\"))\n                if (typeof message.primitive_wrappers !== \"boolean\")\n                    return \"primitive_wrappers: boolean expected\";\n            if (message.collection_type != null && message.hasOwnProperty(\"collection_type\"))\n                if (!$util.isString(message.collection_type))\n                    return \"collection_type: string expected\";\n            if (message.preserve_unknown_fields != null && message.hasOwnProperty(\"preserve_unknown_fields\"))\n                if (typeof message.preserve_unknown_fields !== \"boolean\")\n                    return \"preserve_unknown_fields: boolean expected\";\n            if (message.object_name != null && message.hasOwnProperty(\"object_name\"))\n                if (!$util.isString(message.object_name))\n                    return \"object_name: string expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                switch (message.scope) {\n                default:\n                    return \"scope: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.lenses != null && message.hasOwnProperty(\"lenses\"))\n                if (typeof message.lenses !== \"boolean\")\n                    return \"lenses: boolean expected\";\n            if (message.retain_source_code_info != null && message.hasOwnProperty(\"retain_source_code_info\"))\n                if (typeof message.retain_source_code_info !== \"boolean\")\n                    return \"retain_source_code_info: boolean expected\";\n            if (message.map_type != null && message.hasOwnProperty(\"map_type\"))\n                if (!$util.isString(message.map_type))\n                    return \"map_type: string expected\";\n            if (message.no_default_values_in_constructor != null && message.hasOwnProperty(\"no_default_values_in_constructor\"))\n                if (typeof message.no_default_values_in_constructor !== \"boolean\")\n                    return \"no_default_values_in_constructor: boolean expected\";\n            if (message.enum_value_naming != null && message.hasOwnProperty(\"enum_value_naming\"))\n                switch (message.enum_value_naming) {\n                default:\n                    return \"enum_value_naming: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.enum_strip_prefix != null && message.hasOwnProperty(\"enum_strip_prefix\"))\n                if (typeof message.enum_strip_prefix !== \"boolean\")\n                    return \"enum_strip_prefix: boolean expected\";\n            if (message.bytes_type != null && message.hasOwnProperty(\"bytes_type\"))\n                if (!$util.isString(message.bytes_type))\n                    return \"bytes_type: string expected\";\n            if (message.java_conversions != null && message.hasOwnProperty(\"java_conversions\"))\n                if (typeof message.java_conversions !== \"boolean\")\n                    return \"java_conversions: boolean expected\";\n            if (message.aux_message_options != null && message.hasOwnProperty(\"aux_message_options\")) {\n                if (!Array.isArray(message.aux_message_options))\n                    return \"aux_message_options: array expected\";\n                for (var i = 0; i < message.aux_message_options.length; ++i) {\n                    var error = $root.scalapb.ScalaPbOptions.AuxMessageOptions.verify(message.aux_message_options[i]);\n                    if (error)\n                        return \"aux_message_options.\" + error;\n                }\n            }\n            if (message.aux_field_options != null && message.hasOwnProperty(\"aux_field_options\")) {\n                if (!Array.isArray(message.aux_field_options))\n                    return \"aux_field_options: array expected\";\n                for (var i = 0; i < message.aux_field_options.length; ++i) {\n                    var error = $root.scalapb.ScalaPbOptions.AuxFieldOptions.verify(message.aux_field_options[i]);\n                    if (error)\n                        return \"aux_field_options.\" + error;\n                }\n            }\n            if (message.aux_enum_options != null && message.hasOwnProperty(\"aux_enum_options\")) {\n                if (!Array.isArray(message.aux_enum_options))\n                    return \"aux_enum_options: array expected\";\n                for (var i = 0; i < message.aux_enum_options.length; ++i) {\n                    var error = $root.scalapb.ScalaPbOptions.AuxEnumOptions.verify(message.aux_enum_options[i]);\n                    if (error)\n                        return \"aux_enum_options.\" + error;\n                }\n            }\n            if (message.aux_enum_value_options != null && message.hasOwnProperty(\"aux_enum_value_options\")) {\n                if (!Array.isArray(message.aux_enum_value_options))\n                    return \"aux_enum_value_options: array expected\";\n                for (var i = 0; i < message.aux_enum_value_options.length; ++i) {\n                    var error = $root.scalapb.ScalaPbOptions.AuxEnumValueOptions.verify(message.aux_enum_value_options[i]);\n                    if (error)\n                        return \"aux_enum_value_options.\" + error;\n                }\n            }\n            if (message.test_only_no_java_conversions != null && message.hasOwnProperty(\"test_only_no_java_conversions\"))\n                if (typeof message.test_only_no_java_conversions !== \"boolean\")\n                    return \"test_only_no_java_conversions: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ScalaPbOptions message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof scalapb.ScalaPbOptions\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {scalapb.ScalaPbOptions} ScalaPbOptions\n         */\n        ScalaPbOptions.fromObject = function fromObject(object) {\n            if (object instanceof $root.scalapb.ScalaPbOptions)\n                return object;\n            var message = new $root.scalapb.ScalaPbOptions();\n            if (object.package_name != null)\n                message.package_name = String(object.package_name);\n            if (object.flat_package != null)\n                message.flat_package = Boolean(object.flat_package);\n            if (object[\"import\"]) {\n                if (!Array.isArray(object[\"import\"]))\n                    throw TypeError(\".scalapb.ScalaPbOptions.import: array expected\");\n                message[\"import\"] = [];\n                for (var i = 0; i < object[\"import\"].length; ++i)\n                    message[\"import\"][i] = String(object[\"import\"][i]);\n            }\n            if (object.preamble) {\n                if (!Array.isArray(object.preamble))\n                    throw TypeError(\".scalapb.ScalaPbOptions.preamble: array expected\");\n                message.preamble = [];\n                for (var i = 0; i < object.preamble.length; ++i)\n                    message.preamble[i] = String(object.preamble[i]);\n            }\n            if (object.single_file != null)\n                message.single_file = Boolean(object.single_file);\n            if (object.no_primitive_wrappers != null)\n                message.no_primitive_wrappers = Boolean(object.no_primitive_wrappers);\n            if (object.primitive_wrappers != null)\n                message.primitive_wrappers = Boolean(object.primitive_wrappers);\n            if (object.collection_type != null)\n                message.collection_type = String(object.collection_type);\n            if (object.preserve_unknown_fields != null)\n                message.preserve_unknown_fields = Boolean(object.preserve_unknown_fields);\n            if (object.object_name != null)\n                message.object_name = String(object.object_name);\n            switch (object.scope) {\n            case \"FILE\":\n            case 0:\n                message.scope = 0;\n                break;\n            case \"PACKAGE\":\n            case 1:\n                message.scope = 1;\n                break;\n            }\n            if (object.lenses != null)\n                message.lenses = Boolean(object.lenses);\n            if (object.retain_source_code_info != null)\n                message.retain_source_code_info = Boolean(object.retain_source_code_info);\n            if (object.map_type != null)\n                message.map_type = String(object.map_type);\n            if (object.no_default_values_in_constructor != null)\n                message.no_default_values_in_constructor = Boolean(object.no_default_values_in_constructor);\n            switch (object.enum_value_naming) {\n            case \"AS_IN_PROTO\":\n            case 0:\n                message.enum_value_naming = 0;\n                break;\n            case \"CAMEL_CASE\":\n            case 1:\n                message.enum_value_naming = 1;\n                break;\n            }\n            if (object.enum_strip_prefix != null)\n                message.enum_strip_prefix = Boolean(object.enum_strip_prefix);\n            if (object.bytes_type != null)\n                message.bytes_type = String(object.bytes_type);\n            if (object.java_conversions != null)\n                message.java_conversions = Boolean(object.java_conversions);\n            if (object.aux_message_options) {\n                if (!Array.isArray(object.aux_message_options))\n                    throw TypeError(\".scalapb.ScalaPbOptions.aux_message_options: array expected\");\n                message.aux_message_options = [];\n                for (var i = 0; i < object.aux_message_options.length; ++i) {\n                    if (typeof object.aux_message_options[i] !== \"object\")\n                        throw TypeError(\".scalapb.ScalaPbOptions.aux_message_options: object expected\");\n                    message.aux_message_options[i] = $root.scalapb.ScalaPbOptions.AuxMessageOptions.fromObject(object.aux_message_options[i]);\n                }\n            }\n            if (object.aux_field_options) {\n                if (!Array.isArray(object.aux_field_options))\n                    throw TypeError(\".scalapb.ScalaPbOptions.aux_field_options: array expected\");\n                message.aux_field_options = [];\n                for (var i = 0; i < object.aux_field_options.length; ++i) {\n                    if (typeof object.aux_field_options[i] !== \"object\")\n                        throw TypeError(\".scalapb.ScalaPbOptions.aux_field_options: object expected\");\n                    message.aux_field_options[i] = $root.scalapb.ScalaPbOptions.AuxFieldOptions.fromObject(object.aux_field_options[i]);\n                }\n            }\n            if (object.aux_enum_options) {\n                if (!Array.isArray(object.aux_enum_options))\n                    throw TypeError(\".scalapb.ScalaPbOptions.aux_enum_options: array expected\");\n                message.aux_enum_options = [];\n                for (var i = 0; i < object.aux_enum_options.length; ++i) {\n                    if (typeof object.aux_enum_options[i] !== \"object\")\n                        throw TypeError(\".scalapb.ScalaPbOptions.aux_enum_options: object expected\");\n                    message.aux_enum_options[i] = $root.scalapb.ScalaPbOptions.AuxEnumOptions.fromObject(object.aux_enum_options[i]);\n                }\n            }\n            if (object.aux_enum_value_options) {\n                if (!Array.isArray(object.aux_enum_value_options))\n                    throw TypeError(\".scalapb.ScalaPbOptions.aux_enum_value_options: array expected\");\n                message.aux_enum_value_options = [];\n                for (var i = 0; i < object.aux_enum_value_options.length; ++i) {\n                    if (typeof object.aux_enum_value_options[i] !== \"object\")\n                        throw TypeError(\".scalapb.ScalaPbOptions.aux_enum_value_options: object expected\");\n                    message.aux_enum_value_options[i] = $root.scalapb.ScalaPbOptions.AuxEnumValueOptions.fromObject(object.aux_enum_value_options[i]);\n                }\n            }\n            if (object.test_only_no_java_conversions != null)\n                message.test_only_no_java_conversions = Boolean(object.test_only_no_java_conversions);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ScalaPbOptions message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof scalapb.ScalaPbOptions\n         * @static\n         * @param {scalapb.ScalaPbOptions} message ScalaPbOptions\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ScalaPbOptions.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object[\"import\"] = [];\n                object.preamble = [];\n                object.aux_message_options = [];\n                object.aux_field_options = [];\n                object.aux_enum_options = [];\n                object.aux_enum_value_options = [];\n            }\n            if (options.defaults) {\n                object.package_name = \"\";\n                object.flat_package = false;\n                object.single_file = false;\n                object.primitive_wrappers = false;\n                object.no_primitive_wrappers = false;\n                object.collection_type = \"\";\n                object.preserve_unknown_fields = true;\n                object.object_name = \"\";\n                object.scope = options.enums === String ? \"FILE\" : 0;\n                object.lenses = true;\n                object.retain_source_code_info = false;\n                object.map_type = \"\";\n                object.no_default_values_in_constructor = false;\n                object.enum_value_naming = options.enums === String ? \"AS_IN_PROTO\" : 0;\n                object.enum_strip_prefix = false;\n                object.bytes_type = \"\";\n                object.java_conversions = false;\n                object.test_only_no_java_conversions = false;\n            }\n            if (message.package_name != null && message.hasOwnProperty(\"package_name\"))\n                object.package_name = message.package_name;\n            if (message.flat_package != null && message.hasOwnProperty(\"flat_package\"))\n                object.flat_package = message.flat_package;\n            if (message[\"import\"] && message[\"import\"].length) {\n                object[\"import\"] = [];\n                for (var j = 0; j < message[\"import\"].length; ++j)\n                    object[\"import\"][j] = message[\"import\"][j];\n            }\n            if (message.preamble && message.preamble.length) {\n                object.preamble = [];\n                for (var j = 0; j < message.preamble.length; ++j)\n                    object.preamble[j] = message.preamble[j];\n            }\n            if (message.single_file != null && message.hasOwnProperty(\"single_file\"))\n                object.single_file = message.single_file;\n            if (message.primitive_wrappers != null && message.hasOwnProperty(\"primitive_wrappers\"))\n                object.primitive_wrappers = message.primitive_wrappers;\n            if (message.no_primitive_wrappers != null && message.hasOwnProperty(\"no_primitive_wrappers\"))\n                object.no_primitive_wrappers = message.no_primitive_wrappers;\n            if (message.collection_type != null && message.hasOwnProperty(\"collection_type\"))\n                object.collection_type = message.collection_type;\n            if (message.preserve_unknown_fields != null && message.hasOwnProperty(\"preserve_unknown_fields\"))\n                object.preserve_unknown_fields = message.preserve_unknown_fields;\n            if (message.object_name != null && message.hasOwnProperty(\"object_name\"))\n                object.object_name = message.object_name;\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                object.scope = options.enums === String ? $root.scalapb.ScalaPbOptions.OptionsScope[message.scope] : message.scope;\n            if (message.lenses != null && message.hasOwnProperty(\"lenses\"))\n                object.lenses = message.lenses;\n            if (message.retain_source_code_info != null && message.hasOwnProperty(\"retain_source_code_info\"))\n                object.retain_source_code_info = message.retain_source_code_info;\n            if (message.map_type != null && message.hasOwnProperty(\"map_type\"))\n                object.map_type = message.map_type;\n            if (message.no_default_values_in_constructor != null && message.hasOwnProperty(\"no_default_values_in_constructor\"))\n                object.no_default_values_in_constructor = message.no_default_values_in_constructor;\n            if (message.enum_value_naming != null && message.hasOwnProperty(\"enum_value_naming\"))\n                object.enum_value_naming = options.enums === String ? $root.scalapb.ScalaPbOptions.EnumValueNaming[message.enum_value_naming] : message.enum_value_naming;\n            if (message.enum_strip_prefix != null && message.hasOwnProperty(\"enum_strip_prefix\"))\n                object.enum_strip_prefix = message.enum_strip_prefix;\n            if (message.aux_message_options && message.aux_message_options.length) {\n                object.aux_message_options = [];\n                for (var j = 0; j < message.aux_message_options.length; ++j)\n                    object.aux_message_options[j] = $root.scalapb.ScalaPbOptions.AuxMessageOptions.toObject(message.aux_message_options[j], options);\n            }\n            if (message.aux_field_options && message.aux_field_options.length) {\n                object.aux_field_options = [];\n                for (var j = 0; j < message.aux_field_options.length; ++j)\n                    object.aux_field_options[j] = $root.scalapb.ScalaPbOptions.AuxFieldOptions.toObject(message.aux_field_options[j], options);\n            }\n            if (message.aux_enum_options && message.aux_enum_options.length) {\n                object.aux_enum_options = [];\n                for (var j = 0; j < message.aux_enum_options.length; ++j)\n                    object.aux_enum_options[j] = $root.scalapb.ScalaPbOptions.AuxEnumOptions.toObject(message.aux_enum_options[j], options);\n            }\n            if (message.bytes_type != null && message.hasOwnProperty(\"bytes_type\"))\n                object.bytes_type = message.bytes_type;\n            if (message.aux_enum_value_options && message.aux_enum_value_options.length) {\n                object.aux_enum_value_options = [];\n                for (var j = 0; j < message.aux_enum_value_options.length; ++j)\n                    object.aux_enum_value_options[j] = $root.scalapb.ScalaPbOptions.AuxEnumValueOptions.toObject(message.aux_enum_value_options[j], options);\n            }\n            if (message.java_conversions != null && message.hasOwnProperty(\"java_conversions\"))\n                object.java_conversions = message.java_conversions;\n            if (message.test_only_no_java_conversions != null && message.hasOwnProperty(\"test_only_no_java_conversions\"))\n                object.test_only_no_java_conversions = message.test_only_no_java_conversions;\n            return object;\n        };\n\n        /**\n         * Converts this ScalaPbOptions to JSON.\n         * @function toJSON\n         * @memberof scalapb.ScalaPbOptions\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ScalaPbOptions.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * OptionsScope enum.\n         * @name scalapb.ScalaPbOptions.OptionsScope\n         * @enum {string}\n         * @property {number} FILE=0 FILE value\n         * @property {number} PACKAGE=1 PACKAGE value\n         */\n        ScalaPbOptions.OptionsScope = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"FILE\"] = 0;\n            values[valuesById[1] = \"PACKAGE\"] = 1;\n            return values;\n        })();\n\n        /**\n         * EnumValueNaming enum.\n         * @name scalapb.ScalaPbOptions.EnumValueNaming\n         * @enum {string}\n         * @property {number} AS_IN_PROTO=0 AS_IN_PROTO value\n         * @property {number} CAMEL_CASE=1 CAMEL_CASE value\n         */\n        ScalaPbOptions.EnumValueNaming = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"AS_IN_PROTO\"] = 0;\n            values[valuesById[1] = \"CAMEL_CASE\"] = 1;\n            return values;\n        })();\n\n        ScalaPbOptions.AuxMessageOptions = (function() {\n\n            /**\n             * Properties of an AuxMessageOptions.\n             * @memberof scalapb.ScalaPbOptions\n             * @interface IAuxMessageOptions\n             * @property {string|null} [target] AuxMessageOptions target\n             * @property {scalapb.IMessageOptions|null} [options] AuxMessageOptions options\n             */\n\n            /**\n             * Constructs a new AuxMessageOptions.\n             * @memberof scalapb.ScalaPbOptions\n             * @classdesc Represents an AuxMessageOptions.\n             * @implements IAuxMessageOptions\n             * @constructor\n             * @param {scalapb.ScalaPbOptions.IAuxMessageOptions=} [properties] Properties to set\n             */\n            function AuxMessageOptions(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * AuxMessageOptions target.\n             * @member {string} target\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @instance\n             */\n            AuxMessageOptions.prototype.target = \"\";\n\n            /**\n             * AuxMessageOptions options.\n             * @member {scalapb.IMessageOptions|null|undefined} options\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @instance\n             */\n            AuxMessageOptions.prototype.options = null;\n\n            /**\n             * Creates a new AuxMessageOptions instance using the specified properties.\n             * @function create\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxMessageOptions=} [properties] Properties to set\n             * @returns {scalapb.ScalaPbOptions.AuxMessageOptions} AuxMessageOptions instance\n             */\n            AuxMessageOptions.create = function create(properties) {\n                return new AuxMessageOptions(properties);\n            };\n\n            /**\n             * Encodes the specified AuxMessageOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.AuxMessageOptions.verify|verify} messages.\n             * @function encode\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxMessageOptions} message AuxMessageOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AuxMessageOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.target);\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.scalapb.MessageOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified AuxMessageOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.AuxMessageOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxMessageOptions} message AuxMessageOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AuxMessageOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an AuxMessageOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {scalapb.ScalaPbOptions.AuxMessageOptions} AuxMessageOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AuxMessageOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions.AuxMessageOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.target = reader.string();\n                        break;\n                    case 2:\n                        message.options = $root.scalapb.MessageOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an AuxMessageOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {scalapb.ScalaPbOptions.AuxMessageOptions} AuxMessageOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AuxMessageOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an AuxMessageOptions message.\n             * @function verify\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            AuxMessageOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    if (!$util.isString(message.target))\n                        return \"target: string expected\";\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.scalapb.MessageOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an AuxMessageOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {scalapb.ScalaPbOptions.AuxMessageOptions} AuxMessageOptions\n             */\n            AuxMessageOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.scalapb.ScalaPbOptions.AuxMessageOptions)\n                    return object;\n                var message = new $root.scalapb.ScalaPbOptions.AuxMessageOptions();\n                if (object.target != null)\n                    message.target = String(object.target);\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".scalapb.ScalaPbOptions.AuxMessageOptions.options: object expected\");\n                    message.options = $root.scalapb.MessageOptions.fromObject(object.options);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an AuxMessageOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.AuxMessageOptions} message AuxMessageOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            AuxMessageOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.target = \"\";\n                    object.options = null;\n                }\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    object.target = message.target;\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.scalapb.MessageOptions.toObject(message.options, options);\n                return object;\n            };\n\n            /**\n             * Converts this AuxMessageOptions to JSON.\n             * @function toJSON\n             * @memberof scalapb.ScalaPbOptions.AuxMessageOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            AuxMessageOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return AuxMessageOptions;\n        })();\n\n        ScalaPbOptions.AuxFieldOptions = (function() {\n\n            /**\n             * Properties of an AuxFieldOptions.\n             * @memberof scalapb.ScalaPbOptions\n             * @interface IAuxFieldOptions\n             * @property {string|null} [target] AuxFieldOptions target\n             * @property {scalapb.IFieldOptions|null} [options] AuxFieldOptions options\n             */\n\n            /**\n             * Constructs a new AuxFieldOptions.\n             * @memberof scalapb.ScalaPbOptions\n             * @classdesc Represents an AuxFieldOptions.\n             * @implements IAuxFieldOptions\n             * @constructor\n             * @param {scalapb.ScalaPbOptions.IAuxFieldOptions=} [properties] Properties to set\n             */\n            function AuxFieldOptions(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * AuxFieldOptions target.\n             * @member {string} target\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @instance\n             */\n            AuxFieldOptions.prototype.target = \"\";\n\n            /**\n             * AuxFieldOptions options.\n             * @member {scalapb.IFieldOptions|null|undefined} options\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @instance\n             */\n            AuxFieldOptions.prototype.options = null;\n\n            /**\n             * Creates a new AuxFieldOptions instance using the specified properties.\n             * @function create\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxFieldOptions=} [properties] Properties to set\n             * @returns {scalapb.ScalaPbOptions.AuxFieldOptions} AuxFieldOptions instance\n             */\n            AuxFieldOptions.create = function create(properties) {\n                return new AuxFieldOptions(properties);\n            };\n\n            /**\n             * Encodes the specified AuxFieldOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.AuxFieldOptions.verify|verify} messages.\n             * @function encode\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxFieldOptions} message AuxFieldOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AuxFieldOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.target);\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.scalapb.FieldOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified AuxFieldOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.AuxFieldOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxFieldOptions} message AuxFieldOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AuxFieldOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an AuxFieldOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {scalapb.ScalaPbOptions.AuxFieldOptions} AuxFieldOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AuxFieldOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions.AuxFieldOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.target = reader.string();\n                        break;\n                    case 2:\n                        message.options = $root.scalapb.FieldOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an AuxFieldOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {scalapb.ScalaPbOptions.AuxFieldOptions} AuxFieldOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AuxFieldOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an AuxFieldOptions message.\n             * @function verify\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            AuxFieldOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    if (!$util.isString(message.target))\n                        return \"target: string expected\";\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.scalapb.FieldOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an AuxFieldOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {scalapb.ScalaPbOptions.AuxFieldOptions} AuxFieldOptions\n             */\n            AuxFieldOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.scalapb.ScalaPbOptions.AuxFieldOptions)\n                    return object;\n                var message = new $root.scalapb.ScalaPbOptions.AuxFieldOptions();\n                if (object.target != null)\n                    message.target = String(object.target);\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".scalapb.ScalaPbOptions.AuxFieldOptions.options: object expected\");\n                    message.options = $root.scalapb.FieldOptions.fromObject(object.options);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an AuxFieldOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.AuxFieldOptions} message AuxFieldOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            AuxFieldOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.target = \"\";\n                    object.options = null;\n                }\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    object.target = message.target;\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.scalapb.FieldOptions.toObject(message.options, options);\n                return object;\n            };\n\n            /**\n             * Converts this AuxFieldOptions to JSON.\n             * @function toJSON\n             * @memberof scalapb.ScalaPbOptions.AuxFieldOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            AuxFieldOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return AuxFieldOptions;\n        })();\n\n        ScalaPbOptions.AuxEnumOptions = (function() {\n\n            /**\n             * Properties of an AuxEnumOptions.\n             * @memberof scalapb.ScalaPbOptions\n             * @interface IAuxEnumOptions\n             * @property {string|null} [target] AuxEnumOptions target\n             * @property {scalapb.IEnumOptions|null} [options] AuxEnumOptions options\n             */\n\n            /**\n             * Constructs a new AuxEnumOptions.\n             * @memberof scalapb.ScalaPbOptions\n             * @classdesc Represents an AuxEnumOptions.\n             * @implements IAuxEnumOptions\n             * @constructor\n             * @param {scalapb.ScalaPbOptions.IAuxEnumOptions=} [properties] Properties to set\n             */\n            function AuxEnumOptions(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * AuxEnumOptions target.\n             * @member {string} target\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @instance\n             */\n            AuxEnumOptions.prototype.target = \"\";\n\n            /**\n             * AuxEnumOptions options.\n             * @member {scalapb.IEnumOptions|null|undefined} options\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @instance\n             */\n            AuxEnumOptions.prototype.options = null;\n\n            /**\n             * Creates a new AuxEnumOptions instance using the specified properties.\n             * @function create\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxEnumOptions=} [properties] Properties to set\n             * @returns {scalapb.ScalaPbOptions.AuxEnumOptions} AuxEnumOptions instance\n             */\n            AuxEnumOptions.create = function create(properties) {\n                return new AuxEnumOptions(properties);\n            };\n\n            /**\n             * Encodes the specified AuxEnumOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.AuxEnumOptions.verify|verify} messages.\n             * @function encode\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxEnumOptions} message AuxEnumOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AuxEnumOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.target);\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.scalapb.EnumOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified AuxEnumOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.AuxEnumOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxEnumOptions} message AuxEnumOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AuxEnumOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an AuxEnumOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {scalapb.ScalaPbOptions.AuxEnumOptions} AuxEnumOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AuxEnumOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions.AuxEnumOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.target = reader.string();\n                        break;\n                    case 2:\n                        message.options = $root.scalapb.EnumOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an AuxEnumOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {scalapb.ScalaPbOptions.AuxEnumOptions} AuxEnumOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AuxEnumOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an AuxEnumOptions message.\n             * @function verify\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            AuxEnumOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    if (!$util.isString(message.target))\n                        return \"target: string expected\";\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.scalapb.EnumOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an AuxEnumOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {scalapb.ScalaPbOptions.AuxEnumOptions} AuxEnumOptions\n             */\n            AuxEnumOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.scalapb.ScalaPbOptions.AuxEnumOptions)\n                    return object;\n                var message = new $root.scalapb.ScalaPbOptions.AuxEnumOptions();\n                if (object.target != null)\n                    message.target = String(object.target);\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".scalapb.ScalaPbOptions.AuxEnumOptions.options: object expected\");\n                    message.options = $root.scalapb.EnumOptions.fromObject(object.options);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an AuxEnumOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.AuxEnumOptions} message AuxEnumOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            AuxEnumOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.target = \"\";\n                    object.options = null;\n                }\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    object.target = message.target;\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.scalapb.EnumOptions.toObject(message.options, options);\n                return object;\n            };\n\n            /**\n             * Converts this AuxEnumOptions to JSON.\n             * @function toJSON\n             * @memberof scalapb.ScalaPbOptions.AuxEnumOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            AuxEnumOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return AuxEnumOptions;\n        })();\n\n        ScalaPbOptions.AuxEnumValueOptions = (function() {\n\n            /**\n             * Properties of an AuxEnumValueOptions.\n             * @memberof scalapb.ScalaPbOptions\n             * @interface IAuxEnumValueOptions\n             * @property {string|null} [target] AuxEnumValueOptions target\n             * @property {scalapb.IEnumValueOptions|null} [options] AuxEnumValueOptions options\n             */\n\n            /**\n             * Constructs a new AuxEnumValueOptions.\n             * @memberof scalapb.ScalaPbOptions\n             * @classdesc Represents an AuxEnumValueOptions.\n             * @implements IAuxEnumValueOptions\n             * @constructor\n             * @param {scalapb.ScalaPbOptions.IAuxEnumValueOptions=} [properties] Properties to set\n             */\n            function AuxEnumValueOptions(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * AuxEnumValueOptions target.\n             * @member {string} target\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @instance\n             */\n            AuxEnumValueOptions.prototype.target = \"\";\n\n            /**\n             * AuxEnumValueOptions options.\n             * @member {scalapb.IEnumValueOptions|null|undefined} options\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @instance\n             */\n            AuxEnumValueOptions.prototype.options = null;\n\n            /**\n             * Creates a new AuxEnumValueOptions instance using the specified properties.\n             * @function create\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxEnumValueOptions=} [properties] Properties to set\n             * @returns {scalapb.ScalaPbOptions.AuxEnumValueOptions} AuxEnumValueOptions instance\n             */\n            AuxEnumValueOptions.create = function create(properties) {\n                return new AuxEnumValueOptions(properties);\n            };\n\n            /**\n             * Encodes the specified AuxEnumValueOptions message. Does not implicitly {@link scalapb.ScalaPbOptions.AuxEnumValueOptions.verify|verify} messages.\n             * @function encode\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxEnumValueOptions} message AuxEnumValueOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AuxEnumValueOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.target);\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.scalapb.EnumValueOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified AuxEnumValueOptions message, length delimited. Does not implicitly {@link scalapb.ScalaPbOptions.AuxEnumValueOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.IAuxEnumValueOptions} message AuxEnumValueOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AuxEnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an AuxEnumValueOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {scalapb.ScalaPbOptions.AuxEnumValueOptions} AuxEnumValueOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AuxEnumValueOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.ScalaPbOptions.AuxEnumValueOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.target = reader.string();\n                        break;\n                    case 2:\n                        message.options = $root.scalapb.EnumValueOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an AuxEnumValueOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {scalapb.ScalaPbOptions.AuxEnumValueOptions} AuxEnumValueOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AuxEnumValueOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an AuxEnumValueOptions message.\n             * @function verify\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            AuxEnumValueOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    if (!$util.isString(message.target))\n                        return \"target: string expected\";\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.scalapb.EnumValueOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an AuxEnumValueOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {scalapb.ScalaPbOptions.AuxEnumValueOptions} AuxEnumValueOptions\n             */\n            AuxEnumValueOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.scalapb.ScalaPbOptions.AuxEnumValueOptions)\n                    return object;\n                var message = new $root.scalapb.ScalaPbOptions.AuxEnumValueOptions();\n                if (object.target != null)\n                    message.target = String(object.target);\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".scalapb.ScalaPbOptions.AuxEnumValueOptions.options: object expected\");\n                    message.options = $root.scalapb.EnumValueOptions.fromObject(object.options);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an AuxEnumValueOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @static\n             * @param {scalapb.ScalaPbOptions.AuxEnumValueOptions} message AuxEnumValueOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            AuxEnumValueOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.target = \"\";\n                    object.options = null;\n                }\n                if (message.target != null && message.hasOwnProperty(\"target\"))\n                    object.target = message.target;\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.scalapb.EnumValueOptions.toObject(message.options, options);\n                return object;\n            };\n\n            /**\n             * Converts this AuxEnumValueOptions to JSON.\n             * @function toJSON\n             * @memberof scalapb.ScalaPbOptions.AuxEnumValueOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            AuxEnumValueOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return AuxEnumValueOptions;\n        })();\n\n        return ScalaPbOptions;\n    })();\n\n    scalapb.MessageOptions = (function() {\n\n        /**\n         * Properties of a MessageOptions.\n         * @memberof scalapb\n         * @interface IMessageOptions\n         * @property {Array.<string>|null} [\"extends\"] MessageOptions extends\n         * @property {Array.<string>|null} [companion_extends] MessageOptions companion_extends\n         * @property {Array.<string>|null} [annotations] MessageOptions annotations\n         * @property {string|null} [type] MessageOptions type\n         * @property {Array.<string>|null} [companion_annotations] MessageOptions companion_annotations\n         * @property {Array.<string>|null} [sealed_oneof_extends] MessageOptions sealed_oneof_extends\n         * @property {boolean|null} [no_box] MessageOptions no_box\n         * @property {Array.<string>|null} [unknown_fields_annotations] MessageOptions unknown_fields_annotations\n         */\n\n        /**\n         * Constructs a new MessageOptions.\n         * @memberof scalapb\n         * @classdesc Represents a MessageOptions.\n         * @implements IMessageOptions\n         * @constructor\n         * @param {scalapb.IMessageOptions=} [properties] Properties to set\n         */\n        function MessageOptions(properties) {\n            this[\"extends\"] = [];\n            this.companion_extends = [];\n            this.annotations = [];\n            this.companion_annotations = [];\n            this.sealed_oneof_extends = [];\n            this.unknown_fields_annotations = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * MessageOptions extends.\n         * @member {Array.<string>} extends\n         * @memberof scalapb.MessageOptions\n         * @instance\n         */\n        MessageOptions.prototype[\"extends\"] = $util.emptyArray;\n\n        /**\n         * MessageOptions companion_extends.\n         * @member {Array.<string>} companion_extends\n         * @memberof scalapb.MessageOptions\n         * @instance\n         */\n        MessageOptions.prototype.companion_extends = $util.emptyArray;\n\n        /**\n         * MessageOptions annotations.\n         * @member {Array.<string>} annotations\n         * @memberof scalapb.MessageOptions\n         * @instance\n         */\n        MessageOptions.prototype.annotations = $util.emptyArray;\n\n        /**\n         * MessageOptions type.\n         * @member {string} type\n         * @memberof scalapb.MessageOptions\n         * @instance\n         */\n        MessageOptions.prototype.type = \"\";\n\n        /**\n         * MessageOptions companion_annotations.\n         * @member {Array.<string>} companion_annotations\n         * @memberof scalapb.MessageOptions\n         * @instance\n         */\n        MessageOptions.prototype.companion_annotations = $util.emptyArray;\n\n        /**\n         * MessageOptions sealed_oneof_extends.\n         * @member {Array.<string>} sealed_oneof_extends\n         * @memberof scalapb.MessageOptions\n         * @instance\n         */\n        MessageOptions.prototype.sealed_oneof_extends = $util.emptyArray;\n\n        /**\n         * MessageOptions no_box.\n         * @member {boolean} no_box\n         * @memberof scalapb.MessageOptions\n         * @instance\n         */\n        MessageOptions.prototype.no_box = false;\n\n        /**\n         * MessageOptions unknown_fields_annotations.\n         * @member {Array.<string>} unknown_fields_annotations\n         * @memberof scalapb.MessageOptions\n         * @instance\n         */\n        MessageOptions.prototype.unknown_fields_annotations = $util.emptyArray;\n\n        /**\n         * Creates a new MessageOptions instance using the specified properties.\n         * @function create\n         * @memberof scalapb.MessageOptions\n         * @static\n         * @param {scalapb.IMessageOptions=} [properties] Properties to set\n         * @returns {scalapb.MessageOptions} MessageOptions instance\n         */\n        MessageOptions.create = function create(properties) {\n            return new MessageOptions(properties);\n        };\n\n        /**\n         * Encodes the specified MessageOptions message. Does not implicitly {@link scalapb.MessageOptions.verify|verify} messages.\n         * @function encode\n         * @memberof scalapb.MessageOptions\n         * @static\n         * @param {scalapb.IMessageOptions} message MessageOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MessageOptions.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message[\"extends\"] != null && message[\"extends\"].length)\n                for (var i = 0; i < message[\"extends\"].length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message[\"extends\"][i]);\n            if (message.companion_extends != null && message.companion_extends.length)\n                for (var i = 0; i < message.companion_extends.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.companion_extends[i]);\n            if (message.annotations != null && message.annotations.length)\n                for (var i = 0; i < message.annotations.length; ++i)\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.annotations[i]);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.type);\n            if (message.companion_annotations != null && message.companion_annotations.length)\n                for (var i = 0; i < message.companion_annotations.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.companion_annotations[i]);\n            if (message.sealed_oneof_extends != null && message.sealed_oneof_extends.length)\n                for (var i = 0; i < message.sealed_oneof_extends.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.sealed_oneof_extends[i]);\n            if (message.no_box != null && message.hasOwnProperty(\"no_box\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.no_box);\n            if (message.unknown_fields_annotations != null && message.unknown_fields_annotations.length)\n                for (var i = 0; i < message.unknown_fields_annotations.length; ++i)\n                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.unknown_fields_annotations[i]);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link scalapb.MessageOptions.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof scalapb.MessageOptions\n         * @static\n         * @param {scalapb.IMessageOptions} message MessageOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a MessageOptions message from the specified reader or buffer.\n         * @function decode\n         * @memberof scalapb.MessageOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {scalapb.MessageOptions} MessageOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MessageOptions.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.MessageOptions();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message[\"extends\"] && message[\"extends\"].length))\n                        message[\"extends\"] = [];\n                    message[\"extends\"].push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.companion_extends && message.companion_extends.length))\n                        message.companion_extends = [];\n                    message.companion_extends.push(reader.string());\n                    break;\n                case 3:\n                    if (!(message.annotations && message.annotations.length))\n                        message.annotations = [];\n                    message.annotations.push(reader.string());\n                    break;\n                case 4:\n                    message.type = reader.string();\n                    break;\n                case 5:\n                    if (!(message.companion_annotations && message.companion_annotations.length))\n                        message.companion_annotations = [];\n                    message.companion_annotations.push(reader.string());\n                    break;\n                case 6:\n                    if (!(message.sealed_oneof_extends && message.sealed_oneof_extends.length))\n                        message.sealed_oneof_extends = [];\n                    message.sealed_oneof_extends.push(reader.string());\n                    break;\n                case 7:\n                    message.no_box = reader.bool();\n                    break;\n                case 8:\n                    if (!(message.unknown_fields_annotations && message.unknown_fields_annotations.length))\n                        message.unknown_fields_annotations = [];\n                    message.unknown_fields_annotations.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a MessageOptions message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof scalapb.MessageOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {scalapb.MessageOptions} MessageOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        MessageOptions.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a MessageOptions message.\n         * @function verify\n         * @memberof scalapb.MessageOptions\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        MessageOptions.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message[\"extends\"] != null && message.hasOwnProperty(\"extends\")) {\n                if (!Array.isArray(message[\"extends\"]))\n                    return \"extends: array expected\";\n                for (var i = 0; i < message[\"extends\"].length; ++i)\n                    if (!$util.isString(message[\"extends\"][i]))\n                        return \"extends: string[] expected\";\n            }\n            if (message.companion_extends != null && message.hasOwnProperty(\"companion_extends\")) {\n                if (!Array.isArray(message.companion_extends))\n                    return \"companion_extends: array expected\";\n                for (var i = 0; i < message.companion_extends.length; ++i)\n                    if (!$util.isString(message.companion_extends[i]))\n                        return \"companion_extends: string[] expected\";\n            }\n            if (message.annotations != null && message.hasOwnProperty(\"annotations\")) {\n                if (!Array.isArray(message.annotations))\n                    return \"annotations: array expected\";\n                for (var i = 0; i < message.annotations.length; ++i)\n                    if (!$util.isString(message.annotations[i]))\n                        return \"annotations: string[] expected\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.companion_annotations != null && message.hasOwnProperty(\"companion_annotations\")) {\n                if (!Array.isArray(message.companion_annotations))\n                    return \"companion_annotations: array expected\";\n                for (var i = 0; i < message.companion_annotations.length; ++i)\n                    if (!$util.isString(message.companion_annotations[i]))\n                        return \"companion_annotations: string[] expected\";\n            }\n            if (message.sealed_oneof_extends != null && message.hasOwnProperty(\"sealed_oneof_extends\")) {\n                if (!Array.isArray(message.sealed_oneof_extends))\n                    return \"sealed_oneof_extends: array expected\";\n                for (var i = 0; i < message.sealed_oneof_extends.length; ++i)\n                    if (!$util.isString(message.sealed_oneof_extends[i]))\n                        return \"sealed_oneof_extends: string[] expected\";\n            }\n            if (message.no_box != null && message.hasOwnProperty(\"no_box\"))\n                if (typeof message.no_box !== \"boolean\")\n                    return \"no_box: boolean expected\";\n            if (message.unknown_fields_annotations != null && message.hasOwnProperty(\"unknown_fields_annotations\")) {\n                if (!Array.isArray(message.unknown_fields_annotations))\n                    return \"unknown_fields_annotations: array expected\";\n                for (var i = 0; i < message.unknown_fields_annotations.length; ++i)\n                    if (!$util.isString(message.unknown_fields_annotations[i]))\n                        return \"unknown_fields_annotations: string[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof scalapb.MessageOptions\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {scalapb.MessageOptions} MessageOptions\n         */\n        MessageOptions.fromObject = function fromObject(object) {\n            if (object instanceof $root.scalapb.MessageOptions)\n                return object;\n            var message = new $root.scalapb.MessageOptions();\n            if (object[\"extends\"]) {\n                if (!Array.isArray(object[\"extends\"]))\n                    throw TypeError(\".scalapb.MessageOptions.extends: array expected\");\n                message[\"extends\"] = [];\n                for (var i = 0; i < object[\"extends\"].length; ++i)\n                    message[\"extends\"][i] = String(object[\"extends\"][i]);\n            }\n            if (object.companion_extends) {\n                if (!Array.isArray(object.companion_extends))\n                    throw TypeError(\".scalapb.MessageOptions.companion_extends: array expected\");\n                message.companion_extends = [];\n                for (var i = 0; i < object.companion_extends.length; ++i)\n                    message.companion_extends[i] = String(object.companion_extends[i]);\n            }\n            if (object.annotations) {\n                if (!Array.isArray(object.annotations))\n                    throw TypeError(\".scalapb.MessageOptions.annotations: array expected\");\n                message.annotations = [];\n                for (var i = 0; i < object.annotations.length; ++i)\n                    message.annotations[i] = String(object.annotations[i]);\n            }\n            if (object.type != null)\n                message.type = String(object.type);\n            if (object.companion_annotations) {\n                if (!Array.isArray(object.companion_annotations))\n                    throw TypeError(\".scalapb.MessageOptions.companion_annotations: array expected\");\n                message.companion_annotations = [];\n                for (var i = 0; i < object.companion_annotations.length; ++i)\n                    message.companion_annotations[i] = String(object.companion_annotations[i]);\n            }\n            if (object.sealed_oneof_extends) {\n                if (!Array.isArray(object.sealed_oneof_extends))\n                    throw TypeError(\".scalapb.MessageOptions.sealed_oneof_extends: array expected\");\n                message.sealed_oneof_extends = [];\n                for (var i = 0; i < object.sealed_oneof_extends.length; ++i)\n                    message.sealed_oneof_extends[i] = String(object.sealed_oneof_extends[i]);\n            }\n            if (object.no_box != null)\n                message.no_box = Boolean(object.no_box);\n            if (object.unknown_fields_annotations) {\n                if (!Array.isArray(object.unknown_fields_annotations))\n                    throw TypeError(\".scalapb.MessageOptions.unknown_fields_annotations: array expected\");\n                message.unknown_fields_annotations = [];\n                for (var i = 0; i < object.unknown_fields_annotations.length; ++i)\n                    message.unknown_fields_annotations[i] = String(object.unknown_fields_annotations[i]);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof scalapb.MessageOptions\n         * @static\n         * @param {scalapb.MessageOptions} message MessageOptions\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        MessageOptions.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object[\"extends\"] = [];\n                object.companion_extends = [];\n                object.annotations = [];\n                object.companion_annotations = [];\n                object.sealed_oneof_extends = [];\n                object.unknown_fields_annotations = [];\n            }\n            if (options.defaults) {\n                object.type = \"\";\n                object.no_box = false;\n            }\n            if (message[\"extends\"] && message[\"extends\"].length) {\n                object[\"extends\"] = [];\n                for (var j = 0; j < message[\"extends\"].length; ++j)\n                    object[\"extends\"][j] = message[\"extends\"][j];\n            }\n            if (message.companion_extends && message.companion_extends.length) {\n                object.companion_extends = [];\n                for (var j = 0; j < message.companion_extends.length; ++j)\n                    object.companion_extends[j] = message.companion_extends[j];\n            }\n            if (message.annotations && message.annotations.length) {\n                object.annotations = [];\n                for (var j = 0; j < message.annotations.length; ++j)\n                    object.annotations[j] = message.annotations[j];\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.companion_annotations && message.companion_annotations.length) {\n                object.companion_annotations = [];\n                for (var j = 0; j < message.companion_annotations.length; ++j)\n                    object.companion_annotations[j] = message.companion_annotations[j];\n            }\n            if (message.sealed_oneof_extends && message.sealed_oneof_extends.length) {\n                object.sealed_oneof_extends = [];\n                for (var j = 0; j < message.sealed_oneof_extends.length; ++j)\n                    object.sealed_oneof_extends[j] = message.sealed_oneof_extends[j];\n            }\n            if (message.no_box != null && message.hasOwnProperty(\"no_box\"))\n                object.no_box = message.no_box;\n            if (message.unknown_fields_annotations && message.unknown_fields_annotations.length) {\n                object.unknown_fields_annotations = [];\n                for (var j = 0; j < message.unknown_fields_annotations.length; ++j)\n                    object.unknown_fields_annotations[j] = message.unknown_fields_annotations[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this MessageOptions to JSON.\n         * @function toJSON\n         * @memberof scalapb.MessageOptions\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        MessageOptions.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return MessageOptions;\n    })();\n\n    scalapb.FieldOptions = (function() {\n\n        /**\n         * Properties of a FieldOptions.\n         * @memberof scalapb\n         * @interface IFieldOptions\n         * @property {string|null} [type] FieldOptions type\n         * @property {string|null} [scala_name] FieldOptions scala_name\n         * @property {string|null} [collection_type] FieldOptions collection_type\n         * @property {string|null} [key_type] FieldOptions key_type\n         * @property {string|null} [value_type] FieldOptions value_type\n         * @property {Array.<string>|null} [annotations] FieldOptions annotations\n         * @property {string|null} [map_type] FieldOptions map_type\n         * @property {boolean|null} [no_box] FieldOptions no_box\n         */\n\n        /**\n         * Constructs a new FieldOptions.\n         * @memberof scalapb\n         * @classdesc Represents a FieldOptions.\n         * @implements IFieldOptions\n         * @constructor\n         * @param {scalapb.IFieldOptions=} [properties] Properties to set\n         */\n        function FieldOptions(properties) {\n            this.annotations = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FieldOptions type.\n         * @member {string} type\n         * @memberof scalapb.FieldOptions\n         * @instance\n         */\n        FieldOptions.prototype.type = \"\";\n\n        /**\n         * FieldOptions scala_name.\n         * @member {string} scala_name\n         * @memberof scalapb.FieldOptions\n         * @instance\n         */\n        FieldOptions.prototype.scala_name = \"\";\n\n        /**\n         * FieldOptions collection_type.\n         * @member {string} collection_type\n         * @memberof scalapb.FieldOptions\n         * @instance\n         */\n        FieldOptions.prototype.collection_type = \"\";\n\n        /**\n         * FieldOptions key_type.\n         * @member {string} key_type\n         * @memberof scalapb.FieldOptions\n         * @instance\n         */\n        FieldOptions.prototype.key_type = \"\";\n\n        /**\n         * FieldOptions value_type.\n         * @member {string} value_type\n         * @memberof scalapb.FieldOptions\n         * @instance\n         */\n        FieldOptions.prototype.value_type = \"\";\n\n        /**\n         * FieldOptions annotations.\n         * @member {Array.<string>} annotations\n         * @memberof scalapb.FieldOptions\n         * @instance\n         */\n        FieldOptions.prototype.annotations = $util.emptyArray;\n\n        /**\n         * FieldOptions map_type.\n         * @member {string} map_type\n         * @memberof scalapb.FieldOptions\n         * @instance\n         */\n        FieldOptions.prototype.map_type = \"\";\n\n        /**\n         * FieldOptions no_box.\n         * @member {boolean} no_box\n         * @memberof scalapb.FieldOptions\n         * @instance\n         */\n        FieldOptions.prototype.no_box = false;\n\n        /**\n         * Creates a new FieldOptions instance using the specified properties.\n         * @function create\n         * @memberof scalapb.FieldOptions\n         * @static\n         * @param {scalapb.IFieldOptions=} [properties] Properties to set\n         * @returns {scalapb.FieldOptions} FieldOptions instance\n         */\n        FieldOptions.create = function create(properties) {\n            return new FieldOptions(properties);\n        };\n\n        /**\n         * Encodes the specified FieldOptions message. Does not implicitly {@link scalapb.FieldOptions.verify|verify} messages.\n         * @function encode\n         * @memberof scalapb.FieldOptions\n         * @static\n         * @param {scalapb.IFieldOptions} message FieldOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FieldOptions.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);\n            if (message.scala_name != null && message.hasOwnProperty(\"scala_name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.scala_name);\n            if (message.collection_type != null && message.hasOwnProperty(\"collection_type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.collection_type);\n            if (message.key_type != null && message.hasOwnProperty(\"key_type\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.key_type);\n            if (message.value_type != null && message.hasOwnProperty(\"value_type\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.value_type);\n            if (message.annotations != null && message.annotations.length)\n                for (var i = 0; i < message.annotations.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.annotations[i]);\n            if (message.map_type != null && message.hasOwnProperty(\"map_type\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.map_type);\n            if (message.no_box != null && message.hasOwnProperty(\"no_box\"))\n                writer.uint32(/* id 30, wireType 0 =*/240).bool(message.no_box);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link scalapb.FieldOptions.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof scalapb.FieldOptions\n         * @static\n         * @param {scalapb.IFieldOptions} message FieldOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FieldOptions message from the specified reader or buffer.\n         * @function decode\n         * @memberof scalapb.FieldOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {scalapb.FieldOptions} FieldOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FieldOptions.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.FieldOptions();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.type = reader.string();\n                    break;\n                case 2:\n                    message.scala_name = reader.string();\n                    break;\n                case 3:\n                    message.collection_type = reader.string();\n                    break;\n                case 4:\n                    message.key_type = reader.string();\n                    break;\n                case 5:\n                    message.value_type = reader.string();\n                    break;\n                case 6:\n                    if (!(message.annotations && message.annotations.length))\n                        message.annotations = [];\n                    message.annotations.push(reader.string());\n                    break;\n                case 7:\n                    message.map_type = reader.string();\n                    break;\n                case 30:\n                    message.no_box = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FieldOptions message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof scalapb.FieldOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {scalapb.FieldOptions} FieldOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FieldOptions.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FieldOptions message.\n         * @function verify\n         * @memberof scalapb.FieldOptions\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FieldOptions.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.scala_name != null && message.hasOwnProperty(\"scala_name\"))\n                if (!$util.isString(message.scala_name))\n                    return \"scala_name: string expected\";\n            if (message.collection_type != null && message.hasOwnProperty(\"collection_type\"))\n                if (!$util.isString(message.collection_type))\n                    return \"collection_type: string expected\";\n            if (message.key_type != null && message.hasOwnProperty(\"key_type\"))\n                if (!$util.isString(message.key_type))\n                    return \"key_type: string expected\";\n            if (message.value_type != null && message.hasOwnProperty(\"value_type\"))\n                if (!$util.isString(message.value_type))\n                    return \"value_type: string expected\";\n            if (message.annotations != null && message.hasOwnProperty(\"annotations\")) {\n                if (!Array.isArray(message.annotations))\n                    return \"annotations: array expected\";\n                for (var i = 0; i < message.annotations.length; ++i)\n                    if (!$util.isString(message.annotations[i]))\n                        return \"annotations: string[] expected\";\n            }\n            if (message.map_type != null && message.hasOwnProperty(\"map_type\"))\n                if (!$util.isString(message.map_type))\n                    return \"map_type: string expected\";\n            if (message.no_box != null && message.hasOwnProperty(\"no_box\"))\n                if (typeof message.no_box !== \"boolean\")\n                    return \"no_box: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof scalapb.FieldOptions\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {scalapb.FieldOptions} FieldOptions\n         */\n        FieldOptions.fromObject = function fromObject(object) {\n            if (object instanceof $root.scalapb.FieldOptions)\n                return object;\n            var message = new $root.scalapb.FieldOptions();\n            if (object.type != null)\n                message.type = String(object.type);\n            if (object.scala_name != null)\n                message.scala_name = String(object.scala_name);\n            if (object.collection_type != null)\n                message.collection_type = String(object.collection_type);\n            if (object.key_type != null)\n                message.key_type = String(object.key_type);\n            if (object.value_type != null)\n                message.value_type = String(object.value_type);\n            if (object.annotations) {\n                if (!Array.isArray(object.annotations))\n                    throw TypeError(\".scalapb.FieldOptions.annotations: array expected\");\n                message.annotations = [];\n                for (var i = 0; i < object.annotations.length; ++i)\n                    message.annotations[i] = String(object.annotations[i]);\n            }\n            if (object.map_type != null)\n                message.map_type = String(object.map_type);\n            if (object.no_box != null)\n                message.no_box = Boolean(object.no_box);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof scalapb.FieldOptions\n         * @static\n         * @param {scalapb.FieldOptions} message FieldOptions\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FieldOptions.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.annotations = [];\n            if (options.defaults) {\n                object.type = \"\";\n                object.scala_name = \"\";\n                object.collection_type = \"\";\n                object.key_type = \"\";\n                object.value_type = \"\";\n                object.map_type = \"\";\n                object.no_box = false;\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.scala_name != null && message.hasOwnProperty(\"scala_name\"))\n                object.scala_name = message.scala_name;\n            if (message.collection_type != null && message.hasOwnProperty(\"collection_type\"))\n                object.collection_type = message.collection_type;\n            if (message.key_type != null && message.hasOwnProperty(\"key_type\"))\n                object.key_type = message.key_type;\n            if (message.value_type != null && message.hasOwnProperty(\"value_type\"))\n                object.value_type = message.value_type;\n            if (message.annotations && message.annotations.length) {\n                object.annotations = [];\n                for (var j = 0; j < message.annotations.length; ++j)\n                    object.annotations[j] = message.annotations[j];\n            }\n            if (message.map_type != null && message.hasOwnProperty(\"map_type\"))\n                object.map_type = message.map_type;\n            if (message.no_box != null && message.hasOwnProperty(\"no_box\"))\n                object.no_box = message.no_box;\n            return object;\n        };\n\n        /**\n         * Converts this FieldOptions to JSON.\n         * @function toJSON\n         * @memberof scalapb.FieldOptions\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FieldOptions.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return FieldOptions;\n    })();\n\n    scalapb.EnumOptions = (function() {\n\n        /**\n         * Properties of an EnumOptions.\n         * @memberof scalapb\n         * @interface IEnumOptions\n         * @property {Array.<string>|null} [\"extends\"] EnumOptions extends\n         * @property {Array.<string>|null} [companion_extends] EnumOptions companion_extends\n         * @property {string|null} [type] EnumOptions type\n         */\n\n        /**\n         * Constructs a new EnumOptions.\n         * @memberof scalapb\n         * @classdesc Represents an EnumOptions.\n         * @implements IEnumOptions\n         * @constructor\n         * @param {scalapb.IEnumOptions=} [properties] Properties to set\n         */\n        function EnumOptions(properties) {\n            this[\"extends\"] = [];\n            this.companion_extends = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * EnumOptions extends.\n         * @member {Array.<string>} extends\n         * @memberof scalapb.EnumOptions\n         * @instance\n         */\n        EnumOptions.prototype[\"extends\"] = $util.emptyArray;\n\n        /**\n         * EnumOptions companion_extends.\n         * @member {Array.<string>} companion_extends\n         * @memberof scalapb.EnumOptions\n         * @instance\n         */\n        EnumOptions.prototype.companion_extends = $util.emptyArray;\n\n        /**\n         * EnumOptions type.\n         * @member {string} type\n         * @memberof scalapb.EnumOptions\n         * @instance\n         */\n        EnumOptions.prototype.type = \"\";\n\n        /**\n         * Creates a new EnumOptions instance using the specified properties.\n         * @function create\n         * @memberof scalapb.EnumOptions\n         * @static\n         * @param {scalapb.IEnumOptions=} [properties] Properties to set\n         * @returns {scalapb.EnumOptions} EnumOptions instance\n         */\n        EnumOptions.create = function create(properties) {\n            return new EnumOptions(properties);\n        };\n\n        /**\n         * Encodes the specified EnumOptions message. Does not implicitly {@link scalapb.EnumOptions.verify|verify} messages.\n         * @function encode\n         * @memberof scalapb.EnumOptions\n         * @static\n         * @param {scalapb.IEnumOptions} message EnumOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EnumOptions.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message[\"extends\"] != null && message[\"extends\"].length)\n                for (var i = 0; i < message[\"extends\"].length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message[\"extends\"][i]);\n            if (message.companion_extends != null && message.companion_extends.length)\n                for (var i = 0; i < message.companion_extends.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.companion_extends[i]);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link scalapb.EnumOptions.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof scalapb.EnumOptions\n         * @static\n         * @param {scalapb.IEnumOptions} message EnumOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an EnumOptions message from the specified reader or buffer.\n         * @function decode\n         * @memberof scalapb.EnumOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {scalapb.EnumOptions} EnumOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EnumOptions.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.EnumOptions();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message[\"extends\"] && message[\"extends\"].length))\n                        message[\"extends\"] = [];\n                    message[\"extends\"].push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.companion_extends && message.companion_extends.length))\n                        message.companion_extends = [];\n                    message.companion_extends.push(reader.string());\n                    break;\n                case 3:\n                    message.type = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an EnumOptions message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof scalapb.EnumOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {scalapb.EnumOptions} EnumOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EnumOptions.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an EnumOptions message.\n         * @function verify\n         * @memberof scalapb.EnumOptions\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        EnumOptions.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message[\"extends\"] != null && message.hasOwnProperty(\"extends\")) {\n                if (!Array.isArray(message[\"extends\"]))\n                    return \"extends: array expected\";\n                for (var i = 0; i < message[\"extends\"].length; ++i)\n                    if (!$util.isString(message[\"extends\"][i]))\n                        return \"extends: string[] expected\";\n            }\n            if (message.companion_extends != null && message.hasOwnProperty(\"companion_extends\")) {\n                if (!Array.isArray(message.companion_extends))\n                    return \"companion_extends: array expected\";\n                for (var i = 0; i < message.companion_extends.length; ++i)\n                    if (!$util.isString(message.companion_extends[i]))\n                        return \"companion_extends: string[] expected\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof scalapb.EnumOptions\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {scalapb.EnumOptions} EnumOptions\n         */\n        EnumOptions.fromObject = function fromObject(object) {\n            if (object instanceof $root.scalapb.EnumOptions)\n                return object;\n            var message = new $root.scalapb.EnumOptions();\n            if (object[\"extends\"]) {\n                if (!Array.isArray(object[\"extends\"]))\n                    throw TypeError(\".scalapb.EnumOptions.extends: array expected\");\n                message[\"extends\"] = [];\n                for (var i = 0; i < object[\"extends\"].length; ++i)\n                    message[\"extends\"][i] = String(object[\"extends\"][i]);\n            }\n            if (object.companion_extends) {\n                if (!Array.isArray(object.companion_extends))\n                    throw TypeError(\".scalapb.EnumOptions.companion_extends: array expected\");\n                message.companion_extends = [];\n                for (var i = 0; i < object.companion_extends.length; ++i)\n                    message.companion_extends[i] = String(object.companion_extends[i]);\n            }\n            if (object.type != null)\n                message.type = String(object.type);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof scalapb.EnumOptions\n         * @static\n         * @param {scalapb.EnumOptions} message EnumOptions\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EnumOptions.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object[\"extends\"] = [];\n                object.companion_extends = [];\n            }\n            if (options.defaults)\n                object.type = \"\";\n            if (message[\"extends\"] && message[\"extends\"].length) {\n                object[\"extends\"] = [];\n                for (var j = 0; j < message[\"extends\"].length; ++j)\n                    object[\"extends\"][j] = message[\"extends\"][j];\n            }\n            if (message.companion_extends && message.companion_extends.length) {\n                object.companion_extends = [];\n                for (var j = 0; j < message.companion_extends.length; ++j)\n                    object.companion_extends[j] = message.companion_extends[j];\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            return object;\n        };\n\n        /**\n         * Converts this EnumOptions to JSON.\n         * @function toJSON\n         * @memberof scalapb.EnumOptions\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EnumOptions.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return EnumOptions;\n    })();\n\n    scalapb.EnumValueOptions = (function() {\n\n        /**\n         * Properties of an EnumValueOptions.\n         * @memberof scalapb\n         * @interface IEnumValueOptions\n         * @property {Array.<string>|null} [\"extends\"] EnumValueOptions extends\n         * @property {string|null} [scala_name] EnumValueOptions scala_name\n         */\n\n        /**\n         * Constructs a new EnumValueOptions.\n         * @memberof scalapb\n         * @classdesc Represents an EnumValueOptions.\n         * @implements IEnumValueOptions\n         * @constructor\n         * @param {scalapb.IEnumValueOptions=} [properties] Properties to set\n         */\n        function EnumValueOptions(properties) {\n            this[\"extends\"] = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * EnumValueOptions extends.\n         * @member {Array.<string>} extends\n         * @memberof scalapb.EnumValueOptions\n         * @instance\n         */\n        EnumValueOptions.prototype[\"extends\"] = $util.emptyArray;\n\n        /**\n         * EnumValueOptions scala_name.\n         * @member {string} scala_name\n         * @memberof scalapb.EnumValueOptions\n         * @instance\n         */\n        EnumValueOptions.prototype.scala_name = \"\";\n\n        /**\n         * Creates a new EnumValueOptions instance using the specified properties.\n         * @function create\n         * @memberof scalapb.EnumValueOptions\n         * @static\n         * @param {scalapb.IEnumValueOptions=} [properties] Properties to set\n         * @returns {scalapb.EnumValueOptions} EnumValueOptions instance\n         */\n        EnumValueOptions.create = function create(properties) {\n            return new EnumValueOptions(properties);\n        };\n\n        /**\n         * Encodes the specified EnumValueOptions message. Does not implicitly {@link scalapb.EnumValueOptions.verify|verify} messages.\n         * @function encode\n         * @memberof scalapb.EnumValueOptions\n         * @static\n         * @param {scalapb.IEnumValueOptions} message EnumValueOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EnumValueOptions.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message[\"extends\"] != null && message[\"extends\"].length)\n                for (var i = 0; i < message[\"extends\"].length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message[\"extends\"][i]);\n            if (message.scala_name != null && message.hasOwnProperty(\"scala_name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.scala_name);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link scalapb.EnumValueOptions.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof scalapb.EnumValueOptions\n         * @static\n         * @param {scalapb.IEnumValueOptions} message EnumValueOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an EnumValueOptions message from the specified reader or buffer.\n         * @function decode\n         * @memberof scalapb.EnumValueOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {scalapb.EnumValueOptions} EnumValueOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EnumValueOptions.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.EnumValueOptions();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message[\"extends\"] && message[\"extends\"].length))\n                        message[\"extends\"] = [];\n                    message[\"extends\"].push(reader.string());\n                    break;\n                case 2:\n                    message.scala_name = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof scalapb.EnumValueOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {scalapb.EnumValueOptions} EnumValueOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an EnumValueOptions message.\n         * @function verify\n         * @memberof scalapb.EnumValueOptions\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        EnumValueOptions.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message[\"extends\"] != null && message.hasOwnProperty(\"extends\")) {\n                if (!Array.isArray(message[\"extends\"]))\n                    return \"extends: array expected\";\n                for (var i = 0; i < message[\"extends\"].length; ++i)\n                    if (!$util.isString(message[\"extends\"][i]))\n                        return \"extends: string[] expected\";\n            }\n            if (message.scala_name != null && message.hasOwnProperty(\"scala_name\"))\n                if (!$util.isString(message.scala_name))\n                    return \"scala_name: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof scalapb.EnumValueOptions\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {scalapb.EnumValueOptions} EnumValueOptions\n         */\n        EnumValueOptions.fromObject = function fromObject(object) {\n            if (object instanceof $root.scalapb.EnumValueOptions)\n                return object;\n            var message = new $root.scalapb.EnumValueOptions();\n            if (object[\"extends\"]) {\n                if (!Array.isArray(object[\"extends\"]))\n                    throw TypeError(\".scalapb.EnumValueOptions.extends: array expected\");\n                message[\"extends\"] = [];\n                for (var i = 0; i < object[\"extends\"].length; ++i)\n                    message[\"extends\"][i] = String(object[\"extends\"][i]);\n            }\n            if (object.scala_name != null)\n                message.scala_name = String(object.scala_name);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof scalapb.EnumValueOptions\n         * @static\n         * @param {scalapb.EnumValueOptions} message EnumValueOptions\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EnumValueOptions.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object[\"extends\"] = [];\n            if (options.defaults)\n                object.scala_name = \"\";\n            if (message[\"extends\"] && message[\"extends\"].length) {\n                object[\"extends\"] = [];\n                for (var j = 0; j < message[\"extends\"].length; ++j)\n                    object[\"extends\"][j] = message[\"extends\"][j];\n            }\n            if (message.scala_name != null && message.hasOwnProperty(\"scala_name\"))\n                object.scala_name = message.scala_name;\n            return object;\n        };\n\n        /**\n         * Converts this EnumValueOptions to JSON.\n         * @function toJSON\n         * @memberof scalapb.EnumValueOptions\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EnumValueOptions.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return EnumValueOptions;\n    })();\n\n    scalapb.OneofOptions = (function() {\n\n        /**\n         * Properties of an OneofOptions.\n         * @memberof scalapb\n         * @interface IOneofOptions\n         * @property {Array.<string>|null} [\"extends\"] OneofOptions extends\n         * @property {string|null} [scala_name] OneofOptions scala_name\n         */\n\n        /**\n         * Constructs a new OneofOptions.\n         * @memberof scalapb\n         * @classdesc Represents an OneofOptions.\n         * @implements IOneofOptions\n         * @constructor\n         * @param {scalapb.IOneofOptions=} [properties] Properties to set\n         */\n        function OneofOptions(properties) {\n            this[\"extends\"] = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OneofOptions extends.\n         * @member {Array.<string>} extends\n         * @memberof scalapb.OneofOptions\n         * @instance\n         */\n        OneofOptions.prototype[\"extends\"] = $util.emptyArray;\n\n        /**\n         * OneofOptions scala_name.\n         * @member {string} scala_name\n         * @memberof scalapb.OneofOptions\n         * @instance\n         */\n        OneofOptions.prototype.scala_name = \"\";\n\n        /**\n         * Creates a new OneofOptions instance using the specified properties.\n         * @function create\n         * @memberof scalapb.OneofOptions\n         * @static\n         * @param {scalapb.IOneofOptions=} [properties] Properties to set\n         * @returns {scalapb.OneofOptions} OneofOptions instance\n         */\n        OneofOptions.create = function create(properties) {\n            return new OneofOptions(properties);\n        };\n\n        /**\n         * Encodes the specified OneofOptions message. Does not implicitly {@link scalapb.OneofOptions.verify|verify} messages.\n         * @function encode\n         * @memberof scalapb.OneofOptions\n         * @static\n         * @param {scalapb.IOneofOptions} message OneofOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OneofOptions.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message[\"extends\"] != null && message[\"extends\"].length)\n                for (var i = 0; i < message[\"extends\"].length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message[\"extends\"][i]);\n            if (message.scala_name != null && message.hasOwnProperty(\"scala_name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.scala_name);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link scalapb.OneofOptions.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof scalapb.OneofOptions\n         * @static\n         * @param {scalapb.IOneofOptions} message OneofOptions message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OneofOptions message from the specified reader or buffer.\n         * @function decode\n         * @memberof scalapb.OneofOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {scalapb.OneofOptions} OneofOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OneofOptions.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.scalapb.OneofOptions();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message[\"extends\"] && message[\"extends\"].length))\n                        message[\"extends\"] = [];\n                    message[\"extends\"].push(reader.string());\n                    break;\n                case 2:\n                    message.scala_name = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OneofOptions message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof scalapb.OneofOptions\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {scalapb.OneofOptions} OneofOptions\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OneofOptions.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OneofOptions message.\n         * @function verify\n         * @memberof scalapb.OneofOptions\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OneofOptions.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message[\"extends\"] != null && message.hasOwnProperty(\"extends\")) {\n                if (!Array.isArray(message[\"extends\"]))\n                    return \"extends: array expected\";\n                for (var i = 0; i < message[\"extends\"].length; ++i)\n                    if (!$util.isString(message[\"extends\"][i]))\n                        return \"extends: string[] expected\";\n            }\n            if (message.scala_name != null && message.hasOwnProperty(\"scala_name\"))\n                if (!$util.isString(message.scala_name))\n                    return \"scala_name: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof scalapb.OneofOptions\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {scalapb.OneofOptions} OneofOptions\n         */\n        OneofOptions.fromObject = function fromObject(object) {\n            if (object instanceof $root.scalapb.OneofOptions)\n                return object;\n            var message = new $root.scalapb.OneofOptions();\n            if (object[\"extends\"]) {\n                if (!Array.isArray(object[\"extends\"]))\n                    throw TypeError(\".scalapb.OneofOptions.extends: array expected\");\n                message[\"extends\"] = [];\n                for (var i = 0; i < object[\"extends\"].length; ++i)\n                    message[\"extends\"][i] = String(object[\"extends\"][i]);\n            }\n            if (object.scala_name != null)\n                message.scala_name = String(object.scala_name);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof scalapb.OneofOptions\n         * @static\n         * @param {scalapb.OneofOptions} message OneofOptions\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OneofOptions.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object[\"extends\"] = [];\n            if (options.defaults)\n                object.scala_name = \"\";\n            if (message[\"extends\"] && message[\"extends\"].length) {\n                object[\"extends\"] = [];\n                for (var j = 0; j < message[\"extends\"].length; ++j)\n                    object[\"extends\"][j] = message[\"extends\"][j];\n            }\n            if (message.scala_name != null && message.hasOwnProperty(\"scala_name\"))\n                object.scala_name = message.scala_name;\n            return object;\n        };\n\n        /**\n         * Converts this OneofOptions to JSON.\n         * @function toJSON\n         * @memberof scalapb.OneofOptions\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OneofOptions.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OneofOptions;\n    })();\n\n    return scalapb;\n})();\n\n$root.google = (function() {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    var google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        var protobuf = {};\n\n        protobuf.FileDescriptorSet = (function() {\n\n            /**\n             * Properties of a FileDescriptorSet.\n             * @memberof google.protobuf\n             * @interface IFileDescriptorSet\n             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file\n             */\n\n            /**\n             * Constructs a new FileDescriptorSet.\n             * @memberof google.protobuf\n             * @classdesc Represents a FileDescriptorSet.\n             * @implements IFileDescriptorSet\n             * @constructor\n             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set\n             */\n            function FileDescriptorSet(properties) {\n                this.file = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FileDescriptorSet file.\n             * @member {Array.<google.protobuf.IFileDescriptorProto>} file\n             * @memberof google.protobuf.FileDescriptorSet\n             * @instance\n             */\n            FileDescriptorSet.prototype.file = $util.emptyArray;\n\n            /**\n             * Creates a new FileDescriptorSet instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.FileDescriptorSet\n             * @static\n             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set\n             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance\n             */\n            FileDescriptorSet.create = function create(properties) {\n                return new FileDescriptorSet(properties);\n            };\n\n            /**\n             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.FileDescriptorSet\n             * @static\n             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FileDescriptorSet.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.file != null && message.file.length)\n                    for (var i = 0; i < message.file.length; ++i)\n                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.FileDescriptorSet\n             * @static\n             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FileDescriptorSet message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.FileDescriptorSet\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FileDescriptorSet.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.file && message.file.length))\n                            message.file = [];\n                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.FileDescriptorSet\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FileDescriptorSet message.\n             * @function verify\n             * @memberof google.protobuf.FileDescriptorSet\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FileDescriptorSet.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.file != null && message.hasOwnProperty(\"file\")) {\n                    if (!Array.isArray(message.file))\n                        return \"file: array expected\";\n                    for (var i = 0; i < message.file.length; ++i) {\n                        var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);\n                        if (error)\n                            return \"file.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.FileDescriptorSet\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet\n             */\n            FileDescriptorSet.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.FileDescriptorSet)\n                    return object;\n                var message = new $root.google.protobuf.FileDescriptorSet();\n                if (object.file) {\n                    if (!Array.isArray(object.file))\n                        throw TypeError(\".google.protobuf.FileDescriptorSet.file: array expected\");\n                    message.file = [];\n                    for (var i = 0; i < object.file.length; ++i) {\n                        if (typeof object.file[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.FileDescriptorSet.file: object expected\");\n                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.FileDescriptorSet\n             * @static\n             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FileDescriptorSet.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.file = [];\n                if (message.file && message.file.length) {\n                    object.file = [];\n                    for (var j = 0; j < message.file.length; ++j)\n                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this FileDescriptorSet to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.FileDescriptorSet\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FileDescriptorSet.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FileDescriptorSet;\n        })();\n\n        protobuf.FileDescriptorProto = (function() {\n\n            /**\n             * Properties of a FileDescriptorProto.\n             * @memberof google.protobuf\n             * @interface IFileDescriptorProto\n             * @property {string|null} [name] FileDescriptorProto name\n             * @property {string|null} [\"package\"] FileDescriptorProto package\n             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency\n             * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency\n             * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency\n             * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type\n             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type\n             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service\n             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension\n             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options\n             * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info\n             * @property {string|null} [syntax] FileDescriptorProto syntax\n             */\n\n            /**\n             * Constructs a new FileDescriptorProto.\n             * @memberof google.protobuf\n             * @classdesc Represents a FileDescriptorProto.\n             * @implements IFileDescriptorProto\n             * @constructor\n             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set\n             */\n            function FileDescriptorProto(properties) {\n                this.dependency = [];\n                this.public_dependency = [];\n                this.weak_dependency = [];\n                this.message_type = [];\n                this.enum_type = [];\n                this.service = [];\n                this.extension = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FileDescriptorProto name.\n             * @member {string} name\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.name = \"\";\n\n            /**\n             * FileDescriptorProto package.\n             * @member {string} package\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype[\"package\"] = \"\";\n\n            /**\n             * FileDescriptorProto dependency.\n             * @member {Array.<string>} dependency\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.dependency = $util.emptyArray;\n\n            /**\n             * FileDescriptorProto public_dependency.\n             * @member {Array.<number>} public_dependency\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.public_dependency = $util.emptyArray;\n\n            /**\n             * FileDescriptorProto weak_dependency.\n             * @member {Array.<number>} weak_dependency\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;\n\n            /**\n             * FileDescriptorProto message_type.\n             * @member {Array.<google.protobuf.IDescriptorProto>} message_type\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.message_type = $util.emptyArray;\n\n            /**\n             * FileDescriptorProto enum_type.\n             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.enum_type = $util.emptyArray;\n\n            /**\n             * FileDescriptorProto service.\n             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.service = $util.emptyArray;\n\n            /**\n             * FileDescriptorProto extension.\n             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.extension = $util.emptyArray;\n\n            /**\n             * FileDescriptorProto options.\n             * @member {google.protobuf.IFileOptions|null|undefined} options\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.options = null;\n\n            /**\n             * FileDescriptorProto source_code_info.\n             * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.source_code_info = null;\n\n            /**\n             * FileDescriptorProto syntax.\n             * @member {string} syntax\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             */\n            FileDescriptorProto.prototype.syntax = \"\";\n\n            /**\n             * Creates a new FileDescriptorProto instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.FileDescriptorProto\n             * @static\n             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set\n             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance\n             */\n            FileDescriptorProto.create = function create(properties) {\n                return new FileDescriptorProto(properties);\n            };\n\n            /**\n             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.FileDescriptorProto\n             * @static\n             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FileDescriptorProto.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                if (message[\"package\"] != null && message.hasOwnProperty(\"package\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message[\"package\"]);\n                if (message.dependency != null && message.dependency.length)\n                    for (var i = 0; i < message.dependency.length; ++i)\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);\n                if (message.message_type != null && message.message_type.length)\n                    for (var i = 0; i < message.message_type.length; ++i)\n                        $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                if (message.enum_type != null && message.enum_type.length)\n                    for (var i = 0; i < message.enum_type.length; ++i)\n                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.service != null && message.service.length)\n                    for (var i = 0; i < message.service.length; ++i)\n                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                if (message.extension != null && message.extension.length)\n                    for (var i = 0; i < message.extension.length; ++i)\n                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                if (message.source_code_info != null && message.hasOwnProperty(\"source_code_info\"))\n                    $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                if (message.public_dependency != null && message.public_dependency.length)\n                    for (var i = 0; i < message.public_dependency.length; ++i)\n                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);\n                if (message.weak_dependency != null && message.weak_dependency.length)\n                    for (var i = 0; i < message.weak_dependency.length; ++i)\n                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);\n                if (message.syntax != null && message.hasOwnProperty(\"syntax\"))\n                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.FileDescriptorProto\n             * @static\n             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FileDescriptorProto message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.FileDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FileDescriptorProto.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        message[\"package\"] = reader.string();\n                        break;\n                    case 3:\n                        if (!(message.dependency && message.dependency.length))\n                            message.dependency = [];\n                        message.dependency.push(reader.string());\n                        break;\n                    case 10:\n                        if (!(message.public_dependency && message.public_dependency.length))\n                            message.public_dependency = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.public_dependency.push(reader.int32());\n                        } else\n                            message.public_dependency.push(reader.int32());\n                        break;\n                    case 11:\n                        if (!(message.weak_dependency && message.weak_dependency.length))\n                            message.weak_dependency = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.weak_dependency.push(reader.int32());\n                        } else\n                            message.weak_dependency.push(reader.int32());\n                        break;\n                    case 4:\n                        if (!(message.message_type && message.message_type.length))\n                            message.message_type = [];\n                        message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 5:\n                        if (!(message.enum_type && message.enum_type.length))\n                            message.enum_type = [];\n                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 6:\n                        if (!(message.service && message.service.length))\n                            message.service = [];\n                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 7:\n                        if (!(message.extension && message.extension.length))\n                            message.extension = [];\n                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 8:\n                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());\n                        break;\n                    case 9:\n                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());\n                        break;\n                    case 12:\n                        message.syntax = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.FileDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FileDescriptorProto message.\n             * @function verify\n             * @memberof google.protobuf.FileDescriptorProto\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FileDescriptorProto.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message[\"package\"] != null && message.hasOwnProperty(\"package\"))\n                    if (!$util.isString(message[\"package\"]))\n                        return \"package: string expected\";\n                if (message.dependency != null && message.hasOwnProperty(\"dependency\")) {\n                    if (!Array.isArray(message.dependency))\n                        return \"dependency: array expected\";\n                    for (var i = 0; i < message.dependency.length; ++i)\n                        if (!$util.isString(message.dependency[i]))\n                            return \"dependency: string[] expected\";\n                }\n                if (message.public_dependency != null && message.hasOwnProperty(\"public_dependency\")) {\n                    if (!Array.isArray(message.public_dependency))\n                        return \"public_dependency: array expected\";\n                    for (var i = 0; i < message.public_dependency.length; ++i)\n                        if (!$util.isInteger(message.public_dependency[i]))\n                            return \"public_dependency: integer[] expected\";\n                }\n                if (message.weak_dependency != null && message.hasOwnProperty(\"weak_dependency\")) {\n                    if (!Array.isArray(message.weak_dependency))\n                        return \"weak_dependency: array expected\";\n                    for (var i = 0; i < message.weak_dependency.length; ++i)\n                        if (!$util.isInteger(message.weak_dependency[i]))\n                            return \"weak_dependency: integer[] expected\";\n                }\n                if (message.message_type != null && message.hasOwnProperty(\"message_type\")) {\n                    if (!Array.isArray(message.message_type))\n                        return \"message_type: array expected\";\n                    for (var i = 0; i < message.message_type.length; ++i) {\n                        var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);\n                        if (error)\n                            return \"message_type.\" + error;\n                    }\n                }\n                if (message.enum_type != null && message.hasOwnProperty(\"enum_type\")) {\n                    if (!Array.isArray(message.enum_type))\n                        return \"enum_type: array expected\";\n                    for (var i = 0; i < message.enum_type.length; ++i) {\n                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);\n                        if (error)\n                            return \"enum_type.\" + error;\n                    }\n                }\n                if (message.service != null && message.hasOwnProperty(\"service\")) {\n                    if (!Array.isArray(message.service))\n                        return \"service: array expected\";\n                    for (var i = 0; i < message.service.length; ++i) {\n                        var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);\n                        if (error)\n                            return \"service.\" + error;\n                    }\n                }\n                if (message.extension != null && message.hasOwnProperty(\"extension\")) {\n                    if (!Array.isArray(message.extension))\n                        return \"extension: array expected\";\n                    for (var i = 0; i < message.extension.length; ++i) {\n                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);\n                        if (error)\n                            return \"extension.\" + error;\n                    }\n                }\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.google.protobuf.FileOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                if (message.source_code_info != null && message.hasOwnProperty(\"source_code_info\")) {\n                    var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);\n                    if (error)\n                        return \"source_code_info.\" + error;\n                }\n                if (message.syntax != null && message.hasOwnProperty(\"syntax\"))\n                    if (!$util.isString(message.syntax))\n                        return \"syntax: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.FileDescriptorProto\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto\n             */\n            FileDescriptorProto.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.FileDescriptorProto)\n                    return object;\n                var message = new $root.google.protobuf.FileDescriptorProto();\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object[\"package\"] != null)\n                    message[\"package\"] = String(object[\"package\"]);\n                if (object.dependency) {\n                    if (!Array.isArray(object.dependency))\n                        throw TypeError(\".google.protobuf.FileDescriptorProto.dependency: array expected\");\n                    message.dependency = [];\n                    for (var i = 0; i < object.dependency.length; ++i)\n                        message.dependency[i] = String(object.dependency[i]);\n                }\n                if (object.public_dependency) {\n                    if (!Array.isArray(object.public_dependency))\n                        throw TypeError(\".google.protobuf.FileDescriptorProto.public_dependency: array expected\");\n                    message.public_dependency = [];\n                    for (var i = 0; i < object.public_dependency.length; ++i)\n                        message.public_dependency[i] = object.public_dependency[i] | 0;\n                }\n                if (object.weak_dependency) {\n                    if (!Array.isArray(object.weak_dependency))\n                        throw TypeError(\".google.protobuf.FileDescriptorProto.weak_dependency: array expected\");\n                    message.weak_dependency = [];\n                    for (var i = 0; i < object.weak_dependency.length; ++i)\n                        message.weak_dependency[i] = object.weak_dependency[i] | 0;\n                }\n                if (object.message_type) {\n                    if (!Array.isArray(object.message_type))\n                        throw TypeError(\".google.protobuf.FileDescriptorProto.message_type: array expected\");\n                    message.message_type = [];\n                    for (var i = 0; i < object.message_type.length; ++i) {\n                        if (typeof object.message_type[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.FileDescriptorProto.message_type: object expected\");\n                        message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);\n                    }\n                }\n                if (object.enum_type) {\n                    if (!Array.isArray(object.enum_type))\n                        throw TypeError(\".google.protobuf.FileDescriptorProto.enum_type: array expected\");\n                    message.enum_type = [];\n                    for (var i = 0; i < object.enum_type.length; ++i) {\n                        if (typeof object.enum_type[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.FileDescriptorProto.enum_type: object expected\");\n                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);\n                    }\n                }\n                if (object.service) {\n                    if (!Array.isArray(object.service))\n                        throw TypeError(\".google.protobuf.FileDescriptorProto.service: array expected\");\n                    message.service = [];\n                    for (var i = 0; i < object.service.length; ++i) {\n                        if (typeof object.service[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.FileDescriptorProto.service: object expected\");\n                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);\n                    }\n                }\n                if (object.extension) {\n                    if (!Array.isArray(object.extension))\n                        throw TypeError(\".google.protobuf.FileDescriptorProto.extension: array expected\");\n                    message.extension = [];\n                    for (var i = 0; i < object.extension.length; ++i) {\n                        if (typeof object.extension[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.FileDescriptorProto.extension: object expected\");\n                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);\n                    }\n                }\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".google.protobuf.FileDescriptorProto.options: object expected\");\n                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);\n                }\n                if (object.source_code_info != null) {\n                    if (typeof object.source_code_info !== \"object\")\n                        throw TypeError(\".google.protobuf.FileDescriptorProto.source_code_info: object expected\");\n                    message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);\n                }\n                if (object.syntax != null)\n                    message.syntax = String(object.syntax);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.FileDescriptorProto\n             * @static\n             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FileDescriptorProto.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.dependency = [];\n                    object.message_type = [];\n                    object.enum_type = [];\n                    object.service = [];\n                    object.extension = [];\n                    object.public_dependency = [];\n                    object.weak_dependency = [];\n                }\n                if (options.defaults) {\n                    object.name = \"\";\n                    object[\"package\"] = \"\";\n                    object.options = null;\n                    object.source_code_info = null;\n                    object.syntax = \"\";\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message[\"package\"] != null && message.hasOwnProperty(\"package\"))\n                    object[\"package\"] = message[\"package\"];\n                if (message.dependency && message.dependency.length) {\n                    object.dependency = [];\n                    for (var j = 0; j < message.dependency.length; ++j)\n                        object.dependency[j] = message.dependency[j];\n                }\n                if (message.message_type && message.message_type.length) {\n                    object.message_type = [];\n                    for (var j = 0; j < message.message_type.length; ++j)\n                        object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);\n                }\n                if (message.enum_type && message.enum_type.length) {\n                    object.enum_type = [];\n                    for (var j = 0; j < message.enum_type.length; ++j)\n                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);\n                }\n                if (message.service && message.service.length) {\n                    object.service = [];\n                    for (var j = 0; j < message.service.length; ++j)\n                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);\n                }\n                if (message.extension && message.extension.length) {\n                    object.extension = [];\n                    for (var j = 0; j < message.extension.length; ++j)\n                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);\n                }\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);\n                if (message.source_code_info != null && message.hasOwnProperty(\"source_code_info\"))\n                    object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);\n                if (message.public_dependency && message.public_dependency.length) {\n                    object.public_dependency = [];\n                    for (var j = 0; j < message.public_dependency.length; ++j)\n                        object.public_dependency[j] = message.public_dependency[j];\n                }\n                if (message.weak_dependency && message.weak_dependency.length) {\n                    object.weak_dependency = [];\n                    for (var j = 0; j < message.weak_dependency.length; ++j)\n                        object.weak_dependency[j] = message.weak_dependency[j];\n                }\n                if (message.syntax != null && message.hasOwnProperty(\"syntax\"))\n                    object.syntax = message.syntax;\n                return object;\n            };\n\n            /**\n             * Converts this FileDescriptorProto to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.FileDescriptorProto\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FileDescriptorProto.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FileDescriptorProto;\n        })();\n\n        protobuf.DescriptorProto = (function() {\n\n            /**\n             * Properties of a DescriptorProto.\n             * @memberof google.protobuf\n             * @interface IDescriptorProto\n             * @property {string|null} [name] DescriptorProto name\n             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field\n             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension\n             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type\n             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type\n             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range\n             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl\n             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options\n             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range\n             * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name\n             */\n\n            /**\n             * Constructs a new DescriptorProto.\n             * @memberof google.protobuf\n             * @classdesc Represents a DescriptorProto.\n             * @implements IDescriptorProto\n             * @constructor\n             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set\n             */\n            function DescriptorProto(properties) {\n                this.field = [];\n                this.extension = [];\n                this.nested_type = [];\n                this.enum_type = [];\n                this.extension_range = [];\n                this.oneof_decl = [];\n                this.reserved_range = [];\n                this.reserved_name = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DescriptorProto name.\n             * @member {string} name\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.name = \"\";\n\n            /**\n             * DescriptorProto field.\n             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.field = $util.emptyArray;\n\n            /**\n             * DescriptorProto extension.\n             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.extension = $util.emptyArray;\n\n            /**\n             * DescriptorProto nested_type.\n             * @member {Array.<google.protobuf.IDescriptorProto>} nested_type\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.nested_type = $util.emptyArray;\n\n            /**\n             * DescriptorProto enum_type.\n             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.enum_type = $util.emptyArray;\n\n            /**\n             * DescriptorProto extension_range.\n             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.extension_range = $util.emptyArray;\n\n            /**\n             * DescriptorProto oneof_decl.\n             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.oneof_decl = $util.emptyArray;\n\n            /**\n             * DescriptorProto options.\n             * @member {google.protobuf.IMessageOptions|null|undefined} options\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.options = null;\n\n            /**\n             * DescriptorProto reserved_range.\n             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.reserved_range = $util.emptyArray;\n\n            /**\n             * DescriptorProto reserved_name.\n             * @member {Array.<string>} reserved_name\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             */\n            DescriptorProto.prototype.reserved_name = $util.emptyArray;\n\n            /**\n             * Creates a new DescriptorProto instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.DescriptorProto\n             * @static\n             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set\n             * @returns {google.protobuf.DescriptorProto} DescriptorProto instance\n             */\n            DescriptorProto.create = function create(properties) {\n                return new DescriptorProto(properties);\n            };\n\n            /**\n             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.DescriptorProto\n             * @static\n             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DescriptorProto.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                if (message.field != null && message.field.length)\n                    for (var i = 0; i < message.field.length; ++i)\n                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.nested_type != null && message.nested_type.length)\n                    for (var i = 0; i < message.nested_type.length; ++i)\n                        $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.enum_type != null && message.enum_type.length)\n                    for (var i = 0; i < message.enum_type.length; ++i)\n                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                if (message.extension_range != null && message.extension_range.length)\n                    for (var i = 0; i < message.extension_range.length; ++i)\n                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.extension != null && message.extension.length)\n                    for (var i = 0; i < message.extension.length; ++i)\n                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                if (message.oneof_decl != null && message.oneof_decl.length)\n                    for (var i = 0; i < message.oneof_decl.length; ++i)\n                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                if (message.reserved_range != null && message.reserved_range.length)\n                    for (var i = 0; i < message.reserved_range.length; ++i)\n                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                if (message.reserved_name != null && message.reserved_name.length)\n                    for (var i = 0; i < message.reserved_name.length; ++i)\n                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.DescriptorProto\n             * @static\n             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DescriptorProto message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.DescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.DescriptorProto} DescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DescriptorProto.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        if (!(message.field && message.field.length))\n                            message.field = [];\n                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 6:\n                        if (!(message.extension && message.extension.length))\n                            message.extension = [];\n                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 3:\n                        if (!(message.nested_type && message.nested_type.length))\n                            message.nested_type = [];\n                        message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 4:\n                        if (!(message.enum_type && message.enum_type.length))\n                            message.enum_type = [];\n                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 5:\n                        if (!(message.extension_range && message.extension_range.length))\n                            message.extension_range = [];\n                        message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));\n                        break;\n                    case 8:\n                        if (!(message.oneof_decl && message.oneof_decl.length))\n                            message.oneof_decl = [];\n                        message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 7:\n                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());\n                        break;\n                    case 9:\n                        if (!(message.reserved_range && message.reserved_range.length))\n                            message.reserved_range = [];\n                        message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));\n                        break;\n                    case 10:\n                        if (!(message.reserved_name && message.reserved_name.length))\n                            message.reserved_name = [];\n                        message.reserved_name.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.DescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.DescriptorProto} DescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DescriptorProto message.\n             * @function verify\n             * @memberof google.protobuf.DescriptorProto\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DescriptorProto.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.field != null && message.hasOwnProperty(\"field\")) {\n                    if (!Array.isArray(message.field))\n                        return \"field: array expected\";\n                    for (var i = 0; i < message.field.length; ++i) {\n                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);\n                        if (error)\n                            return \"field.\" + error;\n                    }\n                }\n                if (message.extension != null && message.hasOwnProperty(\"extension\")) {\n                    if (!Array.isArray(message.extension))\n                        return \"extension: array expected\";\n                    for (var i = 0; i < message.extension.length; ++i) {\n                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);\n                        if (error)\n                            return \"extension.\" + error;\n                    }\n                }\n                if (message.nested_type != null && message.hasOwnProperty(\"nested_type\")) {\n                    if (!Array.isArray(message.nested_type))\n                        return \"nested_type: array expected\";\n                    for (var i = 0; i < message.nested_type.length; ++i) {\n                        var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);\n                        if (error)\n                            return \"nested_type.\" + error;\n                    }\n                }\n                if (message.enum_type != null && message.hasOwnProperty(\"enum_type\")) {\n                    if (!Array.isArray(message.enum_type))\n                        return \"enum_type: array expected\";\n                    for (var i = 0; i < message.enum_type.length; ++i) {\n                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);\n                        if (error)\n                            return \"enum_type.\" + error;\n                    }\n                }\n                if (message.extension_range != null && message.hasOwnProperty(\"extension_range\")) {\n                    if (!Array.isArray(message.extension_range))\n                        return \"extension_range: array expected\";\n                    for (var i = 0; i < message.extension_range.length; ++i) {\n                        var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);\n                        if (error)\n                            return \"extension_range.\" + error;\n                    }\n                }\n                if (message.oneof_decl != null && message.hasOwnProperty(\"oneof_decl\")) {\n                    if (!Array.isArray(message.oneof_decl))\n                        return \"oneof_decl: array expected\";\n                    for (var i = 0; i < message.oneof_decl.length; ++i) {\n                        var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);\n                        if (error)\n                            return \"oneof_decl.\" + error;\n                    }\n                }\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.google.protobuf.MessageOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                if (message.reserved_range != null && message.hasOwnProperty(\"reserved_range\")) {\n                    if (!Array.isArray(message.reserved_range))\n                        return \"reserved_range: array expected\";\n                    for (var i = 0; i < message.reserved_range.length; ++i) {\n                        var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);\n                        if (error)\n                            return \"reserved_range.\" + error;\n                    }\n                }\n                if (message.reserved_name != null && message.hasOwnProperty(\"reserved_name\")) {\n                    if (!Array.isArray(message.reserved_name))\n                        return \"reserved_name: array expected\";\n                    for (var i = 0; i < message.reserved_name.length; ++i)\n                        if (!$util.isString(message.reserved_name[i]))\n                            return \"reserved_name: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.DescriptorProto\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.DescriptorProto} DescriptorProto\n             */\n            DescriptorProto.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.DescriptorProto)\n                    return object;\n                var message = new $root.google.protobuf.DescriptorProto();\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.field) {\n                    if (!Array.isArray(object.field))\n                        throw TypeError(\".google.protobuf.DescriptorProto.field: array expected\");\n                    message.field = [];\n                    for (var i = 0; i < object.field.length; ++i) {\n                        if (typeof object.field[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.DescriptorProto.field: object expected\");\n                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);\n                    }\n                }\n                if (object.extension) {\n                    if (!Array.isArray(object.extension))\n                        throw TypeError(\".google.protobuf.DescriptorProto.extension: array expected\");\n                    message.extension = [];\n                    for (var i = 0; i < object.extension.length; ++i) {\n                        if (typeof object.extension[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.DescriptorProto.extension: object expected\");\n                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);\n                    }\n                }\n                if (object.nested_type) {\n                    if (!Array.isArray(object.nested_type))\n                        throw TypeError(\".google.protobuf.DescriptorProto.nested_type: array expected\");\n                    message.nested_type = [];\n                    for (var i = 0; i < object.nested_type.length; ++i) {\n                        if (typeof object.nested_type[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.DescriptorProto.nested_type: object expected\");\n                        message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);\n                    }\n                }\n                if (object.enum_type) {\n                    if (!Array.isArray(object.enum_type))\n                        throw TypeError(\".google.protobuf.DescriptorProto.enum_type: array expected\");\n                    message.enum_type = [];\n                    for (var i = 0; i < object.enum_type.length; ++i) {\n                        if (typeof object.enum_type[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.DescriptorProto.enum_type: object expected\");\n                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);\n                    }\n                }\n                if (object.extension_range) {\n                    if (!Array.isArray(object.extension_range))\n                        throw TypeError(\".google.protobuf.DescriptorProto.extension_range: array expected\");\n                    message.extension_range = [];\n                    for (var i = 0; i < object.extension_range.length; ++i) {\n                        if (typeof object.extension_range[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.DescriptorProto.extension_range: object expected\");\n                        message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);\n                    }\n                }\n                if (object.oneof_decl) {\n                    if (!Array.isArray(object.oneof_decl))\n                        throw TypeError(\".google.protobuf.DescriptorProto.oneof_decl: array expected\");\n                    message.oneof_decl = [];\n                    for (var i = 0; i < object.oneof_decl.length; ++i) {\n                        if (typeof object.oneof_decl[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.DescriptorProto.oneof_decl: object expected\");\n                        message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);\n                    }\n                }\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".google.protobuf.DescriptorProto.options: object expected\");\n                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);\n                }\n                if (object.reserved_range) {\n                    if (!Array.isArray(object.reserved_range))\n                        throw TypeError(\".google.protobuf.DescriptorProto.reserved_range: array expected\");\n                    message.reserved_range = [];\n                    for (var i = 0; i < object.reserved_range.length; ++i) {\n                        if (typeof object.reserved_range[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.DescriptorProto.reserved_range: object expected\");\n                        message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);\n                    }\n                }\n                if (object.reserved_name) {\n                    if (!Array.isArray(object.reserved_name))\n                        throw TypeError(\".google.protobuf.DescriptorProto.reserved_name: array expected\");\n                    message.reserved_name = [];\n                    for (var i = 0; i < object.reserved_name.length; ++i)\n                        message.reserved_name[i] = String(object.reserved_name[i]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.DescriptorProto\n             * @static\n             * @param {google.protobuf.DescriptorProto} message DescriptorProto\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DescriptorProto.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.field = [];\n                    object.nested_type = [];\n                    object.enum_type = [];\n                    object.extension_range = [];\n                    object.extension = [];\n                    object.oneof_decl = [];\n                    object.reserved_range = [];\n                    object.reserved_name = [];\n                }\n                if (options.defaults) {\n                    object.name = \"\";\n                    object.options = null;\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.field && message.field.length) {\n                    object.field = [];\n                    for (var j = 0; j < message.field.length; ++j)\n                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);\n                }\n                if (message.nested_type && message.nested_type.length) {\n                    object.nested_type = [];\n                    for (var j = 0; j < message.nested_type.length; ++j)\n                        object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);\n                }\n                if (message.enum_type && message.enum_type.length) {\n                    object.enum_type = [];\n                    for (var j = 0; j < message.enum_type.length; ++j)\n                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);\n                }\n                if (message.extension_range && message.extension_range.length) {\n                    object.extension_range = [];\n                    for (var j = 0; j < message.extension_range.length; ++j)\n                        object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);\n                }\n                if (message.extension && message.extension.length) {\n                    object.extension = [];\n                    for (var j = 0; j < message.extension.length; ++j)\n                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);\n                }\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);\n                if (message.oneof_decl && message.oneof_decl.length) {\n                    object.oneof_decl = [];\n                    for (var j = 0; j < message.oneof_decl.length; ++j)\n                        object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);\n                }\n                if (message.reserved_range && message.reserved_range.length) {\n                    object.reserved_range = [];\n                    for (var j = 0; j < message.reserved_range.length; ++j)\n                        object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);\n                }\n                if (message.reserved_name && message.reserved_name.length) {\n                    object.reserved_name = [];\n                    for (var j = 0; j < message.reserved_name.length; ++j)\n                        object.reserved_name[j] = message.reserved_name[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this DescriptorProto to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.DescriptorProto\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DescriptorProto.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            DescriptorProto.ExtensionRange = (function() {\n\n                /**\n                 * Properties of an ExtensionRange.\n                 * @memberof google.protobuf.DescriptorProto\n                 * @interface IExtensionRange\n                 * @property {number|null} [start] ExtensionRange start\n                 * @property {number|null} [end] ExtensionRange end\n                 */\n\n                /**\n                 * Constructs a new ExtensionRange.\n                 * @memberof google.protobuf.DescriptorProto\n                 * @classdesc Represents an ExtensionRange.\n                 * @implements IExtensionRange\n                 * @constructor\n                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set\n                 */\n                function ExtensionRange(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ExtensionRange start.\n                 * @member {number} start\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @instance\n                 */\n                ExtensionRange.prototype.start = 0;\n\n                /**\n                 * ExtensionRange end.\n                 * @member {number} end\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @instance\n                 */\n                ExtensionRange.prototype.end = 0;\n\n                /**\n                 * Creates a new ExtensionRange instance using the specified properties.\n                 * @function create\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @static\n                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set\n                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance\n                 */\n                ExtensionRange.create = function create(properties) {\n                    return new ExtensionRange(properties);\n                };\n\n                /**\n                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.\n                 * @function encode\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @static\n                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ExtensionRange.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.start != null && message.hasOwnProperty(\"start\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);\n                    if (message.end != null && message.hasOwnProperty(\"end\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @static\n                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an ExtensionRange message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ExtensionRange.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.start = reader.int32();\n                            break;\n                        case 2:\n                            message.end = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an ExtensionRange message.\n                 * @function verify\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ExtensionRange.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.start != null && message.hasOwnProperty(\"start\"))\n                        if (!$util.isInteger(message.start))\n                            return \"start: integer expected\";\n                    if (message.end != null && message.hasOwnProperty(\"end\"))\n                        if (!$util.isInteger(message.end))\n                            return \"end: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange\n                 */\n                ExtensionRange.fromObject = function fromObject(object) {\n                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)\n                        return object;\n                    var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();\n                    if (object.start != null)\n                        message.start = object.start | 0;\n                    if (object.end != null)\n                        message.end = object.end | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @static\n                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ExtensionRange.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.start = 0;\n                        object.end = 0;\n                    }\n                    if (message.start != null && message.hasOwnProperty(\"start\"))\n                        object.start = message.start;\n                    if (message.end != null && message.hasOwnProperty(\"end\"))\n                        object.end = message.end;\n                    return object;\n                };\n\n                /**\n                 * Converts this ExtensionRange to JSON.\n                 * @function toJSON\n                 * @memberof google.protobuf.DescriptorProto.ExtensionRange\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ExtensionRange.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ExtensionRange;\n            })();\n\n            DescriptorProto.ReservedRange = (function() {\n\n                /**\n                 * Properties of a ReservedRange.\n                 * @memberof google.protobuf.DescriptorProto\n                 * @interface IReservedRange\n                 * @property {number|null} [start] ReservedRange start\n                 * @property {number|null} [end] ReservedRange end\n                 */\n\n                /**\n                 * Constructs a new ReservedRange.\n                 * @memberof google.protobuf.DescriptorProto\n                 * @classdesc Represents a ReservedRange.\n                 * @implements IReservedRange\n                 * @constructor\n                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set\n                 */\n                function ReservedRange(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * ReservedRange start.\n                 * @member {number} start\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @instance\n                 */\n                ReservedRange.prototype.start = 0;\n\n                /**\n                 * ReservedRange end.\n                 * @member {number} end\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @instance\n                 */\n                ReservedRange.prototype.end = 0;\n\n                /**\n                 * Creates a new ReservedRange instance using the specified properties.\n                 * @function create\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @static\n                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set\n                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance\n                 */\n                ReservedRange.create = function create(properties) {\n                    return new ReservedRange(properties);\n                };\n\n                /**\n                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.\n                 * @function encode\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @static\n                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ReservedRange.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.start != null && message.hasOwnProperty(\"start\"))\n                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);\n                    if (message.end != null && message.hasOwnProperty(\"end\"))\n                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @static\n                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a ReservedRange message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ReservedRange.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.start = reader.int32();\n                            break;\n                        case 2:\n                            message.end = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                ReservedRange.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a ReservedRange message.\n                 * @function verify\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                ReservedRange.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.start != null && message.hasOwnProperty(\"start\"))\n                        if (!$util.isInteger(message.start))\n                            return \"start: integer expected\";\n                    if (message.end != null && message.hasOwnProperty(\"end\"))\n                        if (!$util.isInteger(message.end))\n                            return \"end: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange\n                 */\n                ReservedRange.fromObject = function fromObject(object) {\n                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)\n                        return object;\n                    var message = new $root.google.protobuf.DescriptorProto.ReservedRange();\n                    if (object.start != null)\n                        message.start = object.start | 0;\n                    if (object.end != null)\n                        message.end = object.end | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @static\n                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                ReservedRange.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.start = 0;\n                        object.end = 0;\n                    }\n                    if (message.start != null && message.hasOwnProperty(\"start\"))\n                        object.start = message.start;\n                    if (message.end != null && message.hasOwnProperty(\"end\"))\n                        object.end = message.end;\n                    return object;\n                };\n\n                /**\n                 * Converts this ReservedRange to JSON.\n                 * @function toJSON\n                 * @memberof google.protobuf.DescriptorProto.ReservedRange\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                ReservedRange.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return ReservedRange;\n            })();\n\n            return DescriptorProto;\n        })();\n\n        protobuf.FieldDescriptorProto = (function() {\n\n            /**\n             * Properties of a FieldDescriptorProto.\n             * @memberof google.protobuf\n             * @interface IFieldDescriptorProto\n             * @property {string|null} [name] FieldDescriptorProto name\n             * @property {number|null} [number] FieldDescriptorProto number\n             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label\n             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type\n             * @property {string|null} [type_name] FieldDescriptorProto type_name\n             * @property {string|null} [extendee] FieldDescriptorProto extendee\n             * @property {string|null} [default_value] FieldDescriptorProto default_value\n             * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index\n             * @property {string|null} [json_name] FieldDescriptorProto json_name\n             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options\n             */\n\n            /**\n             * Constructs a new FieldDescriptorProto.\n             * @memberof google.protobuf\n             * @classdesc Represents a FieldDescriptorProto.\n             * @implements IFieldDescriptorProto\n             * @constructor\n             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set\n             */\n            function FieldDescriptorProto(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FieldDescriptorProto name.\n             * @member {string} name\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.name = \"\";\n\n            /**\n             * FieldDescriptorProto number.\n             * @member {number} number\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.number = 0;\n\n            /**\n             * FieldDescriptorProto label.\n             * @member {google.protobuf.FieldDescriptorProto.Label} label\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.label = 1;\n\n            /**\n             * FieldDescriptorProto type.\n             * @member {google.protobuf.FieldDescriptorProto.Type} type\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.type = 1;\n\n            /**\n             * FieldDescriptorProto type_name.\n             * @member {string} type_name\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.type_name = \"\";\n\n            /**\n             * FieldDescriptorProto extendee.\n             * @member {string} extendee\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.extendee = \"\";\n\n            /**\n             * FieldDescriptorProto default_value.\n             * @member {string} default_value\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.default_value = \"\";\n\n            /**\n             * FieldDescriptorProto oneof_index.\n             * @member {number} oneof_index\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.oneof_index = 0;\n\n            /**\n             * FieldDescriptorProto json_name.\n             * @member {string} json_name\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.json_name = \"\";\n\n            /**\n             * FieldDescriptorProto options.\n             * @member {google.protobuf.IFieldOptions|null|undefined} options\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             */\n            FieldDescriptorProto.prototype.options = null;\n\n            /**\n             * Creates a new FieldDescriptorProto instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @static\n             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set\n             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance\n             */\n            FieldDescriptorProto.create = function create(properties) {\n                return new FieldDescriptorProto(properties);\n            };\n\n            /**\n             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @static\n             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FieldDescriptorProto.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                if (message.extendee != null && message.hasOwnProperty(\"extendee\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);\n                if (message.number != null && message.hasOwnProperty(\"number\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);\n                if (message.type != null && message.hasOwnProperty(\"type\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);\n                if (message.type_name != null && message.hasOwnProperty(\"type_name\"))\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);\n                if (message.default_value != null && message.hasOwnProperty(\"default_value\"))\n                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                if (message.oneof_index != null && message.hasOwnProperty(\"oneof_index\"))\n                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);\n                if (message.json_name != null && message.hasOwnProperty(\"json_name\"))\n                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @static\n             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FieldDescriptorProto message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FieldDescriptorProto.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 3:\n                        message.number = reader.int32();\n                        break;\n                    case 4:\n                        message.label = reader.int32();\n                        break;\n                    case 5:\n                        message.type = reader.int32();\n                        break;\n                    case 6:\n                        message.type_name = reader.string();\n                        break;\n                    case 2:\n                        message.extendee = reader.string();\n                        break;\n                    case 7:\n                        message.default_value = reader.string();\n                        break;\n                    case 9:\n                        message.oneof_index = reader.int32();\n                        break;\n                    case 10:\n                        message.json_name = reader.string();\n                        break;\n                    case 8:\n                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FieldDescriptorProto message.\n             * @function verify\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FieldDescriptorProto.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.number != null && message.hasOwnProperty(\"number\"))\n                    if (!$util.isInteger(message.number))\n                        return \"number: integer expected\";\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    switch (message.label) {\n                    default:\n                        return \"label: enum value expected\";\n                    case 1:\n                    case 2:\n                    case 3:\n                        break;\n                    }\n                if (message.type != null && message.hasOwnProperty(\"type\"))\n                    switch (message.type) {\n                    default:\n                        return \"type: enum value expected\";\n                    case 1:\n                    case 2:\n                    case 3:\n                    case 4:\n                    case 5:\n                    case 6:\n                    case 7:\n                    case 8:\n                    case 9:\n                    case 10:\n                    case 11:\n                    case 12:\n                    case 13:\n                    case 14:\n                    case 15:\n                    case 16:\n                    case 17:\n                    case 18:\n                        break;\n                    }\n                if (message.type_name != null && message.hasOwnProperty(\"type_name\"))\n                    if (!$util.isString(message.type_name))\n                        return \"type_name: string expected\";\n                if (message.extendee != null && message.hasOwnProperty(\"extendee\"))\n                    if (!$util.isString(message.extendee))\n                        return \"extendee: string expected\";\n                if (message.default_value != null && message.hasOwnProperty(\"default_value\"))\n                    if (!$util.isString(message.default_value))\n                        return \"default_value: string expected\";\n                if (message.oneof_index != null && message.hasOwnProperty(\"oneof_index\"))\n                    if (!$util.isInteger(message.oneof_index))\n                        return \"oneof_index: integer expected\";\n                if (message.json_name != null && message.hasOwnProperty(\"json_name\"))\n                    if (!$util.isString(message.json_name))\n                        return \"json_name: string expected\";\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.google.protobuf.FieldOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto\n             */\n            FieldDescriptorProto.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.FieldDescriptorProto)\n                    return object;\n                var message = new $root.google.protobuf.FieldDescriptorProto();\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.number != null)\n                    message.number = object.number | 0;\n                switch (object.label) {\n                case \"LABEL_OPTIONAL\":\n                case 1:\n                    message.label = 1;\n                    break;\n                case \"LABEL_REQUIRED\":\n                case 2:\n                    message.label = 2;\n                    break;\n                case \"LABEL_REPEATED\":\n                case 3:\n                    message.label = 3;\n                    break;\n                }\n                switch (object.type) {\n                case \"TYPE_DOUBLE\":\n                case 1:\n                    message.type = 1;\n                    break;\n                case \"TYPE_FLOAT\":\n                case 2:\n                    message.type = 2;\n                    break;\n                case \"TYPE_INT64\":\n                case 3:\n                    message.type = 3;\n                    break;\n                case \"TYPE_UINT64\":\n                case 4:\n                    message.type = 4;\n                    break;\n                case \"TYPE_INT32\":\n                case 5:\n                    message.type = 5;\n                    break;\n                case \"TYPE_FIXED64\":\n                case 6:\n                    message.type = 6;\n                    break;\n                case \"TYPE_FIXED32\":\n                case 7:\n                    message.type = 7;\n                    break;\n                case \"TYPE_BOOL\":\n                case 8:\n                    message.type = 8;\n                    break;\n                case \"TYPE_STRING\":\n                case 9:\n                    message.type = 9;\n                    break;\n                case \"TYPE_GROUP\":\n                case 10:\n                    message.type = 10;\n                    break;\n                case \"TYPE_MESSAGE\":\n                case 11:\n                    message.type = 11;\n                    break;\n                case \"TYPE_BYTES\":\n                case 12:\n                    message.type = 12;\n                    break;\n                case \"TYPE_UINT32\":\n                case 13:\n                    message.type = 13;\n                    break;\n                case \"TYPE_ENUM\":\n                case 14:\n                    message.type = 14;\n                    break;\n                case \"TYPE_SFIXED32\":\n                case 15:\n                    message.type = 15;\n                    break;\n                case \"TYPE_SFIXED64\":\n                case 16:\n                    message.type = 16;\n                    break;\n                case \"TYPE_SINT32\":\n                case 17:\n                    message.type = 17;\n                    break;\n                case \"TYPE_SINT64\":\n                case 18:\n                    message.type = 18;\n                    break;\n                }\n                if (object.type_name != null)\n                    message.type_name = String(object.type_name);\n                if (object.extendee != null)\n                    message.extendee = String(object.extendee);\n                if (object.default_value != null)\n                    message.default_value = String(object.default_value);\n                if (object.oneof_index != null)\n                    message.oneof_index = object.oneof_index | 0;\n                if (object.json_name != null)\n                    message.json_name = String(object.json_name);\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".google.protobuf.FieldDescriptorProto.options: object expected\");\n                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @static\n             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FieldDescriptorProto.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.name = \"\";\n                    object.extendee = \"\";\n                    object.number = 0;\n                    object.label = options.enums === String ? \"LABEL_OPTIONAL\" : 1;\n                    object.type = options.enums === String ? \"TYPE_DOUBLE\" : 1;\n                    object.type_name = \"\";\n                    object.default_value = \"\";\n                    object.options = null;\n                    object.oneof_index = 0;\n                    object.json_name = \"\";\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.extendee != null && message.hasOwnProperty(\"extendee\"))\n                    object.extendee = message.extendee;\n                if (message.number != null && message.hasOwnProperty(\"number\"))\n                    object.number = message.number;\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;\n                if (message.type != null && message.hasOwnProperty(\"type\"))\n                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;\n                if (message.type_name != null && message.hasOwnProperty(\"type_name\"))\n                    object.type_name = message.type_name;\n                if (message.default_value != null && message.hasOwnProperty(\"default_value\"))\n                    object.default_value = message.default_value;\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);\n                if (message.oneof_index != null && message.hasOwnProperty(\"oneof_index\"))\n                    object.oneof_index = message.oneof_index;\n                if (message.json_name != null && message.hasOwnProperty(\"json_name\"))\n                    object.json_name = message.json_name;\n                return object;\n            };\n\n            /**\n             * Converts this FieldDescriptorProto to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.FieldDescriptorProto\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FieldDescriptorProto.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Type enum.\n             * @name google.protobuf.FieldDescriptorProto.Type\n             * @enum {string}\n             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value\n             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value\n             * @property {number} TYPE_INT64=3 TYPE_INT64 value\n             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value\n             * @property {number} TYPE_INT32=5 TYPE_INT32 value\n             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value\n             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value\n             * @property {number} TYPE_BOOL=8 TYPE_BOOL value\n             * @property {number} TYPE_STRING=9 TYPE_STRING value\n             * @property {number} TYPE_GROUP=10 TYPE_GROUP value\n             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value\n             * @property {number} TYPE_BYTES=12 TYPE_BYTES value\n             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value\n             * @property {number} TYPE_ENUM=14 TYPE_ENUM value\n             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value\n             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value\n             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value\n             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value\n             */\n            FieldDescriptorProto.Type = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[1] = \"TYPE_DOUBLE\"] = 1;\n                values[valuesById[2] = \"TYPE_FLOAT\"] = 2;\n                values[valuesById[3] = \"TYPE_INT64\"] = 3;\n                values[valuesById[4] = \"TYPE_UINT64\"] = 4;\n                values[valuesById[5] = \"TYPE_INT32\"] = 5;\n                values[valuesById[6] = \"TYPE_FIXED64\"] = 6;\n                values[valuesById[7] = \"TYPE_FIXED32\"] = 7;\n                values[valuesById[8] = \"TYPE_BOOL\"] = 8;\n                values[valuesById[9] = \"TYPE_STRING\"] = 9;\n                values[valuesById[10] = \"TYPE_GROUP\"] = 10;\n                values[valuesById[11] = \"TYPE_MESSAGE\"] = 11;\n                values[valuesById[12] = \"TYPE_BYTES\"] = 12;\n                values[valuesById[13] = \"TYPE_UINT32\"] = 13;\n                values[valuesById[14] = \"TYPE_ENUM\"] = 14;\n                values[valuesById[15] = \"TYPE_SFIXED32\"] = 15;\n                values[valuesById[16] = \"TYPE_SFIXED64\"] = 16;\n                values[valuesById[17] = \"TYPE_SINT32\"] = 17;\n                values[valuesById[18] = \"TYPE_SINT64\"] = 18;\n                return values;\n            })();\n\n            /**\n             * Label enum.\n             * @name google.protobuf.FieldDescriptorProto.Label\n             * @enum {string}\n             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value\n             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value\n             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value\n             */\n            FieldDescriptorProto.Label = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[1] = \"LABEL_OPTIONAL\"] = 1;\n                values[valuesById[2] = \"LABEL_REQUIRED\"] = 2;\n                values[valuesById[3] = \"LABEL_REPEATED\"] = 3;\n                return values;\n            })();\n\n            return FieldDescriptorProto;\n        })();\n\n        protobuf.OneofDescriptorProto = (function() {\n\n            /**\n             * Properties of an OneofDescriptorProto.\n             * @memberof google.protobuf\n             * @interface IOneofDescriptorProto\n             * @property {string|null} [name] OneofDescriptorProto name\n             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options\n             */\n\n            /**\n             * Constructs a new OneofDescriptorProto.\n             * @memberof google.protobuf\n             * @classdesc Represents an OneofDescriptorProto.\n             * @implements IOneofDescriptorProto\n             * @constructor\n             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set\n             */\n            function OneofDescriptorProto(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * OneofDescriptorProto name.\n             * @member {string} name\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @instance\n             */\n            OneofDescriptorProto.prototype.name = \"\";\n\n            /**\n             * OneofDescriptorProto options.\n             * @member {google.protobuf.IOneofOptions|null|undefined} options\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @instance\n             */\n            OneofDescriptorProto.prototype.options = null;\n\n            /**\n             * Creates a new OneofDescriptorProto instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @static\n             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set\n             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance\n             */\n            OneofDescriptorProto.create = function create(properties) {\n                return new OneofDescriptorProto(properties);\n            };\n\n            /**\n             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @static\n             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OneofDescriptorProto.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @static\n             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an OneofDescriptorProto message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OneofDescriptorProto.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an OneofDescriptorProto message.\n             * @function verify\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            OneofDescriptorProto.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.google.protobuf.OneofOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto\n             */\n            OneofDescriptorProto.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.OneofDescriptorProto)\n                    return object;\n                var message = new $root.google.protobuf.OneofDescriptorProto();\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".google.protobuf.OneofDescriptorProto.options: object expected\");\n                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @static\n             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            OneofDescriptorProto.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.name = \"\";\n                    object.options = null;\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);\n                return object;\n            };\n\n            /**\n             * Converts this OneofDescriptorProto to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.OneofDescriptorProto\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            OneofDescriptorProto.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return OneofDescriptorProto;\n        })();\n\n        protobuf.EnumDescriptorProto = (function() {\n\n            /**\n             * Properties of an EnumDescriptorProto.\n             * @memberof google.protobuf\n             * @interface IEnumDescriptorProto\n             * @property {string|null} [name] EnumDescriptorProto name\n             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value\n             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options\n             */\n\n            /**\n             * Constructs a new EnumDescriptorProto.\n             * @memberof google.protobuf\n             * @classdesc Represents an EnumDescriptorProto.\n             * @implements IEnumDescriptorProto\n             * @constructor\n             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set\n             */\n            function EnumDescriptorProto(properties) {\n                this.value = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * EnumDescriptorProto name.\n             * @member {string} name\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @instance\n             */\n            EnumDescriptorProto.prototype.name = \"\";\n\n            /**\n             * EnumDescriptorProto value.\n             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @instance\n             */\n            EnumDescriptorProto.prototype.value = $util.emptyArray;\n\n            /**\n             * EnumDescriptorProto options.\n             * @member {google.protobuf.IEnumOptions|null|undefined} options\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @instance\n             */\n            EnumDescriptorProto.prototype.options = null;\n\n            /**\n             * Creates a new EnumDescriptorProto instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @static\n             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set\n             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance\n             */\n            EnumDescriptorProto.create = function create(properties) {\n                return new EnumDescriptorProto(properties);\n            };\n\n            /**\n             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @static\n             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EnumDescriptorProto.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                if (message.value != null && message.value.length)\n                    for (var i = 0; i < message.value.length; ++i)\n                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @static\n             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an EnumDescriptorProto message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EnumDescriptorProto.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        if (!(message.value && message.value.length))\n                            message.value = [];\n                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 3:\n                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an EnumDescriptorProto message.\n             * @function verify\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            EnumDescriptorProto.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value))\n                        return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i) {\n                        var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);\n                        if (error)\n                            return \"value.\" + error;\n                    }\n                }\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.google.protobuf.EnumOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto\n             */\n            EnumDescriptorProto.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.EnumDescriptorProto)\n                    return object;\n                var message = new $root.google.protobuf.EnumDescriptorProto();\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.value) {\n                    if (!Array.isArray(object.value))\n                        throw TypeError(\".google.protobuf.EnumDescriptorProto.value: array expected\");\n                    message.value = [];\n                    for (var i = 0; i < object.value.length; ++i) {\n                        if (typeof object.value[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.EnumDescriptorProto.value: object expected\");\n                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);\n                    }\n                }\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".google.protobuf.EnumDescriptorProto.options: object expected\");\n                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @static\n             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            EnumDescriptorProto.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.value = [];\n                if (options.defaults) {\n                    object.name = \"\";\n                    object.options = null;\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j)\n                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);\n                }\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);\n                return object;\n            };\n\n            /**\n             * Converts this EnumDescriptorProto to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.EnumDescriptorProto\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            EnumDescriptorProto.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return EnumDescriptorProto;\n        })();\n\n        protobuf.EnumValueDescriptorProto = (function() {\n\n            /**\n             * Properties of an EnumValueDescriptorProto.\n             * @memberof google.protobuf\n             * @interface IEnumValueDescriptorProto\n             * @property {string|null} [name] EnumValueDescriptorProto name\n             * @property {number|null} [number] EnumValueDescriptorProto number\n             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options\n             */\n\n            /**\n             * Constructs a new EnumValueDescriptorProto.\n             * @memberof google.protobuf\n             * @classdesc Represents an EnumValueDescriptorProto.\n             * @implements IEnumValueDescriptorProto\n             * @constructor\n             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set\n             */\n            function EnumValueDescriptorProto(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * EnumValueDescriptorProto name.\n             * @member {string} name\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @instance\n             */\n            EnumValueDescriptorProto.prototype.name = \"\";\n\n            /**\n             * EnumValueDescriptorProto number.\n             * @member {number} number\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @instance\n             */\n            EnumValueDescriptorProto.prototype.number = 0;\n\n            /**\n             * EnumValueDescriptorProto options.\n             * @member {google.protobuf.IEnumValueOptions|null|undefined} options\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @instance\n             */\n            EnumValueDescriptorProto.prototype.options = null;\n\n            /**\n             * Creates a new EnumValueDescriptorProto instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @static\n             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set\n             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance\n             */\n            EnumValueDescriptorProto.create = function create(properties) {\n                return new EnumValueDescriptorProto(properties);\n            };\n\n            /**\n             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @static\n             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EnumValueDescriptorProto.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                if (message.number != null && message.hasOwnProperty(\"number\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @static\n             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EnumValueDescriptorProto.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        message.number = reader.int32();\n                        break;\n                    case 3:\n                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an EnumValueDescriptorProto message.\n             * @function verify\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            EnumValueDescriptorProto.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.number != null && message.hasOwnProperty(\"number\"))\n                    if (!$util.isInteger(message.number))\n                        return \"number: integer expected\";\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.google.protobuf.EnumValueOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto\n             */\n            EnumValueDescriptorProto.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)\n                    return object;\n                var message = new $root.google.protobuf.EnumValueDescriptorProto();\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.number != null)\n                    message.number = object.number | 0;\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".google.protobuf.EnumValueDescriptorProto.options: object expected\");\n                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @static\n             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            EnumValueDescriptorProto.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.name = \"\";\n                    object.number = 0;\n                    object.options = null;\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.number != null && message.hasOwnProperty(\"number\"))\n                    object.number = message.number;\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);\n                return object;\n            };\n\n            /**\n             * Converts this EnumValueDescriptorProto to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.EnumValueDescriptorProto\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return EnumValueDescriptorProto;\n        })();\n\n        protobuf.ServiceDescriptorProto = (function() {\n\n            /**\n             * Properties of a ServiceDescriptorProto.\n             * @memberof google.protobuf\n             * @interface IServiceDescriptorProto\n             * @property {string|null} [name] ServiceDescriptorProto name\n             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method\n             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options\n             */\n\n            /**\n             * Constructs a new ServiceDescriptorProto.\n             * @memberof google.protobuf\n             * @classdesc Represents a ServiceDescriptorProto.\n             * @implements IServiceDescriptorProto\n             * @constructor\n             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set\n             */\n            function ServiceDescriptorProto(properties) {\n                this.method = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ServiceDescriptorProto name.\n             * @member {string} name\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @instance\n             */\n            ServiceDescriptorProto.prototype.name = \"\";\n\n            /**\n             * ServiceDescriptorProto method.\n             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @instance\n             */\n            ServiceDescriptorProto.prototype.method = $util.emptyArray;\n\n            /**\n             * ServiceDescriptorProto options.\n             * @member {google.protobuf.IServiceOptions|null|undefined} options\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @instance\n             */\n            ServiceDescriptorProto.prototype.options = null;\n\n            /**\n             * Creates a new ServiceDescriptorProto instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @static\n             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set\n             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance\n             */\n            ServiceDescriptorProto.create = function create(properties) {\n                return new ServiceDescriptorProto(properties);\n            };\n\n            /**\n             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @static\n             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ServiceDescriptorProto.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                if (message.method != null && message.method.length)\n                    for (var i = 0; i < message.method.length; ++i)\n                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @static\n             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ServiceDescriptorProto.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        if (!(message.method && message.method.length))\n                            message.method = [];\n                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));\n                        break;\n                    case 3:\n                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ServiceDescriptorProto message.\n             * @function verify\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ServiceDescriptorProto.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.method != null && message.hasOwnProperty(\"method\")) {\n                    if (!Array.isArray(message.method))\n                        return \"method: array expected\";\n                    for (var i = 0; i < message.method.length; ++i) {\n                        var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);\n                        if (error)\n                            return \"method.\" + error;\n                    }\n                }\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.google.protobuf.ServiceOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto\n             */\n            ServiceDescriptorProto.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)\n                    return object;\n                var message = new $root.google.protobuf.ServiceDescriptorProto();\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.method) {\n                    if (!Array.isArray(object.method))\n                        throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: array expected\");\n                    message.method = [];\n                    for (var i = 0; i < object.method.length; ++i) {\n                        if (typeof object.method[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.ServiceDescriptorProto.method: object expected\");\n                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);\n                    }\n                }\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".google.protobuf.ServiceDescriptorProto.options: object expected\");\n                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @static\n             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ServiceDescriptorProto.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.method = [];\n                if (options.defaults) {\n                    object.name = \"\";\n                    object.options = null;\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.method && message.method.length) {\n                    object.method = [];\n                    for (var j = 0; j < message.method.length; ++j)\n                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);\n                }\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);\n                return object;\n            };\n\n            /**\n             * Converts this ServiceDescriptorProto to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.ServiceDescriptorProto\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ServiceDescriptorProto.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ServiceDescriptorProto;\n        })();\n\n        protobuf.MethodDescriptorProto = (function() {\n\n            /**\n             * Properties of a MethodDescriptorProto.\n             * @memberof google.protobuf\n             * @interface IMethodDescriptorProto\n             * @property {string|null} [name] MethodDescriptorProto name\n             * @property {string|null} [input_type] MethodDescriptorProto input_type\n             * @property {string|null} [output_type] MethodDescriptorProto output_type\n             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options\n             * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming\n             * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming\n             */\n\n            /**\n             * Constructs a new MethodDescriptorProto.\n             * @memberof google.protobuf\n             * @classdesc Represents a MethodDescriptorProto.\n             * @implements IMethodDescriptorProto\n             * @constructor\n             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set\n             */\n            function MethodDescriptorProto(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * MethodDescriptorProto name.\n             * @member {string} name\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @instance\n             */\n            MethodDescriptorProto.prototype.name = \"\";\n\n            /**\n             * MethodDescriptorProto input_type.\n             * @member {string} input_type\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @instance\n             */\n            MethodDescriptorProto.prototype.input_type = \"\";\n\n            /**\n             * MethodDescriptorProto output_type.\n             * @member {string} output_type\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @instance\n             */\n            MethodDescriptorProto.prototype.output_type = \"\";\n\n            /**\n             * MethodDescriptorProto options.\n             * @member {google.protobuf.IMethodOptions|null|undefined} options\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @instance\n             */\n            MethodDescriptorProto.prototype.options = null;\n\n            /**\n             * MethodDescriptorProto client_streaming.\n             * @member {boolean} client_streaming\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @instance\n             */\n            MethodDescriptorProto.prototype.client_streaming = false;\n\n            /**\n             * MethodDescriptorProto server_streaming.\n             * @member {boolean} server_streaming\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @instance\n             */\n            MethodDescriptorProto.prototype.server_streaming = false;\n\n            /**\n             * Creates a new MethodDescriptorProto instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @static\n             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set\n             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance\n             */\n            MethodDescriptorProto.create = function create(properties) {\n                return new MethodDescriptorProto(properties);\n            };\n\n            /**\n             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @static\n             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MethodDescriptorProto.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                if (message.input_type != null && message.hasOwnProperty(\"input_type\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);\n                if (message.output_type != null && message.hasOwnProperty(\"output_type\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                if (message.client_streaming != null && message.hasOwnProperty(\"client_streaming\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);\n                if (message.server_streaming != null && message.hasOwnProperty(\"server_streaming\"))\n                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @static\n             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a MethodDescriptorProto message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MethodDescriptorProto.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.name = reader.string();\n                        break;\n                    case 2:\n                        message.input_type = reader.string();\n                        break;\n                    case 3:\n                        message.output_type = reader.string();\n                        break;\n                    case 4:\n                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());\n                        break;\n                    case 5:\n                        message.client_streaming = reader.bool();\n                        break;\n                    case 6:\n                        message.server_streaming = reader.bool();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a MethodDescriptorProto message.\n             * @function verify\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            MethodDescriptorProto.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.input_type != null && message.hasOwnProperty(\"input_type\"))\n                    if (!$util.isString(message.input_type))\n                        return \"input_type: string expected\";\n                if (message.output_type != null && message.hasOwnProperty(\"output_type\"))\n                    if (!$util.isString(message.output_type))\n                        return \"output_type: string expected\";\n                if (message.options != null && message.hasOwnProperty(\"options\")) {\n                    var error = $root.google.protobuf.MethodOptions.verify(message.options);\n                    if (error)\n                        return \"options.\" + error;\n                }\n                if (message.client_streaming != null && message.hasOwnProperty(\"client_streaming\"))\n                    if (typeof message.client_streaming !== \"boolean\")\n                        return \"client_streaming: boolean expected\";\n                if (message.server_streaming != null && message.hasOwnProperty(\"server_streaming\"))\n                    if (typeof message.server_streaming !== \"boolean\")\n                        return \"server_streaming: boolean expected\";\n                return null;\n            };\n\n            /**\n             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto\n             */\n            MethodDescriptorProto.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.MethodDescriptorProto)\n                    return object;\n                var message = new $root.google.protobuf.MethodDescriptorProto();\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.input_type != null)\n                    message.input_type = String(object.input_type);\n                if (object.output_type != null)\n                    message.output_type = String(object.output_type);\n                if (object.options != null) {\n                    if (typeof object.options !== \"object\")\n                        throw TypeError(\".google.protobuf.MethodDescriptorProto.options: object expected\");\n                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);\n                }\n                if (object.client_streaming != null)\n                    message.client_streaming = Boolean(object.client_streaming);\n                if (object.server_streaming != null)\n                    message.server_streaming = Boolean(object.server_streaming);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @static\n             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            MethodDescriptorProto.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.name = \"\";\n                    object.input_type = \"\";\n                    object.output_type = \"\";\n                    object.options = null;\n                    object.client_streaming = false;\n                    object.server_streaming = false;\n                }\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.input_type != null && message.hasOwnProperty(\"input_type\"))\n                    object.input_type = message.input_type;\n                if (message.output_type != null && message.hasOwnProperty(\"output_type\"))\n                    object.output_type = message.output_type;\n                if (message.options != null && message.hasOwnProperty(\"options\"))\n                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);\n                if (message.client_streaming != null && message.hasOwnProperty(\"client_streaming\"))\n                    object.client_streaming = message.client_streaming;\n                if (message.server_streaming != null && message.hasOwnProperty(\"server_streaming\"))\n                    object.server_streaming = message.server_streaming;\n                return object;\n            };\n\n            /**\n             * Converts this MethodDescriptorProto to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.MethodDescriptorProto\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            MethodDescriptorProto.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return MethodDescriptorProto;\n        })();\n\n        protobuf.FileOptions = (function() {\n\n            /**\n             * Properties of a FileOptions.\n             * @memberof google.protobuf\n             * @interface IFileOptions\n             * @property {string|null} [java_package] FileOptions java_package\n             * @property {string|null} [java_outer_classname] FileOptions java_outer_classname\n             * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files\n             * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash\n             * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8\n             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for\n             * @property {string|null} [go_package] FileOptions go_package\n             * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services\n             * @property {boolean|null} [java_generic_services] FileOptions java_generic_services\n             * @property {boolean|null} [py_generic_services] FileOptions py_generic_services\n             * @property {boolean|null} [deprecated] FileOptions deprecated\n             * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas\n             * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix\n             * @property {string|null} [csharp_namespace] FileOptions csharp_namespace\n             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option\n             * @property {scalapb.IScalaPbOptions|null} [\".scalapb.options\"] FileOptions .scalapb.options\n             */\n\n            /**\n             * Constructs a new FileOptions.\n             * @memberof google.protobuf\n             * @classdesc Represents a FileOptions.\n             * @implements IFileOptions\n             * @constructor\n             * @param {google.protobuf.IFileOptions=} [properties] Properties to set\n             */\n            function FileOptions(properties) {\n                this.uninterpreted_option = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FileOptions java_package.\n             * @member {string} java_package\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.java_package = \"\";\n\n            /**\n             * FileOptions java_outer_classname.\n             * @member {string} java_outer_classname\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.java_outer_classname = \"\";\n\n            /**\n             * FileOptions java_multiple_files.\n             * @member {boolean} java_multiple_files\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.java_multiple_files = false;\n\n            /**\n             * FileOptions java_generate_equals_and_hash.\n             * @member {boolean} java_generate_equals_and_hash\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.java_generate_equals_and_hash = false;\n\n            /**\n             * FileOptions java_string_check_utf8.\n             * @member {boolean} java_string_check_utf8\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.java_string_check_utf8 = false;\n\n            /**\n             * FileOptions optimize_for.\n             * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.optimize_for = 1;\n\n            /**\n             * FileOptions go_package.\n             * @member {string} go_package\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.go_package = \"\";\n\n            /**\n             * FileOptions cc_generic_services.\n             * @member {boolean} cc_generic_services\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.cc_generic_services = false;\n\n            /**\n             * FileOptions java_generic_services.\n             * @member {boolean} java_generic_services\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.java_generic_services = false;\n\n            /**\n             * FileOptions py_generic_services.\n             * @member {boolean} py_generic_services\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.py_generic_services = false;\n\n            /**\n             * FileOptions deprecated.\n             * @member {boolean} deprecated\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.deprecated = false;\n\n            /**\n             * FileOptions cc_enable_arenas.\n             * @member {boolean} cc_enable_arenas\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.cc_enable_arenas = false;\n\n            /**\n             * FileOptions objc_class_prefix.\n             * @member {string} objc_class_prefix\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.objc_class_prefix = \"\";\n\n            /**\n             * FileOptions csharp_namespace.\n             * @member {string} csharp_namespace\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.csharp_namespace = \"\";\n\n            /**\n             * FileOptions uninterpreted_option.\n             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype.uninterpreted_option = $util.emptyArray;\n\n            /**\n             * FileOptions .scalapb.options.\n             * @member {scalapb.IScalaPbOptions|null|undefined} .scalapb.options\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             */\n            FileOptions.prototype[\".scalapb.options\"] = null;\n\n            /**\n             * Creates a new FileOptions instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.FileOptions\n             * @static\n             * @param {google.protobuf.IFileOptions=} [properties] Properties to set\n             * @returns {google.protobuf.FileOptions} FileOptions instance\n             */\n            FileOptions.create = function create(properties) {\n                return new FileOptions(properties);\n            };\n\n            /**\n             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.FileOptions\n             * @static\n             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FileOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.java_package != null && message.hasOwnProperty(\"java_package\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);\n                if (message.java_outer_classname != null && message.hasOwnProperty(\"java_outer_classname\"))\n                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);\n                if (message.optimize_for != null && message.hasOwnProperty(\"optimize_for\"))\n                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);\n                if (message.java_multiple_files != null && message.hasOwnProperty(\"java_multiple_files\"))\n                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);\n                if (message.go_package != null && message.hasOwnProperty(\"go_package\"))\n                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);\n                if (message.cc_generic_services != null && message.hasOwnProperty(\"cc_generic_services\"))\n                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);\n                if (message.java_generic_services != null && message.hasOwnProperty(\"java_generic_services\"))\n                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);\n                if (message.py_generic_services != null && message.hasOwnProperty(\"py_generic_services\"))\n                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);\n                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty(\"java_generate_equals_and_hash\"))\n                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);\n                if (message.java_string_check_utf8 != null && message.hasOwnProperty(\"java_string_check_utf8\"))\n                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);\n                if (message.cc_enable_arenas != null && message.hasOwnProperty(\"cc_enable_arenas\"))\n                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);\n                if (message.objc_class_prefix != null && message.hasOwnProperty(\"objc_class_prefix\"))\n                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);\n                if (message.csharp_namespace != null && message.hasOwnProperty(\"csharp_namespace\"))\n                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);\n                if (message.uninterpreted_option != null && message.uninterpreted_option.length)\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i)\n                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();\n                if (message[\".scalapb.options\"] != null && message.hasOwnProperty(\".scalapb.options\"))\n                    $root.scalapb.ScalaPbOptions.encode(message[\".scalapb.options\"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.FileOptions\n             * @static\n             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FileOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.FileOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.FileOptions} FileOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FileOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.java_package = reader.string();\n                        break;\n                    case 8:\n                        message.java_outer_classname = reader.string();\n                        break;\n                    case 10:\n                        message.java_multiple_files = reader.bool();\n                        break;\n                    case 20:\n                        message.java_generate_equals_and_hash = reader.bool();\n                        break;\n                    case 27:\n                        message.java_string_check_utf8 = reader.bool();\n                        break;\n                    case 9:\n                        message.optimize_for = reader.int32();\n                        break;\n                    case 11:\n                        message.go_package = reader.string();\n                        break;\n                    case 16:\n                        message.cc_generic_services = reader.bool();\n                        break;\n                    case 17:\n                        message.java_generic_services = reader.bool();\n                        break;\n                    case 18:\n                        message.py_generic_services = reader.bool();\n                        break;\n                    case 23:\n                        message.deprecated = reader.bool();\n                        break;\n                    case 31:\n                        message.cc_enable_arenas = reader.bool();\n                        break;\n                    case 36:\n                        message.objc_class_prefix = reader.string();\n                        break;\n                    case 37:\n                        message.csharp_namespace = reader.string();\n                        break;\n                    case 999:\n                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))\n                            message.uninterpreted_option = [];\n                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));\n                        break;\n                    case 1020:\n                        message[\".scalapb.options\"] = $root.scalapb.ScalaPbOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FileOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.FileOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.FileOptions} FileOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FileOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FileOptions message.\n             * @function verify\n             * @memberof google.protobuf.FileOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FileOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.java_package != null && message.hasOwnProperty(\"java_package\"))\n                    if (!$util.isString(message.java_package))\n                        return \"java_package: string expected\";\n                if (message.java_outer_classname != null && message.hasOwnProperty(\"java_outer_classname\"))\n                    if (!$util.isString(message.java_outer_classname))\n                        return \"java_outer_classname: string expected\";\n                if (message.java_multiple_files != null && message.hasOwnProperty(\"java_multiple_files\"))\n                    if (typeof message.java_multiple_files !== \"boolean\")\n                        return \"java_multiple_files: boolean expected\";\n                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty(\"java_generate_equals_and_hash\"))\n                    if (typeof message.java_generate_equals_and_hash !== \"boolean\")\n                        return \"java_generate_equals_and_hash: boolean expected\";\n                if (message.java_string_check_utf8 != null && message.hasOwnProperty(\"java_string_check_utf8\"))\n                    if (typeof message.java_string_check_utf8 !== \"boolean\")\n                        return \"java_string_check_utf8: boolean expected\";\n                if (message.optimize_for != null && message.hasOwnProperty(\"optimize_for\"))\n                    switch (message.optimize_for) {\n                    default:\n                        return \"optimize_for: enum value expected\";\n                    case 1:\n                    case 2:\n                    case 3:\n                        break;\n                    }\n                if (message.go_package != null && message.hasOwnProperty(\"go_package\"))\n                    if (!$util.isString(message.go_package))\n                        return \"go_package: string expected\";\n                if (message.cc_generic_services != null && message.hasOwnProperty(\"cc_generic_services\"))\n                    if (typeof message.cc_generic_services !== \"boolean\")\n                        return \"cc_generic_services: boolean expected\";\n                if (message.java_generic_services != null && message.hasOwnProperty(\"java_generic_services\"))\n                    if (typeof message.java_generic_services !== \"boolean\")\n                        return \"java_generic_services: boolean expected\";\n                if (message.py_generic_services != null && message.hasOwnProperty(\"py_generic_services\"))\n                    if (typeof message.py_generic_services !== \"boolean\")\n                        return \"py_generic_services: boolean expected\";\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    if (typeof message.deprecated !== \"boolean\")\n                        return \"deprecated: boolean expected\";\n                if (message.cc_enable_arenas != null && message.hasOwnProperty(\"cc_enable_arenas\"))\n                    if (typeof message.cc_enable_arenas !== \"boolean\")\n                        return \"cc_enable_arenas: boolean expected\";\n                if (message.objc_class_prefix != null && message.hasOwnProperty(\"objc_class_prefix\"))\n                    if (!$util.isString(message.objc_class_prefix))\n                        return \"objc_class_prefix: string expected\";\n                if (message.csharp_namespace != null && message.hasOwnProperty(\"csharp_namespace\"))\n                    if (!$util.isString(message.csharp_namespace))\n                        return \"csharp_namespace: string expected\";\n                if (message.uninterpreted_option != null && message.hasOwnProperty(\"uninterpreted_option\")) {\n                    if (!Array.isArray(message.uninterpreted_option))\n                        return \"uninterpreted_option: array expected\";\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {\n                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);\n                        if (error)\n                            return \"uninterpreted_option.\" + error;\n                    }\n                }\n                if (message[\".scalapb.options\"] != null && message.hasOwnProperty(\".scalapb.options\")) {\n                    var error = $root.scalapb.ScalaPbOptions.verify(message[\".scalapb.options\"]);\n                    if (error)\n                        return \".scalapb.options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.FileOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.FileOptions} FileOptions\n             */\n            FileOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.FileOptions)\n                    return object;\n                var message = new $root.google.protobuf.FileOptions();\n                if (object.java_package != null)\n                    message.java_package = String(object.java_package);\n                if (object.java_outer_classname != null)\n                    message.java_outer_classname = String(object.java_outer_classname);\n                if (object.java_multiple_files != null)\n                    message.java_multiple_files = Boolean(object.java_multiple_files);\n                if (object.java_generate_equals_and_hash != null)\n                    message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);\n                if (object.java_string_check_utf8 != null)\n                    message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);\n                switch (object.optimize_for) {\n                case \"SPEED\":\n                case 1:\n                    message.optimize_for = 1;\n                    break;\n                case \"CODE_SIZE\":\n                case 2:\n                    message.optimize_for = 2;\n                    break;\n                case \"LITE_RUNTIME\":\n                case 3:\n                    message.optimize_for = 3;\n                    break;\n                }\n                if (object.go_package != null)\n                    message.go_package = String(object.go_package);\n                if (object.cc_generic_services != null)\n                    message.cc_generic_services = Boolean(object.cc_generic_services);\n                if (object.java_generic_services != null)\n                    message.java_generic_services = Boolean(object.java_generic_services);\n                if (object.py_generic_services != null)\n                    message.py_generic_services = Boolean(object.py_generic_services);\n                if (object.deprecated != null)\n                    message.deprecated = Boolean(object.deprecated);\n                if (object.cc_enable_arenas != null)\n                    message.cc_enable_arenas = Boolean(object.cc_enable_arenas);\n                if (object.objc_class_prefix != null)\n                    message.objc_class_prefix = String(object.objc_class_prefix);\n                if (object.csharp_namespace != null)\n                    message.csharp_namespace = String(object.csharp_namespace);\n                if (object.uninterpreted_option) {\n                    if (!Array.isArray(object.uninterpreted_option))\n                        throw TypeError(\".google.protobuf.FileOptions.uninterpreted_option: array expected\");\n                    message.uninterpreted_option = [];\n                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {\n                        if (typeof object.uninterpreted_option[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.FileOptions.uninterpreted_option: object expected\");\n                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);\n                    }\n                }\n                if (object[\".scalapb.options\"] != null) {\n                    if (typeof object[\".scalapb.options\"] !== \"object\")\n                        throw TypeError(\".google.protobuf.FileOptions..scalapb.options: object expected\");\n                    message[\".scalapb.options\"] = $root.scalapb.ScalaPbOptions.fromObject(object[\".scalapb.options\"]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.FileOptions\n             * @static\n             * @param {google.protobuf.FileOptions} message FileOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FileOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.uninterpreted_option = [];\n                if (options.defaults) {\n                    object.java_package = \"\";\n                    object.java_outer_classname = \"\";\n                    object.optimize_for = options.enums === String ? \"SPEED\" : 1;\n                    object.java_multiple_files = false;\n                    object.go_package = \"\";\n                    object.cc_generic_services = false;\n                    object.java_generic_services = false;\n                    object.py_generic_services = false;\n                    object.java_generate_equals_and_hash = false;\n                    object.deprecated = false;\n                    object.java_string_check_utf8 = false;\n                    object.cc_enable_arenas = false;\n                    object.objc_class_prefix = \"\";\n                    object.csharp_namespace = \"\";\n                    object[\".scalapb.options\"] = null;\n                }\n                if (message.java_package != null && message.hasOwnProperty(\"java_package\"))\n                    object.java_package = message.java_package;\n                if (message.java_outer_classname != null && message.hasOwnProperty(\"java_outer_classname\"))\n                    object.java_outer_classname = message.java_outer_classname;\n                if (message.optimize_for != null && message.hasOwnProperty(\"optimize_for\"))\n                    object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;\n                if (message.java_multiple_files != null && message.hasOwnProperty(\"java_multiple_files\"))\n                    object.java_multiple_files = message.java_multiple_files;\n                if (message.go_package != null && message.hasOwnProperty(\"go_package\"))\n                    object.go_package = message.go_package;\n                if (message.cc_generic_services != null && message.hasOwnProperty(\"cc_generic_services\"))\n                    object.cc_generic_services = message.cc_generic_services;\n                if (message.java_generic_services != null && message.hasOwnProperty(\"java_generic_services\"))\n                    object.java_generic_services = message.java_generic_services;\n                if (message.py_generic_services != null && message.hasOwnProperty(\"py_generic_services\"))\n                    object.py_generic_services = message.py_generic_services;\n                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty(\"java_generate_equals_and_hash\"))\n                    object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    object.deprecated = message.deprecated;\n                if (message.java_string_check_utf8 != null && message.hasOwnProperty(\"java_string_check_utf8\"))\n                    object.java_string_check_utf8 = message.java_string_check_utf8;\n                if (message.cc_enable_arenas != null && message.hasOwnProperty(\"cc_enable_arenas\"))\n                    object.cc_enable_arenas = message.cc_enable_arenas;\n                if (message.objc_class_prefix != null && message.hasOwnProperty(\"objc_class_prefix\"))\n                    object.objc_class_prefix = message.objc_class_prefix;\n                if (message.csharp_namespace != null && message.hasOwnProperty(\"csharp_namespace\"))\n                    object.csharp_namespace = message.csharp_namespace;\n                if (message.uninterpreted_option && message.uninterpreted_option.length) {\n                    object.uninterpreted_option = [];\n                    for (var j = 0; j < message.uninterpreted_option.length; ++j)\n                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);\n                }\n                if (message[\".scalapb.options\"] != null && message.hasOwnProperty(\".scalapb.options\"))\n                    object[\".scalapb.options\"] = $root.scalapb.ScalaPbOptions.toObject(message[\".scalapb.options\"], options);\n                return object;\n            };\n\n            /**\n             * Converts this FileOptions to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.FileOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FileOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * OptimizeMode enum.\n             * @name google.protobuf.FileOptions.OptimizeMode\n             * @enum {string}\n             * @property {number} SPEED=1 SPEED value\n             * @property {number} CODE_SIZE=2 CODE_SIZE value\n             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value\n             */\n            FileOptions.OptimizeMode = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[1] = \"SPEED\"] = 1;\n                values[valuesById[2] = \"CODE_SIZE\"] = 2;\n                values[valuesById[3] = \"LITE_RUNTIME\"] = 3;\n                return values;\n            })();\n\n            return FileOptions;\n        })();\n\n        protobuf.MessageOptions = (function() {\n\n            /**\n             * Properties of a MessageOptions.\n             * @memberof google.protobuf\n             * @interface IMessageOptions\n             * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format\n             * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor\n             * @property {boolean|null} [deprecated] MessageOptions deprecated\n             * @property {boolean|null} [map_entry] MessageOptions map_entry\n             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option\n             * @property {scalapb.IMessageOptions|null} [\".scalapb.message\"] MessageOptions .scalapb.message\n             */\n\n            /**\n             * Constructs a new MessageOptions.\n             * @memberof google.protobuf\n             * @classdesc Represents a MessageOptions.\n             * @implements IMessageOptions\n             * @constructor\n             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set\n             */\n            function MessageOptions(properties) {\n                this.uninterpreted_option = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * MessageOptions message_set_wire_format.\n             * @member {boolean} message_set_wire_format\n             * @memberof google.protobuf.MessageOptions\n             * @instance\n             */\n            MessageOptions.prototype.message_set_wire_format = false;\n\n            /**\n             * MessageOptions no_standard_descriptor_accessor.\n             * @member {boolean} no_standard_descriptor_accessor\n             * @memberof google.protobuf.MessageOptions\n             * @instance\n             */\n            MessageOptions.prototype.no_standard_descriptor_accessor = false;\n\n            /**\n             * MessageOptions deprecated.\n             * @member {boolean} deprecated\n             * @memberof google.protobuf.MessageOptions\n             * @instance\n             */\n            MessageOptions.prototype.deprecated = false;\n\n            /**\n             * MessageOptions map_entry.\n             * @member {boolean} map_entry\n             * @memberof google.protobuf.MessageOptions\n             * @instance\n             */\n            MessageOptions.prototype.map_entry = false;\n\n            /**\n             * MessageOptions uninterpreted_option.\n             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option\n             * @memberof google.protobuf.MessageOptions\n             * @instance\n             */\n            MessageOptions.prototype.uninterpreted_option = $util.emptyArray;\n\n            /**\n             * MessageOptions .scalapb.message.\n             * @member {scalapb.IMessageOptions|null|undefined} .scalapb.message\n             * @memberof google.protobuf.MessageOptions\n             * @instance\n             */\n            MessageOptions.prototype[\".scalapb.message\"] = null;\n\n            /**\n             * Creates a new MessageOptions instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.MessageOptions\n             * @static\n             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set\n             * @returns {google.protobuf.MessageOptions} MessageOptions instance\n             */\n            MessageOptions.create = function create(properties) {\n                return new MessageOptions(properties);\n            };\n\n            /**\n             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.MessageOptions\n             * @static\n             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MessageOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.message_set_wire_format != null && message.hasOwnProperty(\"message_set_wire_format\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);\n                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty(\"no_standard_descriptor_accessor\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);\n                if (message.map_entry != null && message.hasOwnProperty(\"map_entry\"))\n                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);\n                if (message.uninterpreted_option != null && message.uninterpreted_option.length)\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i)\n                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();\n                if (message[\".scalapb.message\"] != null && message.hasOwnProperty(\".scalapb.message\"))\n                    $root.scalapb.MessageOptions.encode(message[\".scalapb.message\"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.MessageOptions\n             * @static\n             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a MessageOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.MessageOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.MessageOptions} MessageOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MessageOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.message_set_wire_format = reader.bool();\n                        break;\n                    case 2:\n                        message.no_standard_descriptor_accessor = reader.bool();\n                        break;\n                    case 3:\n                        message.deprecated = reader.bool();\n                        break;\n                    case 7:\n                        message.map_entry = reader.bool();\n                        break;\n                    case 999:\n                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))\n                            message.uninterpreted_option = [];\n                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));\n                        break;\n                    case 1020:\n                        message[\".scalapb.message\"] = $root.scalapb.MessageOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.MessageOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.MessageOptions} MessageOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MessageOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a MessageOptions message.\n             * @function verify\n             * @memberof google.protobuf.MessageOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            MessageOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.message_set_wire_format != null && message.hasOwnProperty(\"message_set_wire_format\"))\n                    if (typeof message.message_set_wire_format !== \"boolean\")\n                        return \"message_set_wire_format: boolean expected\";\n                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty(\"no_standard_descriptor_accessor\"))\n                    if (typeof message.no_standard_descriptor_accessor !== \"boolean\")\n                        return \"no_standard_descriptor_accessor: boolean expected\";\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    if (typeof message.deprecated !== \"boolean\")\n                        return \"deprecated: boolean expected\";\n                if (message.map_entry != null && message.hasOwnProperty(\"map_entry\"))\n                    if (typeof message.map_entry !== \"boolean\")\n                        return \"map_entry: boolean expected\";\n                if (message.uninterpreted_option != null && message.hasOwnProperty(\"uninterpreted_option\")) {\n                    if (!Array.isArray(message.uninterpreted_option))\n                        return \"uninterpreted_option: array expected\";\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {\n                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);\n                        if (error)\n                            return \"uninterpreted_option.\" + error;\n                    }\n                }\n                if (message[\".scalapb.message\"] != null && message.hasOwnProperty(\".scalapb.message\")) {\n                    var error = $root.scalapb.MessageOptions.verify(message[\".scalapb.message\"]);\n                    if (error)\n                        return \".scalapb.message.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.MessageOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.MessageOptions} MessageOptions\n             */\n            MessageOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.MessageOptions)\n                    return object;\n                var message = new $root.google.protobuf.MessageOptions();\n                if (object.message_set_wire_format != null)\n                    message.message_set_wire_format = Boolean(object.message_set_wire_format);\n                if (object.no_standard_descriptor_accessor != null)\n                    message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);\n                if (object.deprecated != null)\n                    message.deprecated = Boolean(object.deprecated);\n                if (object.map_entry != null)\n                    message.map_entry = Boolean(object.map_entry);\n                if (object.uninterpreted_option) {\n                    if (!Array.isArray(object.uninterpreted_option))\n                        throw TypeError(\".google.protobuf.MessageOptions.uninterpreted_option: array expected\");\n                    message.uninterpreted_option = [];\n                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {\n                        if (typeof object.uninterpreted_option[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.MessageOptions.uninterpreted_option: object expected\");\n                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);\n                    }\n                }\n                if (object[\".scalapb.message\"] != null) {\n                    if (typeof object[\".scalapb.message\"] !== \"object\")\n                        throw TypeError(\".google.protobuf.MessageOptions..scalapb.message: object expected\");\n                    message[\".scalapb.message\"] = $root.scalapb.MessageOptions.fromObject(object[\".scalapb.message\"]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.MessageOptions\n             * @static\n             * @param {google.protobuf.MessageOptions} message MessageOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            MessageOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.uninterpreted_option = [];\n                if (options.defaults) {\n                    object.message_set_wire_format = false;\n                    object.no_standard_descriptor_accessor = false;\n                    object.deprecated = false;\n                    object.map_entry = false;\n                    object[\".scalapb.message\"] = null;\n                }\n                if (message.message_set_wire_format != null && message.hasOwnProperty(\"message_set_wire_format\"))\n                    object.message_set_wire_format = message.message_set_wire_format;\n                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty(\"no_standard_descriptor_accessor\"))\n                    object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    object.deprecated = message.deprecated;\n                if (message.map_entry != null && message.hasOwnProperty(\"map_entry\"))\n                    object.map_entry = message.map_entry;\n                if (message.uninterpreted_option && message.uninterpreted_option.length) {\n                    object.uninterpreted_option = [];\n                    for (var j = 0; j < message.uninterpreted_option.length; ++j)\n                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);\n                }\n                if (message[\".scalapb.message\"] != null && message.hasOwnProperty(\".scalapb.message\"))\n                    object[\".scalapb.message\"] = $root.scalapb.MessageOptions.toObject(message[\".scalapb.message\"], options);\n                return object;\n            };\n\n            /**\n             * Converts this MessageOptions to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.MessageOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            MessageOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return MessageOptions;\n        })();\n\n        protobuf.FieldOptions = (function() {\n\n            /**\n             * Properties of a FieldOptions.\n             * @memberof google.protobuf\n             * @interface IFieldOptions\n             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype\n             * @property {boolean|null} [packed] FieldOptions packed\n             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype\n             * @property {boolean|null} [lazy] FieldOptions lazy\n             * @property {boolean|null} [deprecated] FieldOptions deprecated\n             * @property {boolean|null} [weak] FieldOptions weak\n             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option\n             * @property {scalapb.IFieldOptions|null} [\".scalapb.field\"] FieldOptions .scalapb.field\n             */\n\n            /**\n             * Constructs a new FieldOptions.\n             * @memberof google.protobuf\n             * @classdesc Represents a FieldOptions.\n             * @implements IFieldOptions\n             * @constructor\n             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set\n             */\n            function FieldOptions(properties) {\n                this.uninterpreted_option = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FieldOptions ctype.\n             * @member {google.protobuf.FieldOptions.CType} ctype\n             * @memberof google.protobuf.FieldOptions\n             * @instance\n             */\n            FieldOptions.prototype.ctype = 0;\n\n            /**\n             * FieldOptions packed.\n             * @member {boolean} packed\n             * @memberof google.protobuf.FieldOptions\n             * @instance\n             */\n            FieldOptions.prototype.packed = false;\n\n            /**\n             * FieldOptions jstype.\n             * @member {google.protobuf.FieldOptions.JSType} jstype\n             * @memberof google.protobuf.FieldOptions\n             * @instance\n             */\n            FieldOptions.prototype.jstype = 0;\n\n            /**\n             * FieldOptions lazy.\n             * @member {boolean} lazy\n             * @memberof google.protobuf.FieldOptions\n             * @instance\n             */\n            FieldOptions.prototype.lazy = false;\n\n            /**\n             * FieldOptions deprecated.\n             * @member {boolean} deprecated\n             * @memberof google.protobuf.FieldOptions\n             * @instance\n             */\n            FieldOptions.prototype.deprecated = false;\n\n            /**\n             * FieldOptions weak.\n             * @member {boolean} weak\n             * @memberof google.protobuf.FieldOptions\n             * @instance\n             */\n            FieldOptions.prototype.weak = false;\n\n            /**\n             * FieldOptions uninterpreted_option.\n             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option\n             * @memberof google.protobuf.FieldOptions\n             * @instance\n             */\n            FieldOptions.prototype.uninterpreted_option = $util.emptyArray;\n\n            /**\n             * FieldOptions .scalapb.field.\n             * @member {scalapb.IFieldOptions|null|undefined} .scalapb.field\n             * @memberof google.protobuf.FieldOptions\n             * @instance\n             */\n            FieldOptions.prototype[\".scalapb.field\"] = null;\n\n            /**\n             * Creates a new FieldOptions instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.FieldOptions\n             * @static\n             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set\n             * @returns {google.protobuf.FieldOptions} FieldOptions instance\n             */\n            FieldOptions.create = function create(properties) {\n                return new FieldOptions(properties);\n            };\n\n            /**\n             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.FieldOptions\n             * @static\n             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FieldOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.ctype != null && message.hasOwnProperty(\"ctype\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);\n                if (message.packed != null && message.hasOwnProperty(\"packed\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);\n                if (message.lazy != null && message.hasOwnProperty(\"lazy\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);\n                if (message.jstype != null && message.hasOwnProperty(\"jstype\"))\n                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);\n                if (message.weak != null && message.hasOwnProperty(\"weak\"))\n                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);\n                if (message.uninterpreted_option != null && message.uninterpreted_option.length)\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i)\n                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();\n                if (message[\".scalapb.field\"] != null && message.hasOwnProperty(\".scalapb.field\"))\n                    $root.scalapb.FieldOptions.encode(message[\".scalapb.field\"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.FieldOptions\n             * @static\n             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FieldOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.FieldOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.FieldOptions} FieldOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FieldOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.ctype = reader.int32();\n                        break;\n                    case 2:\n                        message.packed = reader.bool();\n                        break;\n                    case 6:\n                        message.jstype = reader.int32();\n                        break;\n                    case 5:\n                        message.lazy = reader.bool();\n                        break;\n                    case 3:\n                        message.deprecated = reader.bool();\n                        break;\n                    case 10:\n                        message.weak = reader.bool();\n                        break;\n                    case 999:\n                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))\n                            message.uninterpreted_option = [];\n                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));\n                        break;\n                    case 1020:\n                        message[\".scalapb.field\"] = $root.scalapb.FieldOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.FieldOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.FieldOptions} FieldOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FieldOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FieldOptions message.\n             * @function verify\n             * @memberof google.protobuf.FieldOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FieldOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.ctype != null && message.hasOwnProperty(\"ctype\"))\n                    switch (message.ctype) {\n                    default:\n                        return \"ctype: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                        break;\n                    }\n                if (message.packed != null && message.hasOwnProperty(\"packed\"))\n                    if (typeof message.packed !== \"boolean\")\n                        return \"packed: boolean expected\";\n                if (message.jstype != null && message.hasOwnProperty(\"jstype\"))\n                    switch (message.jstype) {\n                    default:\n                        return \"jstype: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                        break;\n                    }\n                if (message.lazy != null && message.hasOwnProperty(\"lazy\"))\n                    if (typeof message.lazy !== \"boolean\")\n                        return \"lazy: boolean expected\";\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    if (typeof message.deprecated !== \"boolean\")\n                        return \"deprecated: boolean expected\";\n                if (message.weak != null && message.hasOwnProperty(\"weak\"))\n                    if (typeof message.weak !== \"boolean\")\n                        return \"weak: boolean expected\";\n                if (message.uninterpreted_option != null && message.hasOwnProperty(\"uninterpreted_option\")) {\n                    if (!Array.isArray(message.uninterpreted_option))\n                        return \"uninterpreted_option: array expected\";\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {\n                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);\n                        if (error)\n                            return \"uninterpreted_option.\" + error;\n                    }\n                }\n                if (message[\".scalapb.field\"] != null && message.hasOwnProperty(\".scalapb.field\")) {\n                    var error = $root.scalapb.FieldOptions.verify(message[\".scalapb.field\"]);\n                    if (error)\n                        return \".scalapb.field.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.FieldOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.FieldOptions} FieldOptions\n             */\n            FieldOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.FieldOptions)\n                    return object;\n                var message = new $root.google.protobuf.FieldOptions();\n                switch (object.ctype) {\n                case \"STRING\":\n                case 0:\n                    message.ctype = 0;\n                    break;\n                case \"CORD\":\n                case 1:\n                    message.ctype = 1;\n                    break;\n                case \"STRING_PIECE\":\n                case 2:\n                    message.ctype = 2;\n                    break;\n                }\n                if (object.packed != null)\n                    message.packed = Boolean(object.packed);\n                switch (object.jstype) {\n                case \"JS_NORMAL\":\n                case 0:\n                    message.jstype = 0;\n                    break;\n                case \"JS_STRING\":\n                case 1:\n                    message.jstype = 1;\n                    break;\n                case \"JS_NUMBER\":\n                case 2:\n                    message.jstype = 2;\n                    break;\n                }\n                if (object.lazy != null)\n                    message.lazy = Boolean(object.lazy);\n                if (object.deprecated != null)\n                    message.deprecated = Boolean(object.deprecated);\n                if (object.weak != null)\n                    message.weak = Boolean(object.weak);\n                if (object.uninterpreted_option) {\n                    if (!Array.isArray(object.uninterpreted_option))\n                        throw TypeError(\".google.protobuf.FieldOptions.uninterpreted_option: array expected\");\n                    message.uninterpreted_option = [];\n                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {\n                        if (typeof object.uninterpreted_option[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.FieldOptions.uninterpreted_option: object expected\");\n                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);\n                    }\n                }\n                if (object[\".scalapb.field\"] != null) {\n                    if (typeof object[\".scalapb.field\"] !== \"object\")\n                        throw TypeError(\".google.protobuf.FieldOptions..scalapb.field: object expected\");\n                    message[\".scalapb.field\"] = $root.scalapb.FieldOptions.fromObject(object[\".scalapb.field\"]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.FieldOptions\n             * @static\n             * @param {google.protobuf.FieldOptions} message FieldOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FieldOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.uninterpreted_option = [];\n                if (options.defaults) {\n                    object.ctype = options.enums === String ? \"STRING\" : 0;\n                    object.packed = false;\n                    object.deprecated = false;\n                    object.lazy = false;\n                    object.jstype = options.enums === String ? \"JS_NORMAL\" : 0;\n                    object.weak = false;\n                    object[\".scalapb.field\"] = null;\n                }\n                if (message.ctype != null && message.hasOwnProperty(\"ctype\"))\n                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;\n                if (message.packed != null && message.hasOwnProperty(\"packed\"))\n                    object.packed = message.packed;\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    object.deprecated = message.deprecated;\n                if (message.lazy != null && message.hasOwnProperty(\"lazy\"))\n                    object.lazy = message.lazy;\n                if (message.jstype != null && message.hasOwnProperty(\"jstype\"))\n                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;\n                if (message.weak != null && message.hasOwnProperty(\"weak\"))\n                    object.weak = message.weak;\n                if (message.uninterpreted_option && message.uninterpreted_option.length) {\n                    object.uninterpreted_option = [];\n                    for (var j = 0; j < message.uninterpreted_option.length; ++j)\n                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);\n                }\n                if (message[\".scalapb.field\"] != null && message.hasOwnProperty(\".scalapb.field\"))\n                    object[\".scalapb.field\"] = $root.scalapb.FieldOptions.toObject(message[\".scalapb.field\"], options);\n                return object;\n            };\n\n            /**\n             * Converts this FieldOptions to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.FieldOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FieldOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * CType enum.\n             * @name google.protobuf.FieldOptions.CType\n             * @enum {string}\n             * @property {number} STRING=0 STRING value\n             * @property {number} CORD=1 CORD value\n             * @property {number} STRING_PIECE=2 STRING_PIECE value\n             */\n            FieldOptions.CType = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"STRING\"] = 0;\n                values[valuesById[1] = \"CORD\"] = 1;\n                values[valuesById[2] = \"STRING_PIECE\"] = 2;\n                return values;\n            })();\n\n            /**\n             * JSType enum.\n             * @name google.protobuf.FieldOptions.JSType\n             * @enum {string}\n             * @property {number} JS_NORMAL=0 JS_NORMAL value\n             * @property {number} JS_STRING=1 JS_STRING value\n             * @property {number} JS_NUMBER=2 JS_NUMBER value\n             */\n            FieldOptions.JSType = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"JS_NORMAL\"] = 0;\n                values[valuesById[1] = \"JS_STRING\"] = 1;\n                values[valuesById[2] = \"JS_NUMBER\"] = 2;\n                return values;\n            })();\n\n            return FieldOptions;\n        })();\n\n        protobuf.OneofOptions = (function() {\n\n            /**\n             * Properties of an OneofOptions.\n             * @memberof google.protobuf\n             * @interface IOneofOptions\n             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option\n             * @property {scalapb.IOneofOptions|null} [\".scalapb.oneof\"] OneofOptions .scalapb.oneof\n             */\n\n            /**\n             * Constructs a new OneofOptions.\n             * @memberof google.protobuf\n             * @classdesc Represents an OneofOptions.\n             * @implements IOneofOptions\n             * @constructor\n             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set\n             */\n            function OneofOptions(properties) {\n                this.uninterpreted_option = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * OneofOptions uninterpreted_option.\n             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option\n             * @memberof google.protobuf.OneofOptions\n             * @instance\n             */\n            OneofOptions.prototype.uninterpreted_option = $util.emptyArray;\n\n            /**\n             * OneofOptions .scalapb.oneof.\n             * @member {scalapb.IOneofOptions|null|undefined} .scalapb.oneof\n             * @memberof google.protobuf.OneofOptions\n             * @instance\n             */\n            OneofOptions.prototype[\".scalapb.oneof\"] = null;\n\n            /**\n             * Creates a new OneofOptions instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.OneofOptions\n             * @static\n             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set\n             * @returns {google.protobuf.OneofOptions} OneofOptions instance\n             */\n            OneofOptions.create = function create(properties) {\n                return new OneofOptions(properties);\n            };\n\n            /**\n             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.OneofOptions\n             * @static\n             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OneofOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.uninterpreted_option != null && message.uninterpreted_option.length)\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i)\n                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();\n                if (message[\".scalapb.oneof\"] != null && message.hasOwnProperty(\".scalapb.oneof\"))\n                    $root.scalapb.OneofOptions.encode(message[\".scalapb.oneof\"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.OneofOptions\n             * @static\n             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an OneofOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.OneofOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.OneofOptions} OneofOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OneofOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 999:\n                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))\n                            message.uninterpreted_option = [];\n                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));\n                        break;\n                    case 1020:\n                        message[\".scalapb.oneof\"] = $root.scalapb.OneofOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.OneofOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.OneofOptions} OneofOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OneofOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an OneofOptions message.\n             * @function verify\n             * @memberof google.protobuf.OneofOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            OneofOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.uninterpreted_option != null && message.hasOwnProperty(\"uninterpreted_option\")) {\n                    if (!Array.isArray(message.uninterpreted_option))\n                        return \"uninterpreted_option: array expected\";\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {\n                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);\n                        if (error)\n                            return \"uninterpreted_option.\" + error;\n                    }\n                }\n                if (message[\".scalapb.oneof\"] != null && message.hasOwnProperty(\".scalapb.oneof\")) {\n                    var error = $root.scalapb.OneofOptions.verify(message[\".scalapb.oneof\"]);\n                    if (error)\n                        return \".scalapb.oneof.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.OneofOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.OneofOptions} OneofOptions\n             */\n            OneofOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.OneofOptions)\n                    return object;\n                var message = new $root.google.protobuf.OneofOptions();\n                if (object.uninterpreted_option) {\n                    if (!Array.isArray(object.uninterpreted_option))\n                        throw TypeError(\".google.protobuf.OneofOptions.uninterpreted_option: array expected\");\n                    message.uninterpreted_option = [];\n                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {\n                        if (typeof object.uninterpreted_option[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.OneofOptions.uninterpreted_option: object expected\");\n                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);\n                    }\n                }\n                if (object[\".scalapb.oneof\"] != null) {\n                    if (typeof object[\".scalapb.oneof\"] !== \"object\")\n                        throw TypeError(\".google.protobuf.OneofOptions..scalapb.oneof: object expected\");\n                    message[\".scalapb.oneof\"] = $root.scalapb.OneofOptions.fromObject(object[\".scalapb.oneof\"]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.OneofOptions\n             * @static\n             * @param {google.protobuf.OneofOptions} message OneofOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            OneofOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.uninterpreted_option = [];\n                if (options.defaults)\n                    object[\".scalapb.oneof\"] = null;\n                if (message.uninterpreted_option && message.uninterpreted_option.length) {\n                    object.uninterpreted_option = [];\n                    for (var j = 0; j < message.uninterpreted_option.length; ++j)\n                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);\n                }\n                if (message[\".scalapb.oneof\"] != null && message.hasOwnProperty(\".scalapb.oneof\"))\n                    object[\".scalapb.oneof\"] = $root.scalapb.OneofOptions.toObject(message[\".scalapb.oneof\"], options);\n                return object;\n            };\n\n            /**\n             * Converts this OneofOptions to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.OneofOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            OneofOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return OneofOptions;\n        })();\n\n        protobuf.EnumOptions = (function() {\n\n            /**\n             * Properties of an EnumOptions.\n             * @memberof google.protobuf\n             * @interface IEnumOptions\n             * @property {boolean|null} [allow_alias] EnumOptions allow_alias\n             * @property {boolean|null} [deprecated] EnumOptions deprecated\n             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option\n             * @property {scalapb.IEnumOptions|null} [\".scalapb.enum_options\"] EnumOptions .scalapb.enum_options\n             */\n\n            /**\n             * Constructs a new EnumOptions.\n             * @memberof google.protobuf\n             * @classdesc Represents an EnumOptions.\n             * @implements IEnumOptions\n             * @constructor\n             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set\n             */\n            function EnumOptions(properties) {\n                this.uninterpreted_option = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * EnumOptions allow_alias.\n             * @member {boolean} allow_alias\n             * @memberof google.protobuf.EnumOptions\n             * @instance\n             */\n            EnumOptions.prototype.allow_alias = false;\n\n            /**\n             * EnumOptions deprecated.\n             * @member {boolean} deprecated\n             * @memberof google.protobuf.EnumOptions\n             * @instance\n             */\n            EnumOptions.prototype.deprecated = false;\n\n            /**\n             * EnumOptions uninterpreted_option.\n             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option\n             * @memberof google.protobuf.EnumOptions\n             * @instance\n             */\n            EnumOptions.prototype.uninterpreted_option = $util.emptyArray;\n\n            /**\n             * EnumOptions .scalapb.enum_options.\n             * @member {scalapb.IEnumOptions|null|undefined} .scalapb.enum_options\n             * @memberof google.protobuf.EnumOptions\n             * @instance\n             */\n            EnumOptions.prototype[\".scalapb.enum_options\"] = null;\n\n            /**\n             * Creates a new EnumOptions instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.EnumOptions\n             * @static\n             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set\n             * @returns {google.protobuf.EnumOptions} EnumOptions instance\n             */\n            EnumOptions.create = function create(properties) {\n                return new EnumOptions(properties);\n            };\n\n            /**\n             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.EnumOptions\n             * @static\n             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EnumOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.allow_alias != null && message.hasOwnProperty(\"allow_alias\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);\n                if (message.uninterpreted_option != null && message.uninterpreted_option.length)\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i)\n                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();\n                if (message[\".scalapb.enum_options\"] != null && message.hasOwnProperty(\".scalapb.enum_options\"))\n                    $root.scalapb.EnumOptions.encode(message[\".scalapb.enum_options\"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.EnumOptions\n             * @static\n             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an EnumOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.EnumOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.EnumOptions} EnumOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EnumOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 2:\n                        message.allow_alias = reader.bool();\n                        break;\n                    case 3:\n                        message.deprecated = reader.bool();\n                        break;\n                    case 999:\n                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))\n                            message.uninterpreted_option = [];\n                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));\n                        break;\n                    case 1020:\n                        message[\".scalapb.enum_options\"] = $root.scalapb.EnumOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.EnumOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.EnumOptions} EnumOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EnumOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an EnumOptions message.\n             * @function verify\n             * @memberof google.protobuf.EnumOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            EnumOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.allow_alias != null && message.hasOwnProperty(\"allow_alias\"))\n                    if (typeof message.allow_alias !== \"boolean\")\n                        return \"allow_alias: boolean expected\";\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    if (typeof message.deprecated !== \"boolean\")\n                        return \"deprecated: boolean expected\";\n                if (message.uninterpreted_option != null && message.hasOwnProperty(\"uninterpreted_option\")) {\n                    if (!Array.isArray(message.uninterpreted_option))\n                        return \"uninterpreted_option: array expected\";\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {\n                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);\n                        if (error)\n                            return \"uninterpreted_option.\" + error;\n                    }\n                }\n                if (message[\".scalapb.enum_options\"] != null && message.hasOwnProperty(\".scalapb.enum_options\")) {\n                    var error = $root.scalapb.EnumOptions.verify(message[\".scalapb.enum_options\"]);\n                    if (error)\n                        return \".scalapb.enum_options.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.EnumOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.EnumOptions} EnumOptions\n             */\n            EnumOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.EnumOptions)\n                    return object;\n                var message = new $root.google.protobuf.EnumOptions();\n                if (object.allow_alias != null)\n                    message.allow_alias = Boolean(object.allow_alias);\n                if (object.deprecated != null)\n                    message.deprecated = Boolean(object.deprecated);\n                if (object.uninterpreted_option) {\n                    if (!Array.isArray(object.uninterpreted_option))\n                        throw TypeError(\".google.protobuf.EnumOptions.uninterpreted_option: array expected\");\n                    message.uninterpreted_option = [];\n                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {\n                        if (typeof object.uninterpreted_option[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.EnumOptions.uninterpreted_option: object expected\");\n                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);\n                    }\n                }\n                if (object[\".scalapb.enum_options\"] != null) {\n                    if (typeof object[\".scalapb.enum_options\"] !== \"object\")\n                        throw TypeError(\".google.protobuf.EnumOptions..scalapb.enum_options: object expected\");\n                    message[\".scalapb.enum_options\"] = $root.scalapb.EnumOptions.fromObject(object[\".scalapb.enum_options\"]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.EnumOptions\n             * @static\n             * @param {google.protobuf.EnumOptions} message EnumOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            EnumOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.uninterpreted_option = [];\n                if (options.defaults) {\n                    object.allow_alias = false;\n                    object.deprecated = false;\n                    object[\".scalapb.enum_options\"] = null;\n                }\n                if (message.allow_alias != null && message.hasOwnProperty(\"allow_alias\"))\n                    object.allow_alias = message.allow_alias;\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    object.deprecated = message.deprecated;\n                if (message.uninterpreted_option && message.uninterpreted_option.length) {\n                    object.uninterpreted_option = [];\n                    for (var j = 0; j < message.uninterpreted_option.length; ++j)\n                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);\n                }\n                if (message[\".scalapb.enum_options\"] != null && message.hasOwnProperty(\".scalapb.enum_options\"))\n                    object[\".scalapb.enum_options\"] = $root.scalapb.EnumOptions.toObject(message[\".scalapb.enum_options\"], options);\n                return object;\n            };\n\n            /**\n             * Converts this EnumOptions to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.EnumOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            EnumOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return EnumOptions;\n        })();\n\n        protobuf.EnumValueOptions = (function() {\n\n            /**\n             * Properties of an EnumValueOptions.\n             * @memberof google.protobuf\n             * @interface IEnumValueOptions\n             * @property {boolean|null} [deprecated] EnumValueOptions deprecated\n             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option\n             * @property {scalapb.IEnumValueOptions|null} [\".scalapb.enum_value\"] EnumValueOptions .scalapb.enum_value\n             */\n\n            /**\n             * Constructs a new EnumValueOptions.\n             * @memberof google.protobuf\n             * @classdesc Represents an EnumValueOptions.\n             * @implements IEnumValueOptions\n             * @constructor\n             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set\n             */\n            function EnumValueOptions(properties) {\n                this.uninterpreted_option = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * EnumValueOptions deprecated.\n             * @member {boolean} deprecated\n             * @memberof google.protobuf.EnumValueOptions\n             * @instance\n             */\n            EnumValueOptions.prototype.deprecated = false;\n\n            /**\n             * EnumValueOptions uninterpreted_option.\n             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option\n             * @memberof google.protobuf.EnumValueOptions\n             * @instance\n             */\n            EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;\n\n            /**\n             * EnumValueOptions .scalapb.enum_value.\n             * @member {scalapb.IEnumValueOptions|null|undefined} .scalapb.enum_value\n             * @memberof google.protobuf.EnumValueOptions\n             * @instance\n             */\n            EnumValueOptions.prototype[\".scalapb.enum_value\"] = null;\n\n            /**\n             * Creates a new EnumValueOptions instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.EnumValueOptions\n             * @static\n             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set\n             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance\n             */\n            EnumValueOptions.create = function create(properties) {\n                return new EnumValueOptions(properties);\n            };\n\n            /**\n             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.EnumValueOptions\n             * @static\n             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EnumValueOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);\n                if (message.uninterpreted_option != null && message.uninterpreted_option.length)\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i)\n                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();\n                if (message[\".scalapb.enum_value\"] != null && message.hasOwnProperty(\".scalapb.enum_value\"))\n                    $root.scalapb.EnumValueOptions.encode(message[\".scalapb.enum_value\"], writer.uint32(/* id 1020, wireType 2 =*/8162).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.EnumValueOptions\n             * @static\n             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an EnumValueOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.EnumValueOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EnumValueOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.deprecated = reader.bool();\n                        break;\n                    case 999:\n                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))\n                            message.uninterpreted_option = [];\n                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));\n                        break;\n                    case 1020:\n                        message[\".scalapb.enum_value\"] = $root.scalapb.EnumValueOptions.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.EnumValueOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an EnumValueOptions message.\n             * @function verify\n             * @memberof google.protobuf.EnumValueOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            EnumValueOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    if (typeof message.deprecated !== \"boolean\")\n                        return \"deprecated: boolean expected\";\n                if (message.uninterpreted_option != null && message.hasOwnProperty(\"uninterpreted_option\")) {\n                    if (!Array.isArray(message.uninterpreted_option))\n                        return \"uninterpreted_option: array expected\";\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {\n                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);\n                        if (error)\n                            return \"uninterpreted_option.\" + error;\n                    }\n                }\n                if (message[\".scalapb.enum_value\"] != null && message.hasOwnProperty(\".scalapb.enum_value\")) {\n                    var error = $root.scalapb.EnumValueOptions.verify(message[\".scalapb.enum_value\"]);\n                    if (error)\n                        return \".scalapb.enum_value.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.EnumValueOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions\n             */\n            EnumValueOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.EnumValueOptions)\n                    return object;\n                var message = new $root.google.protobuf.EnumValueOptions();\n                if (object.deprecated != null)\n                    message.deprecated = Boolean(object.deprecated);\n                if (object.uninterpreted_option) {\n                    if (!Array.isArray(object.uninterpreted_option))\n                        throw TypeError(\".google.protobuf.EnumValueOptions.uninterpreted_option: array expected\");\n                    message.uninterpreted_option = [];\n                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {\n                        if (typeof object.uninterpreted_option[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.EnumValueOptions.uninterpreted_option: object expected\");\n                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);\n                    }\n                }\n                if (object[\".scalapb.enum_value\"] != null) {\n                    if (typeof object[\".scalapb.enum_value\"] !== \"object\")\n                        throw TypeError(\".google.protobuf.EnumValueOptions..scalapb.enum_value: object expected\");\n                    message[\".scalapb.enum_value\"] = $root.scalapb.EnumValueOptions.fromObject(object[\".scalapb.enum_value\"]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.EnumValueOptions\n             * @static\n             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            EnumValueOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.uninterpreted_option = [];\n                if (options.defaults) {\n                    object.deprecated = false;\n                    object[\".scalapb.enum_value\"] = null;\n                }\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    object.deprecated = message.deprecated;\n                if (message.uninterpreted_option && message.uninterpreted_option.length) {\n                    object.uninterpreted_option = [];\n                    for (var j = 0; j < message.uninterpreted_option.length; ++j)\n                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);\n                }\n                if (message[\".scalapb.enum_value\"] != null && message.hasOwnProperty(\".scalapb.enum_value\"))\n                    object[\".scalapb.enum_value\"] = $root.scalapb.EnumValueOptions.toObject(message[\".scalapb.enum_value\"], options);\n                return object;\n            };\n\n            /**\n             * Converts this EnumValueOptions to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.EnumValueOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            EnumValueOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return EnumValueOptions;\n        })();\n\n        protobuf.ServiceOptions = (function() {\n\n            /**\n             * Properties of a ServiceOptions.\n             * @memberof google.protobuf\n             * @interface IServiceOptions\n             * @property {boolean|null} [deprecated] ServiceOptions deprecated\n             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option\n             */\n\n            /**\n             * Constructs a new ServiceOptions.\n             * @memberof google.protobuf\n             * @classdesc Represents a ServiceOptions.\n             * @implements IServiceOptions\n             * @constructor\n             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set\n             */\n            function ServiceOptions(properties) {\n                this.uninterpreted_option = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ServiceOptions deprecated.\n             * @member {boolean} deprecated\n             * @memberof google.protobuf.ServiceOptions\n             * @instance\n             */\n            ServiceOptions.prototype.deprecated = false;\n\n            /**\n             * ServiceOptions uninterpreted_option.\n             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option\n             * @memberof google.protobuf.ServiceOptions\n             * @instance\n             */\n            ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;\n\n            /**\n             * Creates a new ServiceOptions instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.ServiceOptions\n             * @static\n             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set\n             * @returns {google.protobuf.ServiceOptions} ServiceOptions instance\n             */\n            ServiceOptions.create = function create(properties) {\n                return new ServiceOptions(properties);\n            };\n\n            /**\n             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.ServiceOptions\n             * @static\n             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ServiceOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);\n                if (message.uninterpreted_option != null && message.uninterpreted_option.length)\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i)\n                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.ServiceOptions\n             * @static\n             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ServiceOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.ServiceOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.ServiceOptions} ServiceOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ServiceOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 33:\n                        message.deprecated = reader.bool();\n                        break;\n                    case 999:\n                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))\n                            message.uninterpreted_option = [];\n                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.ServiceOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.ServiceOptions} ServiceOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ServiceOptions message.\n             * @function verify\n             * @memberof google.protobuf.ServiceOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ServiceOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    if (typeof message.deprecated !== \"boolean\")\n                        return \"deprecated: boolean expected\";\n                if (message.uninterpreted_option != null && message.hasOwnProperty(\"uninterpreted_option\")) {\n                    if (!Array.isArray(message.uninterpreted_option))\n                        return \"uninterpreted_option: array expected\";\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {\n                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);\n                        if (error)\n                            return \"uninterpreted_option.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.ServiceOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.ServiceOptions} ServiceOptions\n             */\n            ServiceOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.ServiceOptions)\n                    return object;\n                var message = new $root.google.protobuf.ServiceOptions();\n                if (object.deprecated != null)\n                    message.deprecated = Boolean(object.deprecated);\n                if (object.uninterpreted_option) {\n                    if (!Array.isArray(object.uninterpreted_option))\n                        throw TypeError(\".google.protobuf.ServiceOptions.uninterpreted_option: array expected\");\n                    message.uninterpreted_option = [];\n                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {\n                        if (typeof object.uninterpreted_option[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.ServiceOptions.uninterpreted_option: object expected\");\n                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.ServiceOptions\n             * @static\n             * @param {google.protobuf.ServiceOptions} message ServiceOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ServiceOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.uninterpreted_option = [];\n                if (options.defaults)\n                    object.deprecated = false;\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    object.deprecated = message.deprecated;\n                if (message.uninterpreted_option && message.uninterpreted_option.length) {\n                    object.uninterpreted_option = [];\n                    for (var j = 0; j < message.uninterpreted_option.length; ++j)\n                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ServiceOptions to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.ServiceOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ServiceOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ServiceOptions;\n        })();\n\n        protobuf.MethodOptions = (function() {\n\n            /**\n             * Properties of a MethodOptions.\n             * @memberof google.protobuf\n             * @interface IMethodOptions\n             * @property {boolean|null} [deprecated] MethodOptions deprecated\n             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option\n             */\n\n            /**\n             * Constructs a new MethodOptions.\n             * @memberof google.protobuf\n             * @classdesc Represents a MethodOptions.\n             * @implements IMethodOptions\n             * @constructor\n             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set\n             */\n            function MethodOptions(properties) {\n                this.uninterpreted_option = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * MethodOptions deprecated.\n             * @member {boolean} deprecated\n             * @memberof google.protobuf.MethodOptions\n             * @instance\n             */\n            MethodOptions.prototype.deprecated = false;\n\n            /**\n             * MethodOptions uninterpreted_option.\n             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option\n             * @memberof google.protobuf.MethodOptions\n             * @instance\n             */\n            MethodOptions.prototype.uninterpreted_option = $util.emptyArray;\n\n            /**\n             * Creates a new MethodOptions instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.MethodOptions\n             * @static\n             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set\n             * @returns {google.protobuf.MethodOptions} MethodOptions instance\n             */\n            MethodOptions.create = function create(properties) {\n                return new MethodOptions(properties);\n            };\n\n            /**\n             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.MethodOptions\n             * @static\n             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MethodOptions.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);\n                if (message.uninterpreted_option != null && message.uninterpreted_option.length)\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i)\n                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.MethodOptions\n             * @static\n             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a MethodOptions message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.MethodOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.MethodOptions} MethodOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MethodOptions.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 33:\n                        message.deprecated = reader.bool();\n                        break;\n                    case 999:\n                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))\n                            message.uninterpreted_option = [];\n                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.MethodOptions\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.MethodOptions} MethodOptions\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MethodOptions.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a MethodOptions message.\n             * @function verify\n             * @memberof google.protobuf.MethodOptions\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            MethodOptions.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    if (typeof message.deprecated !== \"boolean\")\n                        return \"deprecated: boolean expected\";\n                if (message.uninterpreted_option != null && message.hasOwnProperty(\"uninterpreted_option\")) {\n                    if (!Array.isArray(message.uninterpreted_option))\n                        return \"uninterpreted_option: array expected\";\n                    for (var i = 0; i < message.uninterpreted_option.length; ++i) {\n                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);\n                        if (error)\n                            return \"uninterpreted_option.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.MethodOptions\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.MethodOptions} MethodOptions\n             */\n            MethodOptions.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.MethodOptions)\n                    return object;\n                var message = new $root.google.protobuf.MethodOptions();\n                if (object.deprecated != null)\n                    message.deprecated = Boolean(object.deprecated);\n                if (object.uninterpreted_option) {\n                    if (!Array.isArray(object.uninterpreted_option))\n                        throw TypeError(\".google.protobuf.MethodOptions.uninterpreted_option: array expected\");\n                    message.uninterpreted_option = [];\n                    for (var i = 0; i < object.uninterpreted_option.length; ++i) {\n                        if (typeof object.uninterpreted_option[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.MethodOptions.uninterpreted_option: object expected\");\n                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.MethodOptions\n             * @static\n             * @param {google.protobuf.MethodOptions} message MethodOptions\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            MethodOptions.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.uninterpreted_option = [];\n                if (options.defaults)\n                    object.deprecated = false;\n                if (message.deprecated != null && message.hasOwnProperty(\"deprecated\"))\n                    object.deprecated = message.deprecated;\n                if (message.uninterpreted_option && message.uninterpreted_option.length) {\n                    object.uninterpreted_option = [];\n                    for (var j = 0; j < message.uninterpreted_option.length; ++j)\n                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this MethodOptions to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.MethodOptions\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            MethodOptions.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return MethodOptions;\n        })();\n\n        protobuf.UninterpretedOption = (function() {\n\n            /**\n             * Properties of an UninterpretedOption.\n             * @memberof google.protobuf\n             * @interface IUninterpretedOption\n             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name\n             * @property {string|null} [identifier_value] UninterpretedOption identifier_value\n             * @property {number|Long|null} [positive_int_value] UninterpretedOption positive_int_value\n             * @property {number|Long|null} [negative_int_value] UninterpretedOption negative_int_value\n             * @property {number|null} [double_value] UninterpretedOption double_value\n             * @property {Uint8Array|null} [string_value] UninterpretedOption string_value\n             * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value\n             */\n\n            /**\n             * Constructs a new UninterpretedOption.\n             * @memberof google.protobuf\n             * @classdesc Represents an UninterpretedOption.\n             * @implements IUninterpretedOption\n             * @constructor\n             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set\n             */\n            function UninterpretedOption(properties) {\n                this.name = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * UninterpretedOption name.\n             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name\n             * @memberof google.protobuf.UninterpretedOption\n             * @instance\n             */\n            UninterpretedOption.prototype.name = $util.emptyArray;\n\n            /**\n             * UninterpretedOption identifier_value.\n             * @member {string} identifier_value\n             * @memberof google.protobuf.UninterpretedOption\n             * @instance\n             */\n            UninterpretedOption.prototype.identifier_value = \"\";\n\n            /**\n             * UninterpretedOption positive_int_value.\n             * @member {number|Long} positive_int_value\n             * @memberof google.protobuf.UninterpretedOption\n             * @instance\n             */\n            UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * UninterpretedOption negative_int_value.\n             * @member {number|Long} negative_int_value\n             * @memberof google.protobuf.UninterpretedOption\n             * @instance\n             */\n            UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * UninterpretedOption double_value.\n             * @member {number} double_value\n             * @memberof google.protobuf.UninterpretedOption\n             * @instance\n             */\n            UninterpretedOption.prototype.double_value = 0;\n\n            /**\n             * UninterpretedOption string_value.\n             * @member {Uint8Array} string_value\n             * @memberof google.protobuf.UninterpretedOption\n             * @instance\n             */\n            UninterpretedOption.prototype.string_value = $util.newBuffer([]);\n\n            /**\n             * UninterpretedOption aggregate_value.\n             * @member {string} aggregate_value\n             * @memberof google.protobuf.UninterpretedOption\n             * @instance\n             */\n            UninterpretedOption.prototype.aggregate_value = \"\";\n\n            /**\n             * Creates a new UninterpretedOption instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.UninterpretedOption\n             * @static\n             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set\n             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance\n             */\n            UninterpretedOption.create = function create(properties) {\n                return new UninterpretedOption(properties);\n            };\n\n            /**\n             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.UninterpretedOption\n             * @static\n             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            UninterpretedOption.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.name.length)\n                    for (var i = 0; i < message.name.length; ++i)\n                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.identifier_value != null && message.hasOwnProperty(\"identifier_value\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);\n                if (message.positive_int_value != null && message.hasOwnProperty(\"positive_int_value\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);\n                if (message.negative_int_value != null && message.hasOwnProperty(\"negative_int_value\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);\n                if (message.double_value != null && message.hasOwnProperty(\"double_value\"))\n                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);\n                if (message.string_value != null && message.hasOwnProperty(\"string_value\"))\n                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);\n                if (message.aggregate_value != null && message.hasOwnProperty(\"aggregate_value\"))\n                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.UninterpretedOption\n             * @static\n             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an UninterpretedOption message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.UninterpretedOption\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            UninterpretedOption.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 2:\n                        if (!(message.name && message.name.length))\n                            message.name = [];\n                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));\n                        break;\n                    case 3:\n                        message.identifier_value = reader.string();\n                        break;\n                    case 4:\n                        message.positive_int_value = reader.uint64();\n                        break;\n                    case 5:\n                        message.negative_int_value = reader.int64();\n                        break;\n                    case 6:\n                        message.double_value = reader.double();\n                        break;\n                    case 7:\n                        message.string_value = reader.bytes();\n                        break;\n                    case 8:\n                        message.aggregate_value = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.UninterpretedOption\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an UninterpretedOption message.\n             * @function verify\n             * @memberof google.protobuf.UninterpretedOption\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            UninterpretedOption.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\")) {\n                    if (!Array.isArray(message.name))\n                        return \"name: array expected\";\n                    for (var i = 0; i < message.name.length; ++i) {\n                        var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);\n                        if (error)\n                            return \"name.\" + error;\n                    }\n                }\n                if (message.identifier_value != null && message.hasOwnProperty(\"identifier_value\"))\n                    if (!$util.isString(message.identifier_value))\n                        return \"identifier_value: string expected\";\n                if (message.positive_int_value != null && message.hasOwnProperty(\"positive_int_value\"))\n                    if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))\n                        return \"positive_int_value: integer|Long expected\";\n                if (message.negative_int_value != null && message.hasOwnProperty(\"negative_int_value\"))\n                    if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))\n                        return \"negative_int_value: integer|Long expected\";\n                if (message.double_value != null && message.hasOwnProperty(\"double_value\"))\n                    if (typeof message.double_value !== \"number\")\n                        return \"double_value: number expected\";\n                if (message.string_value != null && message.hasOwnProperty(\"string_value\"))\n                    if (!(message.string_value && typeof message.string_value.length === \"number\" || $util.isString(message.string_value)))\n                        return \"string_value: buffer expected\";\n                if (message.aggregate_value != null && message.hasOwnProperty(\"aggregate_value\"))\n                    if (!$util.isString(message.aggregate_value))\n                        return \"aggregate_value: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.UninterpretedOption\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption\n             */\n            UninterpretedOption.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.UninterpretedOption)\n                    return object;\n                var message = new $root.google.protobuf.UninterpretedOption();\n                if (object.name) {\n                    if (!Array.isArray(object.name))\n                        throw TypeError(\".google.protobuf.UninterpretedOption.name: array expected\");\n                    message.name = [];\n                    for (var i = 0; i < object.name.length; ++i) {\n                        if (typeof object.name[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.UninterpretedOption.name: object expected\");\n                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);\n                    }\n                }\n                if (object.identifier_value != null)\n                    message.identifier_value = String(object.identifier_value);\n                if (object.positive_int_value != null)\n                    if ($util.Long)\n                        (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;\n                    else if (typeof object.positive_int_value === \"string\")\n                        message.positive_int_value = parseInt(object.positive_int_value, 10);\n                    else if (typeof object.positive_int_value === \"number\")\n                        message.positive_int_value = object.positive_int_value;\n                    else if (typeof object.positive_int_value === \"object\")\n                        message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);\n                if (object.negative_int_value != null)\n                    if ($util.Long)\n                        (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;\n                    else if (typeof object.negative_int_value === \"string\")\n                        message.negative_int_value = parseInt(object.negative_int_value, 10);\n                    else if (typeof object.negative_int_value === \"number\")\n                        message.negative_int_value = object.negative_int_value;\n                    else if (typeof object.negative_int_value === \"object\")\n                        message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();\n                if (object.double_value != null)\n                    message.double_value = Number(object.double_value);\n                if (object.string_value != null)\n                    if (typeof object.string_value === \"string\")\n                        $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);\n                    else if (object.string_value.length)\n                        message.string_value = object.string_value;\n                if (object.aggregate_value != null)\n                    message.aggregate_value = String(object.aggregate_value);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.UninterpretedOption\n             * @static\n             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            UninterpretedOption.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.name = [];\n                if (options.defaults) {\n                    object.identifier_value = \"\";\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.positive_int_value = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.negative_int_value = options.longs === String ? \"0\" : 0;\n                    object.double_value = 0;\n                    if (options.bytes === String)\n                        object.string_value = \"\";\n                    else {\n                        object.string_value = [];\n                        if (options.bytes !== Array)\n                            object.string_value = $util.newBuffer(object.string_value);\n                    }\n                    object.aggregate_value = \"\";\n                }\n                if (message.name && message.name.length) {\n                    object.name = [];\n                    for (var j = 0; j < message.name.length; ++j)\n                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);\n                }\n                if (message.identifier_value != null && message.hasOwnProperty(\"identifier_value\"))\n                    object.identifier_value = message.identifier_value;\n                if (message.positive_int_value != null && message.hasOwnProperty(\"positive_int_value\"))\n                    if (typeof message.positive_int_value === \"number\")\n                        object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;\n                    else\n                        object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;\n                if (message.negative_int_value != null && message.hasOwnProperty(\"negative_int_value\"))\n                    if (typeof message.negative_int_value === \"number\")\n                        object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;\n                    else\n                        object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;\n                if (message.double_value != null && message.hasOwnProperty(\"double_value\"))\n                    object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;\n                if (message.string_value != null && message.hasOwnProperty(\"string_value\"))\n                    object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;\n                if (message.aggregate_value != null && message.hasOwnProperty(\"aggregate_value\"))\n                    object.aggregate_value = message.aggregate_value;\n                return object;\n            };\n\n            /**\n             * Converts this UninterpretedOption to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.UninterpretedOption\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            UninterpretedOption.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            UninterpretedOption.NamePart = (function() {\n\n                /**\n                 * Properties of a NamePart.\n                 * @memberof google.protobuf.UninterpretedOption\n                 * @interface INamePart\n                 * @property {string} name_part NamePart name_part\n                 * @property {boolean} is_extension NamePart is_extension\n                 */\n\n                /**\n                 * Constructs a new NamePart.\n                 * @memberof google.protobuf.UninterpretedOption\n                 * @classdesc Represents a NamePart.\n                 * @implements INamePart\n                 * @constructor\n                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set\n                 */\n                function NamePart(properties) {\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * NamePart name_part.\n                 * @member {string} name_part\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @instance\n                 */\n                NamePart.prototype.name_part = \"\";\n\n                /**\n                 * NamePart is_extension.\n                 * @member {boolean} is_extension\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @instance\n                 */\n                NamePart.prototype.is_extension = false;\n\n                /**\n                 * Creates a new NamePart instance using the specified properties.\n                 * @function create\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @static\n                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set\n                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance\n                 */\n                NamePart.create = function create(properties) {\n                    return new NamePart(properties);\n                };\n\n                /**\n                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.\n                 * @function encode\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @static\n                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                NamePart.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @static\n                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                NamePart.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a NamePart message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                NamePart.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            message.name_part = reader.string();\n                            break;\n                        case 2:\n                            message.is_extension = reader.bool();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    if (!message.hasOwnProperty(\"name_part\"))\n                        throw $util.ProtocolError(\"missing required 'name_part'\", { instance: message });\n                    if (!message.hasOwnProperty(\"is_extension\"))\n                        throw $util.ProtocolError(\"missing required 'is_extension'\", { instance: message });\n                    return message;\n                };\n\n                /**\n                 * Decodes a NamePart message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                NamePart.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a NamePart message.\n                 * @function verify\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                NamePart.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (!$util.isString(message.name_part))\n                        return \"name_part: string expected\";\n                    if (typeof message.is_extension !== \"boolean\")\n                        return \"is_extension: boolean expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart\n                 */\n                NamePart.fromObject = function fromObject(object) {\n                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)\n                        return object;\n                    var message = new $root.google.protobuf.UninterpretedOption.NamePart();\n                    if (object.name_part != null)\n                        message.name_part = String(object.name_part);\n                    if (object.is_extension != null)\n                        message.is_extension = Boolean(object.is_extension);\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @static\n                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                NamePart.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.defaults) {\n                        object.name_part = \"\";\n                        object.is_extension = false;\n                    }\n                    if (message.name_part != null && message.hasOwnProperty(\"name_part\"))\n                        object.name_part = message.name_part;\n                    if (message.is_extension != null && message.hasOwnProperty(\"is_extension\"))\n                        object.is_extension = message.is_extension;\n                    return object;\n                };\n\n                /**\n                 * Converts this NamePart to JSON.\n                 * @function toJSON\n                 * @memberof google.protobuf.UninterpretedOption.NamePart\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                NamePart.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return NamePart;\n            })();\n\n            return UninterpretedOption;\n        })();\n\n        protobuf.SourceCodeInfo = (function() {\n\n            /**\n             * Properties of a SourceCodeInfo.\n             * @memberof google.protobuf\n             * @interface ISourceCodeInfo\n             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location\n             */\n\n            /**\n             * Constructs a new SourceCodeInfo.\n             * @memberof google.protobuf\n             * @classdesc Represents a SourceCodeInfo.\n             * @implements ISourceCodeInfo\n             * @constructor\n             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set\n             */\n            function SourceCodeInfo(properties) {\n                this.location = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SourceCodeInfo location.\n             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location\n             * @memberof google.protobuf.SourceCodeInfo\n             * @instance\n             */\n            SourceCodeInfo.prototype.location = $util.emptyArray;\n\n            /**\n             * Creates a new SourceCodeInfo instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.SourceCodeInfo\n             * @static\n             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set\n             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance\n             */\n            SourceCodeInfo.create = function create(properties) {\n                return new SourceCodeInfo(properties);\n            };\n\n            /**\n             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.SourceCodeInfo\n             * @static\n             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SourceCodeInfo.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.location != null && message.location.length)\n                    for (var i = 0; i < message.location.length; ++i)\n                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.SourceCodeInfo\n             * @static\n             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SourceCodeInfo message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.SourceCodeInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SourceCodeInfo.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.location && message.location.length))\n                            message.location = [];\n                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.SourceCodeInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SourceCodeInfo message.\n             * @function verify\n             * @memberof google.protobuf.SourceCodeInfo\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SourceCodeInfo.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.location != null && message.hasOwnProperty(\"location\")) {\n                    if (!Array.isArray(message.location))\n                        return \"location: array expected\";\n                    for (var i = 0; i < message.location.length; ++i) {\n                        var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);\n                        if (error)\n                            return \"location.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.SourceCodeInfo\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo\n             */\n            SourceCodeInfo.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.SourceCodeInfo)\n                    return object;\n                var message = new $root.google.protobuf.SourceCodeInfo();\n                if (object.location) {\n                    if (!Array.isArray(object.location))\n                        throw TypeError(\".google.protobuf.SourceCodeInfo.location: array expected\");\n                    message.location = [];\n                    for (var i = 0; i < object.location.length; ++i) {\n                        if (typeof object.location[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.SourceCodeInfo.location: object expected\");\n                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.SourceCodeInfo\n             * @static\n             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SourceCodeInfo.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.location = [];\n                if (message.location && message.location.length) {\n                    object.location = [];\n                    for (var j = 0; j < message.location.length; ++j)\n                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SourceCodeInfo to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.SourceCodeInfo\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SourceCodeInfo.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            SourceCodeInfo.Location = (function() {\n\n                /**\n                 * Properties of a Location.\n                 * @memberof google.protobuf.SourceCodeInfo\n                 * @interface ILocation\n                 * @property {Array.<number>|null} [path] Location path\n                 * @property {Array.<number>|null} [span] Location span\n                 * @property {string|null} [leading_comments] Location leading_comments\n                 * @property {string|null} [trailing_comments] Location trailing_comments\n                 * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments\n                 */\n\n                /**\n                 * Constructs a new Location.\n                 * @memberof google.protobuf.SourceCodeInfo\n                 * @classdesc Represents a Location.\n                 * @implements ILocation\n                 * @constructor\n                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set\n                 */\n                function Location(properties) {\n                    this.path = [];\n                    this.span = [];\n                    this.leading_detached_comments = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Location path.\n                 * @member {Array.<number>} path\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @instance\n                 */\n                Location.prototype.path = $util.emptyArray;\n\n                /**\n                 * Location span.\n                 * @member {Array.<number>} span\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @instance\n                 */\n                Location.prototype.span = $util.emptyArray;\n\n                /**\n                 * Location leading_comments.\n                 * @member {string} leading_comments\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @instance\n                 */\n                Location.prototype.leading_comments = \"\";\n\n                /**\n                 * Location trailing_comments.\n                 * @member {string} trailing_comments\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @instance\n                 */\n                Location.prototype.trailing_comments = \"\";\n\n                /**\n                 * Location leading_detached_comments.\n                 * @member {Array.<string>} leading_detached_comments\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @instance\n                 */\n                Location.prototype.leading_detached_comments = $util.emptyArray;\n\n                /**\n                 * Creates a new Location instance using the specified properties.\n                 * @function create\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @static\n                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set\n                 * @returns {google.protobuf.SourceCodeInfo.Location} Location instance\n                 */\n                Location.create = function create(properties) {\n                    return new Location(properties);\n                };\n\n                /**\n                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.\n                 * @function encode\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @static\n                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Location.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.path != null && message.path.length) {\n                        writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                        for (var i = 0; i < message.path.length; ++i)\n                            writer.int32(message.path[i]);\n                        writer.ldelim();\n                    }\n                    if (message.span != null && message.span.length) {\n                        writer.uint32(/* id 2, wireType 2 =*/18).fork();\n                        for (var i = 0; i < message.span.length; ++i)\n                            writer.int32(message.span[i]);\n                        writer.ldelim();\n                    }\n                    if (message.leading_comments != null && message.hasOwnProperty(\"leading_comments\"))\n                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);\n                    if (message.trailing_comments != null && message.hasOwnProperty(\"trailing_comments\"))\n                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);\n                    if (message.leading_detached_comments != null && message.leading_detached_comments.length)\n                        for (var i = 0; i < message.leading_detached_comments.length; ++i)\n                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @static\n                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Location.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes a Location message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {google.protobuf.SourceCodeInfo.Location} Location\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Location.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.path && message.path.length))\n                                message.path = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.path.push(reader.int32());\n                            } else\n                                message.path.push(reader.int32());\n                            break;\n                        case 2:\n                            if (!(message.span && message.span.length))\n                                message.span = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.span.push(reader.int32());\n                            } else\n                                message.span.push(reader.int32());\n                            break;\n                        case 3:\n                            message.leading_comments = reader.string();\n                            break;\n                        case 4:\n                            message.trailing_comments = reader.string();\n                            break;\n                        case 6:\n                            if (!(message.leading_detached_comments && message.leading_detached_comments.length))\n                                message.leading_detached_comments = [];\n                            message.leading_detached_comments.push(reader.string());\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes a Location message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {google.protobuf.SourceCodeInfo.Location} Location\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Location.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies a Location message.\n                 * @function verify\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Location.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.path != null && message.hasOwnProperty(\"path\")) {\n                        if (!Array.isArray(message.path))\n                            return \"path: array expected\";\n                        for (var i = 0; i < message.path.length; ++i)\n                            if (!$util.isInteger(message.path[i]))\n                                return \"path: integer[] expected\";\n                    }\n                    if (message.span != null && message.hasOwnProperty(\"span\")) {\n                        if (!Array.isArray(message.span))\n                            return \"span: array expected\";\n                        for (var i = 0; i < message.span.length; ++i)\n                            if (!$util.isInteger(message.span[i]))\n                                return \"span: integer[] expected\";\n                    }\n                    if (message.leading_comments != null && message.hasOwnProperty(\"leading_comments\"))\n                        if (!$util.isString(message.leading_comments))\n                            return \"leading_comments: string expected\";\n                    if (message.trailing_comments != null && message.hasOwnProperty(\"trailing_comments\"))\n                        if (!$util.isString(message.trailing_comments))\n                            return \"trailing_comments: string expected\";\n                    if (message.leading_detached_comments != null && message.hasOwnProperty(\"leading_detached_comments\")) {\n                        if (!Array.isArray(message.leading_detached_comments))\n                            return \"leading_detached_comments: array expected\";\n                        for (var i = 0; i < message.leading_detached_comments.length; ++i)\n                            if (!$util.isString(message.leading_detached_comments[i]))\n                                return \"leading_detached_comments: string[] expected\";\n                    }\n                    return null;\n                };\n\n                /**\n                 * Creates a Location message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {google.protobuf.SourceCodeInfo.Location} Location\n                 */\n                Location.fromObject = function fromObject(object) {\n                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)\n                        return object;\n                    var message = new $root.google.protobuf.SourceCodeInfo.Location();\n                    if (object.path) {\n                        if (!Array.isArray(object.path))\n                            throw TypeError(\".google.protobuf.SourceCodeInfo.Location.path: array expected\");\n                        message.path = [];\n                        for (var i = 0; i < object.path.length; ++i)\n                            message.path[i] = object.path[i] | 0;\n                    }\n                    if (object.span) {\n                        if (!Array.isArray(object.span))\n                            throw TypeError(\".google.protobuf.SourceCodeInfo.Location.span: array expected\");\n                        message.span = [];\n                        for (var i = 0; i < object.span.length; ++i)\n                            message.span[i] = object.span[i] | 0;\n                    }\n                    if (object.leading_comments != null)\n                        message.leading_comments = String(object.leading_comments);\n                    if (object.trailing_comments != null)\n                        message.trailing_comments = String(object.trailing_comments);\n                    if (object.leading_detached_comments) {\n                        if (!Array.isArray(object.leading_detached_comments))\n                            throw TypeError(\".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected\");\n                        message.leading_detached_comments = [];\n                        for (var i = 0; i < object.leading_detached_comments.length; ++i)\n                            message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);\n                    }\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from a Location message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @static\n                 * @param {google.protobuf.SourceCodeInfo.Location} message Location\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Location.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults) {\n                        object.path = [];\n                        object.span = [];\n                        object.leading_detached_comments = [];\n                    }\n                    if (options.defaults) {\n                        object.leading_comments = \"\";\n                        object.trailing_comments = \"\";\n                    }\n                    if (message.path && message.path.length) {\n                        object.path = [];\n                        for (var j = 0; j < message.path.length; ++j)\n                            object.path[j] = message.path[j];\n                    }\n                    if (message.span && message.span.length) {\n                        object.span = [];\n                        for (var j = 0; j < message.span.length; ++j)\n                            object.span[j] = message.span[j];\n                    }\n                    if (message.leading_comments != null && message.hasOwnProperty(\"leading_comments\"))\n                        object.leading_comments = message.leading_comments;\n                    if (message.trailing_comments != null && message.hasOwnProperty(\"trailing_comments\"))\n                        object.trailing_comments = message.trailing_comments;\n                    if (message.leading_detached_comments && message.leading_detached_comments.length) {\n                        object.leading_detached_comments = [];\n                        for (var j = 0; j < message.leading_detached_comments.length; ++j)\n                            object.leading_detached_comments[j] = message.leading_detached_comments[j];\n                    }\n                    return object;\n                };\n\n                /**\n                 * Converts this Location to JSON.\n                 * @function toJSON\n                 * @memberof google.protobuf.SourceCodeInfo.Location\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Location.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Location;\n            })();\n\n            return SourceCodeInfo;\n        })();\n\n        protobuf.GeneratedCodeInfo = (function() {\n\n            /**\n             * Properties of a GeneratedCodeInfo.\n             * @memberof google.protobuf\n             * @interface IGeneratedCodeInfo\n             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation\n             */\n\n            /**\n             * Constructs a new GeneratedCodeInfo.\n             * @memberof google.protobuf\n             * @classdesc Represents a GeneratedCodeInfo.\n             * @implements IGeneratedCodeInfo\n             * @constructor\n             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set\n             */\n            function GeneratedCodeInfo(properties) {\n                this.annotation = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * GeneratedCodeInfo annotation.\n             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @instance\n             */\n            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;\n\n            /**\n             * Creates a new GeneratedCodeInfo instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @static\n             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set\n             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance\n             */\n            GeneratedCodeInfo.create = function create(properties) {\n                return new GeneratedCodeInfo(properties);\n            };\n\n            /**\n             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @static\n             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            GeneratedCodeInfo.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.annotation != null && message.annotation.length)\n                    for (var i = 0; i < message.annotation.length; ++i)\n                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @static\n             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            GeneratedCodeInfo.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.annotation && message.annotation.length))\n                            message.annotation = [];\n                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a GeneratedCodeInfo message.\n             * @function verify\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            GeneratedCodeInfo.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.annotation != null && message.hasOwnProperty(\"annotation\")) {\n                    if (!Array.isArray(message.annotation))\n                        return \"annotation: array expected\";\n                    for (var i = 0; i < message.annotation.length; ++i) {\n                        var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);\n                        if (error)\n                            return \"annotation.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo\n             */\n            GeneratedCodeInfo.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)\n                    return object;\n                var message = new $root.google.protobuf.GeneratedCodeInfo();\n                if (object.annotation) {\n                    if (!Array.isArray(object.annotation))\n                        throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: array expected\");\n                    message.annotation = [];\n                    for (var i = 0; i < object.annotation.length; ++i) {\n                        if (typeof object.annotation[i] !== \"object\")\n                            throw TypeError(\".google.protobuf.GeneratedCodeInfo.annotation: object expected\");\n                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @static\n             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            GeneratedCodeInfo.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.annotation = [];\n                if (message.annotation && message.annotation.length) {\n                    object.annotation = [];\n                    for (var j = 0; j < message.annotation.length; ++j)\n                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this GeneratedCodeInfo to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.GeneratedCodeInfo\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            GeneratedCodeInfo.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            GeneratedCodeInfo.Annotation = (function() {\n\n                /**\n                 * Properties of an Annotation.\n                 * @memberof google.protobuf.GeneratedCodeInfo\n                 * @interface IAnnotation\n                 * @property {Array.<number>|null} [path] Annotation path\n                 * @property {string|null} [source_file] Annotation source_file\n                 * @property {number|null} [begin] Annotation begin\n                 * @property {number|null} [end] Annotation end\n                 */\n\n                /**\n                 * Constructs a new Annotation.\n                 * @memberof google.protobuf.GeneratedCodeInfo\n                 * @classdesc Represents an Annotation.\n                 * @implements IAnnotation\n                 * @constructor\n                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set\n                 */\n                function Annotation(properties) {\n                    this.path = [];\n                    if (properties)\n                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                            if (properties[keys[i]] != null)\n                                this[keys[i]] = properties[keys[i]];\n                }\n\n                /**\n                 * Annotation path.\n                 * @member {Array.<number>} path\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @instance\n                 */\n                Annotation.prototype.path = $util.emptyArray;\n\n                /**\n                 * Annotation source_file.\n                 * @member {string} source_file\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @instance\n                 */\n                Annotation.prototype.source_file = \"\";\n\n                /**\n                 * Annotation begin.\n                 * @member {number} begin\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @instance\n                 */\n                Annotation.prototype.begin = 0;\n\n                /**\n                 * Annotation end.\n                 * @member {number} end\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @instance\n                 */\n                Annotation.prototype.end = 0;\n\n                /**\n                 * Creates a new Annotation instance using the specified properties.\n                 * @function create\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @static\n                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set\n                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance\n                 */\n                Annotation.create = function create(properties) {\n                    return new Annotation(properties);\n                };\n\n                /**\n                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.\n                 * @function encode\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @static\n                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Annotation.encode = function encode(message, writer) {\n                    if (!writer)\n                        writer = $Writer.create();\n                    if (message.path != null && message.path.length) {\n                        writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                        for (var i = 0; i < message.path.length; ++i)\n                            writer.int32(message.path[i]);\n                        writer.ldelim();\n                    }\n                    if (message.source_file != null && message.hasOwnProperty(\"source_file\"))\n                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);\n                    if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);\n                    if (message.end != null && message.hasOwnProperty(\"end\"))\n                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);\n                    return writer;\n                };\n\n                /**\n                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.\n                 * @function encodeDelimited\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @static\n                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode\n                 * @param {$protobuf.Writer} [writer] Writer to encode to\n                 * @returns {$protobuf.Writer} Writer\n                 */\n                Annotation.encodeDelimited = function encodeDelimited(message, writer) {\n                    return this.encode(message, writer).ldelim();\n                };\n\n                /**\n                 * Decodes an Annotation message from the specified reader or buffer.\n                 * @function decode\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @param {number} [length] Message length if known beforehand\n                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Annotation.decode = function decode(reader, length) {\n                    if (!(reader instanceof $Reader))\n                        reader = $Reader.create(reader);\n                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();\n                    while (reader.pos < end) {\n                        var tag = reader.uint32();\n                        switch (tag >>> 3) {\n                        case 1:\n                            if (!(message.path && message.path.length))\n                                message.path = [];\n                            if ((tag & 7) === 2) {\n                                var end2 = reader.uint32() + reader.pos;\n                                while (reader.pos < end2)\n                                    message.path.push(reader.int32());\n                            } else\n                                message.path.push(reader.int32());\n                            break;\n                        case 2:\n                            message.source_file = reader.string();\n                            break;\n                        case 3:\n                            message.begin = reader.int32();\n                            break;\n                        case 4:\n                            message.end = reader.int32();\n                            break;\n                        default:\n                            reader.skipType(tag & 7);\n                            break;\n                        }\n                    }\n                    return message;\n                };\n\n                /**\n                 * Decodes an Annotation message from the specified reader or buffer, length delimited.\n                 * @function decodeDelimited\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @static\n                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation\n                 * @throws {Error} If the payload is not a reader or valid buffer\n                 * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                 */\n                Annotation.decodeDelimited = function decodeDelimited(reader) {\n                    if (!(reader instanceof $Reader))\n                        reader = new $Reader(reader);\n                    return this.decode(reader, reader.uint32());\n                };\n\n                /**\n                 * Verifies an Annotation message.\n                 * @function verify\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @static\n                 * @param {Object.<string,*>} message Plain object to verify\n                 * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                 */\n                Annotation.verify = function verify(message) {\n                    if (typeof message !== \"object\" || message === null)\n                        return \"object expected\";\n                    if (message.path != null && message.hasOwnProperty(\"path\")) {\n                        if (!Array.isArray(message.path))\n                            return \"path: array expected\";\n                        for (var i = 0; i < message.path.length; ++i)\n                            if (!$util.isInteger(message.path[i]))\n                                return \"path: integer[] expected\";\n                    }\n                    if (message.source_file != null && message.hasOwnProperty(\"source_file\"))\n                        if (!$util.isString(message.source_file))\n                            return \"source_file: string expected\";\n                    if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                        if (!$util.isInteger(message.begin))\n                            return \"begin: integer expected\";\n                    if (message.end != null && message.hasOwnProperty(\"end\"))\n                        if (!$util.isInteger(message.end))\n                            return \"end: integer expected\";\n                    return null;\n                };\n\n                /**\n                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.\n                 * @function fromObject\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @static\n                 * @param {Object.<string,*>} object Plain object\n                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation\n                 */\n                Annotation.fromObject = function fromObject(object) {\n                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)\n                        return object;\n                    var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();\n                    if (object.path) {\n                        if (!Array.isArray(object.path))\n                            throw TypeError(\".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected\");\n                        message.path = [];\n                        for (var i = 0; i < object.path.length; ++i)\n                            message.path[i] = object.path[i] | 0;\n                    }\n                    if (object.source_file != null)\n                        message.source_file = String(object.source_file);\n                    if (object.begin != null)\n                        message.begin = object.begin | 0;\n                    if (object.end != null)\n                        message.end = object.end | 0;\n                    return message;\n                };\n\n                /**\n                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.\n                 * @function toObject\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @static\n                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation\n                 * @param {$protobuf.IConversionOptions} [options] Conversion options\n                 * @returns {Object.<string,*>} Plain object\n                 */\n                Annotation.toObject = function toObject(message, options) {\n                    if (!options)\n                        options = {};\n                    var object = {};\n                    if (options.arrays || options.defaults)\n                        object.path = [];\n                    if (options.defaults) {\n                        object.source_file = \"\";\n                        object.begin = 0;\n                        object.end = 0;\n                    }\n                    if (message.path && message.path.length) {\n                        object.path = [];\n                        for (var j = 0; j < message.path.length; ++j)\n                            object.path[j] = message.path[j];\n                    }\n                    if (message.source_file != null && message.hasOwnProperty(\"source_file\"))\n                        object.source_file = message.source_file;\n                    if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                        object.begin = message.begin;\n                    if (message.end != null && message.hasOwnProperty(\"end\"))\n                        object.end = message.end;\n                    return object;\n                };\n\n                /**\n                 * Converts this Annotation to JSON.\n                 * @function toJSON\n                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation\n                 * @instance\n                 * @returns {Object.<string,*>} JSON object\n                 */\n                Annotation.prototype.toJSON = function toJSON() {\n                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                };\n\n                return Annotation;\n            })();\n\n            return GeneratedCodeInfo;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\n$root.Par = (function() {\n\n    /**\n     * Properties of a Par.\n     * @exports IPar\n     * @interface IPar\n     * @property {Array.<ISend>|null} [sends] Par sends\n     * @property {Array.<IReceive>|null} [receives] Par receives\n     * @property {Array.<INew>|null} [news] Par news\n     * @property {Array.<IExpr>|null} [exprs] Par exprs\n     * @property {Array.<IMatch>|null} [matches] Par matches\n     * @property {Array.<IGUnforgeable>|null} [unforgeables] Par unforgeables\n     * @property {Array.<IBundle>|null} [bundles] Par bundles\n     * @property {Array.<IConnective>|null} [connectives] Par connectives\n     * @property {Uint8Array|null} [locallyFree] Par locallyFree\n     * @property {boolean|null} [connective_used] Par connective_used\n     */\n\n    /**\n     * Constructs a new Par.\n     * @exports Par\n     * @classdesc Rholang process\n     * \n     * For example, `@0!(1) | @2!(3) | for(x <- @0) { Nil }` has two sends\n     * and one receive.\n     * \n     * The Nil process is a `Par` with no sends, receives, etc.\n     * @implements IPar\n     * @constructor\n     * @param {IPar=} [properties] Properties to set\n     */\n    function Par(properties) {\n        this.sends = [];\n        this.receives = [];\n        this.news = [];\n        this.exprs = [];\n        this.matches = [];\n        this.unforgeables = [];\n        this.bundles = [];\n        this.connectives = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Par sends.\n     * @member {Array.<ISend>} sends\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.sends = $util.emptyArray;\n\n    /**\n     * Par receives.\n     * @member {Array.<IReceive>} receives\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.receives = $util.emptyArray;\n\n    /**\n     * Par news.\n     * @member {Array.<INew>} news\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.news = $util.emptyArray;\n\n    /**\n     * Par exprs.\n     * @member {Array.<IExpr>} exprs\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.exprs = $util.emptyArray;\n\n    /**\n     * Par matches.\n     * @member {Array.<IMatch>} matches\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.matches = $util.emptyArray;\n\n    /**\n     * Par unforgeables.\n     * @member {Array.<IGUnforgeable>} unforgeables\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.unforgeables = $util.emptyArray;\n\n    /**\n     * Par bundles.\n     * @member {Array.<IBundle>} bundles\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.bundles = $util.emptyArray;\n\n    /**\n     * Par connectives.\n     * @member {Array.<IConnective>} connectives\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.connectives = $util.emptyArray;\n\n    /**\n     * Par locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * Par connective_used.\n     * @member {boolean} connective_used\n     * @memberof Par\n     * @instance\n     */\n    Par.prototype.connective_used = false;\n\n    /**\n     * Creates a new Par instance using the specified properties.\n     * @function create\n     * @memberof Par\n     * @static\n     * @param {IPar=} [properties] Properties to set\n     * @returns {Par} Par instance\n     */\n    Par.create = function create(properties) {\n        return new Par(properties);\n    };\n\n    /**\n     * Encodes the specified Par message. Does not implicitly {@link Par.verify|verify} messages.\n     * @function encode\n     * @memberof Par\n     * @static\n     * @param {IPar} message Par message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Par.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.sends != null && message.sends.length)\n            for (var i = 0; i < message.sends.length; ++i)\n                $root.Send.encode(message.sends[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.receives != null && message.receives.length)\n            for (var i = 0; i < message.receives.length; ++i)\n                $root.Receive.encode(message.receives[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.news != null && message.news.length)\n            for (var i = 0; i < message.news.length; ++i)\n                $root.New.encode(message.news[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.exprs != null && message.exprs.length)\n            for (var i = 0; i < message.exprs.length; ++i)\n                $root.Expr.encode(message.exprs[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.matches != null && message.matches.length)\n            for (var i = 0; i < message.matches.length; ++i)\n                $root.Match.encode(message.matches[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.unforgeables != null && message.unforgeables.length)\n            for (var i = 0; i < message.unforgeables.length; ++i)\n                $root.GUnforgeable.encode(message.unforgeables[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.connectives != null && message.connectives.length)\n            for (var i = 0; i < message.connectives.length; ++i)\n                $root.Connective.encode(message.connectives[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.locallyFree);\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.connective_used);\n        if (message.bundles != null && message.bundles.length)\n            for (var i = 0; i < message.bundles.length; ++i)\n                $root.Bundle.encode(message.bundles[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Par message, length delimited. Does not implicitly {@link Par.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Par\n     * @static\n     * @param {IPar} message Par message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Par.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Par message from the specified reader or buffer.\n     * @function decode\n     * @memberof Par\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Par} Par\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Par.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Par();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.sends && message.sends.length))\n                    message.sends = [];\n                message.sends.push($root.Send.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                if (!(message.receives && message.receives.length))\n                    message.receives = [];\n                message.receives.push($root.Receive.decode(reader, reader.uint32()));\n                break;\n            case 4:\n                if (!(message.news && message.news.length))\n                    message.news = [];\n                message.news.push($root.New.decode(reader, reader.uint32()));\n                break;\n            case 5:\n                if (!(message.exprs && message.exprs.length))\n                    message.exprs = [];\n                message.exprs.push($root.Expr.decode(reader, reader.uint32()));\n                break;\n            case 6:\n                if (!(message.matches && message.matches.length))\n                    message.matches = [];\n                message.matches.push($root.Match.decode(reader, reader.uint32()));\n                break;\n            case 7:\n                if (!(message.unforgeables && message.unforgeables.length))\n                    message.unforgeables = [];\n                message.unforgeables.push($root.GUnforgeable.decode(reader, reader.uint32()));\n                break;\n            case 11:\n                if (!(message.bundles && message.bundles.length))\n                    message.bundles = [];\n                message.bundles.push($root.Bundle.decode(reader, reader.uint32()));\n                break;\n            case 8:\n                if (!(message.connectives && message.connectives.length))\n                    message.connectives = [];\n                message.connectives.push($root.Connective.decode(reader, reader.uint32()));\n                break;\n            case 9:\n                message.locallyFree = reader.bytes();\n                break;\n            case 10:\n                message.connective_used = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Par message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Par\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Par} Par\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Par.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Par message.\n     * @function verify\n     * @memberof Par\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Par.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.sends != null && message.hasOwnProperty(\"sends\")) {\n            if (!Array.isArray(message.sends))\n                return \"sends: array expected\";\n            for (var i = 0; i < message.sends.length; ++i) {\n                var error = $root.Send.verify(message.sends[i]);\n                if (error)\n                    return \"sends.\" + error;\n            }\n        }\n        if (message.receives != null && message.hasOwnProperty(\"receives\")) {\n            if (!Array.isArray(message.receives))\n                return \"receives: array expected\";\n            for (var i = 0; i < message.receives.length; ++i) {\n                var error = $root.Receive.verify(message.receives[i]);\n                if (error)\n                    return \"receives.\" + error;\n            }\n        }\n        if (message.news != null && message.hasOwnProperty(\"news\")) {\n            if (!Array.isArray(message.news))\n                return \"news: array expected\";\n            for (var i = 0; i < message.news.length; ++i) {\n                var error = $root.New.verify(message.news[i]);\n                if (error)\n                    return \"news.\" + error;\n            }\n        }\n        if (message.exprs != null && message.hasOwnProperty(\"exprs\")) {\n            if (!Array.isArray(message.exprs))\n                return \"exprs: array expected\";\n            for (var i = 0; i < message.exprs.length; ++i) {\n                var error = $root.Expr.verify(message.exprs[i]);\n                if (error)\n                    return \"exprs.\" + error;\n            }\n        }\n        if (message.matches != null && message.hasOwnProperty(\"matches\")) {\n            if (!Array.isArray(message.matches))\n                return \"matches: array expected\";\n            for (var i = 0; i < message.matches.length; ++i) {\n                var error = $root.Match.verify(message.matches[i]);\n                if (error)\n                    return \"matches.\" + error;\n            }\n        }\n        if (message.unforgeables != null && message.hasOwnProperty(\"unforgeables\")) {\n            if (!Array.isArray(message.unforgeables))\n                return \"unforgeables: array expected\";\n            for (var i = 0; i < message.unforgeables.length; ++i) {\n                var error = $root.GUnforgeable.verify(message.unforgeables[i]);\n                if (error)\n                    return \"unforgeables.\" + error;\n            }\n        }\n        if (message.bundles != null && message.hasOwnProperty(\"bundles\")) {\n            if (!Array.isArray(message.bundles))\n                return \"bundles: array expected\";\n            for (var i = 0; i < message.bundles.length; ++i) {\n                var error = $root.Bundle.verify(message.bundles[i]);\n                if (error)\n                    return \"bundles.\" + error;\n            }\n        }\n        if (message.connectives != null && message.hasOwnProperty(\"connectives\")) {\n            if (!Array.isArray(message.connectives))\n                return \"connectives: array expected\";\n            for (var i = 0; i < message.connectives.length; ++i) {\n                var error = $root.Connective.verify(message.connectives[i]);\n                if (error)\n                    return \"connectives.\" + error;\n            }\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            if (typeof message.connective_used !== \"boolean\")\n                return \"connective_used: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Par message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Par\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Par} Par\n     */\n    Par.fromObject = function fromObject(object) {\n        if (object instanceof $root.Par)\n            return object;\n        var message = new $root.Par();\n        if (object.sends) {\n            if (!Array.isArray(object.sends))\n                throw TypeError(\".Par.sends: array expected\");\n            message.sends = [];\n            for (var i = 0; i < object.sends.length; ++i) {\n                if (typeof object.sends[i] !== \"object\")\n                    throw TypeError(\".Par.sends: object expected\");\n                message.sends[i] = $root.Send.fromObject(object.sends[i]);\n            }\n        }\n        if (object.receives) {\n            if (!Array.isArray(object.receives))\n                throw TypeError(\".Par.receives: array expected\");\n            message.receives = [];\n            for (var i = 0; i < object.receives.length; ++i) {\n                if (typeof object.receives[i] !== \"object\")\n                    throw TypeError(\".Par.receives: object expected\");\n                message.receives[i] = $root.Receive.fromObject(object.receives[i]);\n            }\n        }\n        if (object.news) {\n            if (!Array.isArray(object.news))\n                throw TypeError(\".Par.news: array expected\");\n            message.news = [];\n            for (var i = 0; i < object.news.length; ++i) {\n                if (typeof object.news[i] !== \"object\")\n                    throw TypeError(\".Par.news: object expected\");\n                message.news[i] = $root.New.fromObject(object.news[i]);\n            }\n        }\n        if (object.exprs) {\n            if (!Array.isArray(object.exprs))\n                throw TypeError(\".Par.exprs: array expected\");\n            message.exprs = [];\n            for (var i = 0; i < object.exprs.length; ++i) {\n                if (typeof object.exprs[i] !== \"object\")\n                    throw TypeError(\".Par.exprs: object expected\");\n                message.exprs[i] = $root.Expr.fromObject(object.exprs[i]);\n            }\n        }\n        if (object.matches) {\n            if (!Array.isArray(object.matches))\n                throw TypeError(\".Par.matches: array expected\");\n            message.matches = [];\n            for (var i = 0; i < object.matches.length; ++i) {\n                if (typeof object.matches[i] !== \"object\")\n                    throw TypeError(\".Par.matches: object expected\");\n                message.matches[i] = $root.Match.fromObject(object.matches[i]);\n            }\n        }\n        if (object.unforgeables) {\n            if (!Array.isArray(object.unforgeables))\n                throw TypeError(\".Par.unforgeables: array expected\");\n            message.unforgeables = [];\n            for (var i = 0; i < object.unforgeables.length; ++i) {\n                if (typeof object.unforgeables[i] !== \"object\")\n                    throw TypeError(\".Par.unforgeables: object expected\");\n                message.unforgeables[i] = $root.GUnforgeable.fromObject(object.unforgeables[i]);\n            }\n        }\n        if (object.bundles) {\n            if (!Array.isArray(object.bundles))\n                throw TypeError(\".Par.bundles: array expected\");\n            message.bundles = [];\n            for (var i = 0; i < object.bundles.length; ++i) {\n                if (typeof object.bundles[i] !== \"object\")\n                    throw TypeError(\".Par.bundles: object expected\");\n                message.bundles[i] = $root.Bundle.fromObject(object.bundles[i]);\n            }\n        }\n        if (object.connectives) {\n            if (!Array.isArray(object.connectives))\n                throw TypeError(\".Par.connectives: array expected\");\n            message.connectives = [];\n            for (var i = 0; i < object.connectives.length; ++i) {\n                if (typeof object.connectives[i] !== \"object\")\n                    throw TypeError(\".Par.connectives: object expected\");\n                message.connectives[i] = $root.Connective.fromObject(object.connectives[i]);\n            }\n        }\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        if (object.connective_used != null)\n            message.connective_used = Boolean(object.connective_used);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Par message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Par\n     * @static\n     * @param {Par} message Par\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Par.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.sends = [];\n            object.receives = [];\n            object.news = [];\n            object.exprs = [];\n            object.matches = [];\n            object.unforgeables = [];\n            object.connectives = [];\n            object.bundles = [];\n        }\n        if (options.defaults) {\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n            object.connective_used = false;\n        }\n        if (message.sends && message.sends.length) {\n            object.sends = [];\n            for (var j = 0; j < message.sends.length; ++j)\n                object.sends[j] = $root.Send.toObject(message.sends[j], options);\n        }\n        if (message.receives && message.receives.length) {\n            object.receives = [];\n            for (var j = 0; j < message.receives.length; ++j)\n                object.receives[j] = $root.Receive.toObject(message.receives[j], options);\n        }\n        if (message.news && message.news.length) {\n            object.news = [];\n            for (var j = 0; j < message.news.length; ++j)\n                object.news[j] = $root.New.toObject(message.news[j], options);\n        }\n        if (message.exprs && message.exprs.length) {\n            object.exprs = [];\n            for (var j = 0; j < message.exprs.length; ++j)\n                object.exprs[j] = $root.Expr.toObject(message.exprs[j], options);\n        }\n        if (message.matches && message.matches.length) {\n            object.matches = [];\n            for (var j = 0; j < message.matches.length; ++j)\n                object.matches[j] = $root.Match.toObject(message.matches[j], options);\n        }\n        if (message.unforgeables && message.unforgeables.length) {\n            object.unforgeables = [];\n            for (var j = 0; j < message.unforgeables.length; ++j)\n                object.unforgeables[j] = $root.GUnforgeable.toObject(message.unforgeables[j], options);\n        }\n        if (message.connectives && message.connectives.length) {\n            object.connectives = [];\n            for (var j = 0; j < message.connectives.length; ++j)\n                object.connectives[j] = $root.Connective.toObject(message.connectives[j], options);\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            object.connective_used = message.connective_used;\n        if (message.bundles && message.bundles.length) {\n            object.bundles = [];\n            for (var j = 0; j < message.bundles.length; ++j)\n                object.bundles[j] = $root.Bundle.toObject(message.bundles[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Par to JSON.\n     * @function toJSON\n     * @memberof Par\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Par.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Par;\n})();\n\n$root.TaggedContinuation = (function() {\n\n    /**\n     * Properties of a TaggedContinuation.\n     * @exports ITaggedContinuation\n     * @interface ITaggedContinuation\n     * @property {IParWithRandom|null} [par_body] TaggedContinuation par_body\n     * @property {number|Long|null} [scala_body_ref] TaggedContinuation scala_body_ref\n     */\n\n    /**\n     * Constructs a new TaggedContinuation.\n     * @exports TaggedContinuation\n     * @classdesc Either rholang code or code built in to the interpreter.\n     * @implements ITaggedContinuation\n     * @constructor\n     * @param {ITaggedContinuation=} [properties] Properties to set\n     */\n    function TaggedContinuation(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TaggedContinuation par_body.\n     * @member {IParWithRandom|null|undefined} par_body\n     * @memberof TaggedContinuation\n     * @instance\n     */\n    TaggedContinuation.prototype.par_body = null;\n\n    /**\n     * TaggedContinuation scala_body_ref.\n     * @member {number|Long} scala_body_ref\n     * @memberof TaggedContinuation\n     * @instance\n     */\n    TaggedContinuation.prototype.scala_body_ref = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * TaggedContinuation tagged_cont.\n     * @member {\"par_body\"|\"scala_body_ref\"|undefined} tagged_cont\n     * @memberof TaggedContinuation\n     * @instance\n     */\n    Object.defineProperty(TaggedContinuation.prototype, \"tagged_cont\", {\n        get: $util.oneOfGetter($oneOfFields = [\"par_body\", \"scala_body_ref\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new TaggedContinuation instance using the specified properties.\n     * @function create\n     * @memberof TaggedContinuation\n     * @static\n     * @param {ITaggedContinuation=} [properties] Properties to set\n     * @returns {TaggedContinuation} TaggedContinuation instance\n     */\n    TaggedContinuation.create = function create(properties) {\n        return new TaggedContinuation(properties);\n    };\n\n    /**\n     * Encodes the specified TaggedContinuation message. Does not implicitly {@link TaggedContinuation.verify|verify} messages.\n     * @function encode\n     * @memberof TaggedContinuation\n     * @static\n     * @param {ITaggedContinuation} message TaggedContinuation message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TaggedContinuation.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.par_body != null && message.hasOwnProperty(\"par_body\"))\n            $root.ParWithRandom.encode(message.par_body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.scala_body_ref != null && message.hasOwnProperty(\"scala_body_ref\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int64(message.scala_body_ref);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TaggedContinuation message, length delimited. Does not implicitly {@link TaggedContinuation.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TaggedContinuation\n     * @static\n     * @param {ITaggedContinuation} message TaggedContinuation message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TaggedContinuation.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TaggedContinuation message from the specified reader or buffer.\n     * @function decode\n     * @memberof TaggedContinuation\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TaggedContinuation} TaggedContinuation\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TaggedContinuation.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TaggedContinuation();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.par_body = $root.ParWithRandom.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.scala_body_ref = reader.int64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TaggedContinuation message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TaggedContinuation\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TaggedContinuation} TaggedContinuation\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TaggedContinuation.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TaggedContinuation message.\n     * @function verify\n     * @memberof TaggedContinuation\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TaggedContinuation.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        var properties = {};\n        if (message.par_body != null && message.hasOwnProperty(\"par_body\")) {\n            properties.tagged_cont = 1;\n            {\n                var error = $root.ParWithRandom.verify(message.par_body);\n                if (error)\n                    return \"par_body.\" + error;\n            }\n        }\n        if (message.scala_body_ref != null && message.hasOwnProperty(\"scala_body_ref\")) {\n            if (properties.tagged_cont === 1)\n                return \"tagged_cont: multiple values\";\n            properties.tagged_cont = 1;\n            if (!$util.isInteger(message.scala_body_ref) && !(message.scala_body_ref && $util.isInteger(message.scala_body_ref.low) && $util.isInteger(message.scala_body_ref.high)))\n                return \"scala_body_ref: integer|Long expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a TaggedContinuation message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TaggedContinuation\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TaggedContinuation} TaggedContinuation\n     */\n    TaggedContinuation.fromObject = function fromObject(object) {\n        if (object instanceof $root.TaggedContinuation)\n            return object;\n        var message = new $root.TaggedContinuation();\n        if (object.par_body != null) {\n            if (typeof object.par_body !== \"object\")\n                throw TypeError(\".TaggedContinuation.par_body: object expected\");\n            message.par_body = $root.ParWithRandom.fromObject(object.par_body);\n        }\n        if (object.scala_body_ref != null)\n            if ($util.Long)\n                (message.scala_body_ref = $util.Long.fromValue(object.scala_body_ref)).unsigned = false;\n            else if (typeof object.scala_body_ref === \"string\")\n                message.scala_body_ref = parseInt(object.scala_body_ref, 10);\n            else if (typeof object.scala_body_ref === \"number\")\n                message.scala_body_ref = object.scala_body_ref;\n            else if (typeof object.scala_body_ref === \"object\")\n                message.scala_body_ref = new $util.LongBits(object.scala_body_ref.low >>> 0, object.scala_body_ref.high >>> 0).toNumber();\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TaggedContinuation message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TaggedContinuation\n     * @static\n     * @param {TaggedContinuation} message TaggedContinuation\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TaggedContinuation.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (message.par_body != null && message.hasOwnProperty(\"par_body\")) {\n            object.par_body = $root.ParWithRandom.toObject(message.par_body, options);\n            if (options.oneofs)\n                object.tagged_cont = \"par_body\";\n        }\n        if (message.scala_body_ref != null && message.hasOwnProperty(\"scala_body_ref\")) {\n            if (typeof message.scala_body_ref === \"number\")\n                object.scala_body_ref = options.longs === String ? String(message.scala_body_ref) : message.scala_body_ref;\n            else\n                object.scala_body_ref = options.longs === String ? $util.Long.prototype.toString.call(message.scala_body_ref) : options.longs === Number ? new $util.LongBits(message.scala_body_ref.low >>> 0, message.scala_body_ref.high >>> 0).toNumber() : message.scala_body_ref;\n            if (options.oneofs)\n                object.tagged_cont = \"scala_body_ref\";\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TaggedContinuation to JSON.\n     * @function toJSON\n     * @memberof TaggedContinuation\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TaggedContinuation.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TaggedContinuation;\n})();\n\n$root.ParWithRandom = (function() {\n\n    /**\n     * Properties of a ParWithRandom.\n     * @exports IParWithRandom\n     * @interface IParWithRandom\n     * @property {IPar|null} [body] ParWithRandom body\n     * @property {Uint8Array|null} [randomState] ParWithRandom randomState\n     */\n\n    /**\n     * Constructs a new ParWithRandom.\n     * @exports ParWithRandom\n     * @classdesc Rholang code along with the state of a split random number\n     * generator for generating new unforgeable names.\n     * @implements IParWithRandom\n     * @constructor\n     * @param {IParWithRandom=} [properties] Properties to set\n     */\n    function ParWithRandom(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ParWithRandom body.\n     * @member {IPar|null|undefined} body\n     * @memberof ParWithRandom\n     * @instance\n     */\n    ParWithRandom.prototype.body = null;\n\n    /**\n     * ParWithRandom randomState.\n     * @member {Uint8Array} randomState\n     * @memberof ParWithRandom\n     * @instance\n     */\n    ParWithRandom.prototype.randomState = $util.newBuffer([]);\n\n    /**\n     * Creates a new ParWithRandom instance using the specified properties.\n     * @function create\n     * @memberof ParWithRandom\n     * @static\n     * @param {IParWithRandom=} [properties] Properties to set\n     * @returns {ParWithRandom} ParWithRandom instance\n     */\n    ParWithRandom.create = function create(properties) {\n        return new ParWithRandom(properties);\n    };\n\n    /**\n     * Encodes the specified ParWithRandom message. Does not implicitly {@link ParWithRandom.verify|verify} messages.\n     * @function encode\n     * @memberof ParWithRandom\n     * @static\n     * @param {IParWithRandom} message ParWithRandom message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ParWithRandom.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.body != null && message.hasOwnProperty(\"body\"))\n            $root.Par.encode(message.body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.randomState != null && message.hasOwnProperty(\"randomState\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.randomState);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ParWithRandom message, length delimited. Does not implicitly {@link ParWithRandom.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ParWithRandom\n     * @static\n     * @param {IParWithRandom} message ParWithRandom message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ParWithRandom.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ParWithRandom message from the specified reader or buffer.\n     * @function decode\n     * @memberof ParWithRandom\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ParWithRandom} ParWithRandom\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ParWithRandom.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ParWithRandom();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.body = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.randomState = reader.bytes();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ParWithRandom message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ParWithRandom\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ParWithRandom} ParWithRandom\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ParWithRandom.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ParWithRandom message.\n     * @function verify\n     * @memberof ParWithRandom\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ParWithRandom.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.body != null && message.hasOwnProperty(\"body\")) {\n            var error = $root.Par.verify(message.body);\n            if (error)\n                return \"body.\" + error;\n        }\n        if (message.randomState != null && message.hasOwnProperty(\"randomState\"))\n            if (!(message.randomState && typeof message.randomState.length === \"number\" || $util.isString(message.randomState)))\n                return \"randomState: buffer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ParWithRandom message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ParWithRandom\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ParWithRandom} ParWithRandom\n     */\n    ParWithRandom.fromObject = function fromObject(object) {\n        if (object instanceof $root.ParWithRandom)\n            return object;\n        var message = new $root.ParWithRandom();\n        if (object.body != null) {\n            if (typeof object.body !== \"object\")\n                throw TypeError(\".ParWithRandom.body: object expected\");\n            message.body = $root.Par.fromObject(object.body);\n        }\n        if (object.randomState != null)\n            if (typeof object.randomState === \"string\")\n                $util.base64.decode(object.randomState, message.randomState = $util.newBuffer($util.base64.length(object.randomState)), 0);\n            else if (object.randomState.length)\n                message.randomState = object.randomState;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ParWithRandom message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ParWithRandom\n     * @static\n     * @param {ParWithRandom} message ParWithRandom\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ParWithRandom.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.body = null;\n            if (options.bytes === String)\n                object.randomState = \"\";\n            else {\n                object.randomState = [];\n                if (options.bytes !== Array)\n                    object.randomState = $util.newBuffer(object.randomState);\n            }\n        }\n        if (message.body != null && message.hasOwnProperty(\"body\"))\n            object.body = $root.Par.toObject(message.body, options);\n        if (message.randomState != null && message.hasOwnProperty(\"randomState\"))\n            object.randomState = options.bytes === String ? $util.base64.encode(message.randomState, 0, message.randomState.length) : options.bytes === Array ? Array.prototype.slice.call(message.randomState) : message.randomState;\n        return object;\n    };\n\n    /**\n     * Converts this ParWithRandom to JSON.\n     * @function toJSON\n     * @memberof ParWithRandom\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ParWithRandom.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ParWithRandom;\n})();\n\n$root.PCost = (function() {\n\n    /**\n     * Properties of a PCost.\n     * @exports IPCost\n     * @interface IPCost\n     * @property {number|Long|null} [cost] PCost cost\n     */\n\n    /**\n     * Constructs a new PCost.\n     * @exports PCost\n     * @classdesc Cost of the performed operations.\n     * @implements IPCost\n     * @constructor\n     * @param {IPCost=} [properties] Properties to set\n     */\n    function PCost(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PCost cost.\n     * @member {number|Long} cost\n     * @memberof PCost\n     * @instance\n     */\n    PCost.prototype.cost = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new PCost instance using the specified properties.\n     * @function create\n     * @memberof PCost\n     * @static\n     * @param {IPCost=} [properties] Properties to set\n     * @returns {PCost} PCost instance\n     */\n    PCost.create = function create(properties) {\n        return new PCost(properties);\n    };\n\n    /**\n     * Encodes the specified PCost message. Does not implicitly {@link PCost.verify|verify} messages.\n     * @function encode\n     * @memberof PCost\n     * @static\n     * @param {IPCost} message PCost message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PCost.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.cost != null && message.hasOwnProperty(\"cost\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.cost);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PCost message, length delimited. Does not implicitly {@link PCost.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PCost\n     * @static\n     * @param {IPCost} message PCost message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PCost.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PCost message from the specified reader or buffer.\n     * @function decode\n     * @memberof PCost\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PCost} PCost\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PCost.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PCost();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.cost = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PCost message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PCost\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PCost} PCost\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PCost.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PCost message.\n     * @function verify\n     * @memberof PCost\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PCost.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.cost != null && message.hasOwnProperty(\"cost\"))\n            if (!$util.isInteger(message.cost) && !(message.cost && $util.isInteger(message.cost.low) && $util.isInteger(message.cost.high)))\n                return \"cost: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a PCost message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PCost\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {PCost} PCost\n     */\n    PCost.fromObject = function fromObject(object) {\n        if (object instanceof $root.PCost)\n            return object;\n        var message = new $root.PCost();\n        if (object.cost != null)\n            if ($util.Long)\n                (message.cost = $util.Long.fromValue(object.cost)).unsigned = true;\n            else if (typeof object.cost === \"string\")\n                message.cost = parseInt(object.cost, 10);\n            else if (typeof object.cost === \"number\")\n                message.cost = object.cost;\n            else if (typeof object.cost === \"object\")\n                message.cost = new $util.LongBits(object.cost.low >>> 0, object.cost.high >>> 0).toNumber(true);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a PCost message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PCost\n     * @static\n     * @param {PCost} message PCost\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PCost.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.cost = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.cost = options.longs === String ? \"0\" : 0;\n        if (message.cost != null && message.hasOwnProperty(\"cost\"))\n            if (typeof message.cost === \"number\")\n                object.cost = options.longs === String ? String(message.cost) : message.cost;\n            else\n                object.cost = options.longs === String ? $util.Long.prototype.toString.call(message.cost) : options.longs === Number ? new $util.LongBits(message.cost.low >>> 0, message.cost.high >>> 0).toNumber(true) : message.cost;\n        return object;\n    };\n\n    /**\n     * Converts this PCost to JSON.\n     * @function toJSON\n     * @memberof PCost\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PCost.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PCost;\n})();\n\n$root.ListParWithRandom = (function() {\n\n    /**\n     * Properties of a ListParWithRandom.\n     * @exports IListParWithRandom\n     * @interface IListParWithRandom\n     * @property {Array.<IPar>|null} [pars] ListParWithRandom pars\n     * @property {Uint8Array|null} [randomState] ListParWithRandom randomState\n     */\n\n    /**\n     * Constructs a new ListParWithRandom.\n     * @exports ListParWithRandom\n     * @classdesc Represents a ListParWithRandom.\n     * @implements IListParWithRandom\n     * @constructor\n     * @param {IListParWithRandom=} [properties] Properties to set\n     */\n    function ListParWithRandom(properties) {\n        this.pars = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ListParWithRandom pars.\n     * @member {Array.<IPar>} pars\n     * @memberof ListParWithRandom\n     * @instance\n     */\n    ListParWithRandom.prototype.pars = $util.emptyArray;\n\n    /**\n     * ListParWithRandom randomState.\n     * @member {Uint8Array} randomState\n     * @memberof ListParWithRandom\n     * @instance\n     */\n    ListParWithRandom.prototype.randomState = $util.newBuffer([]);\n\n    /**\n     * Creates a new ListParWithRandom instance using the specified properties.\n     * @function create\n     * @memberof ListParWithRandom\n     * @static\n     * @param {IListParWithRandom=} [properties] Properties to set\n     * @returns {ListParWithRandom} ListParWithRandom instance\n     */\n    ListParWithRandom.create = function create(properties) {\n        return new ListParWithRandom(properties);\n    };\n\n    /**\n     * Encodes the specified ListParWithRandom message. Does not implicitly {@link ListParWithRandom.verify|verify} messages.\n     * @function encode\n     * @memberof ListParWithRandom\n     * @static\n     * @param {IListParWithRandom} message ListParWithRandom message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ListParWithRandom.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.pars != null && message.pars.length)\n            for (var i = 0; i < message.pars.length; ++i)\n                $root.Par.encode(message.pars[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.randomState != null && message.hasOwnProperty(\"randomState\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.randomState);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ListParWithRandom message, length delimited. Does not implicitly {@link ListParWithRandom.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ListParWithRandom\n     * @static\n     * @param {IListParWithRandom} message ListParWithRandom message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ListParWithRandom.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ListParWithRandom message from the specified reader or buffer.\n     * @function decode\n     * @memberof ListParWithRandom\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ListParWithRandom} ListParWithRandom\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ListParWithRandom.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListParWithRandom();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.pars && message.pars.length))\n                    message.pars = [];\n                message.pars.push($root.Par.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.randomState = reader.bytes();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ListParWithRandom message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ListParWithRandom\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ListParWithRandom} ListParWithRandom\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ListParWithRandom.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ListParWithRandom message.\n     * @function verify\n     * @memberof ListParWithRandom\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ListParWithRandom.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.pars != null && message.hasOwnProperty(\"pars\")) {\n            if (!Array.isArray(message.pars))\n                return \"pars: array expected\";\n            for (var i = 0; i < message.pars.length; ++i) {\n                var error = $root.Par.verify(message.pars[i]);\n                if (error)\n                    return \"pars.\" + error;\n            }\n        }\n        if (message.randomState != null && message.hasOwnProperty(\"randomState\"))\n            if (!(message.randomState && typeof message.randomState.length === \"number\" || $util.isString(message.randomState)))\n                return \"randomState: buffer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ListParWithRandom message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ListParWithRandom\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ListParWithRandom} ListParWithRandom\n     */\n    ListParWithRandom.fromObject = function fromObject(object) {\n        if (object instanceof $root.ListParWithRandom)\n            return object;\n        var message = new $root.ListParWithRandom();\n        if (object.pars) {\n            if (!Array.isArray(object.pars))\n                throw TypeError(\".ListParWithRandom.pars: array expected\");\n            message.pars = [];\n            for (var i = 0; i < object.pars.length; ++i) {\n                if (typeof object.pars[i] !== \"object\")\n                    throw TypeError(\".ListParWithRandom.pars: object expected\");\n                message.pars[i] = $root.Par.fromObject(object.pars[i]);\n            }\n        }\n        if (object.randomState != null)\n            if (typeof object.randomState === \"string\")\n                $util.base64.decode(object.randomState, message.randomState = $util.newBuffer($util.base64.length(object.randomState)), 0);\n            else if (object.randomState.length)\n                message.randomState = object.randomState;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ListParWithRandom message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ListParWithRandom\n     * @static\n     * @param {ListParWithRandom} message ListParWithRandom\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ListParWithRandom.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.pars = [];\n        if (options.defaults)\n            if (options.bytes === String)\n                object.randomState = \"\";\n            else {\n                object.randomState = [];\n                if (options.bytes !== Array)\n                    object.randomState = $util.newBuffer(object.randomState);\n            }\n        if (message.pars && message.pars.length) {\n            object.pars = [];\n            for (var j = 0; j < message.pars.length; ++j)\n                object.pars[j] = $root.Par.toObject(message.pars[j], options);\n        }\n        if (message.randomState != null && message.hasOwnProperty(\"randomState\"))\n            object.randomState = options.bytes === String ? $util.base64.encode(message.randomState, 0, message.randomState.length) : options.bytes === Array ? Array.prototype.slice.call(message.randomState) : message.randomState;\n        return object;\n    };\n\n    /**\n     * Converts this ListParWithRandom to JSON.\n     * @function toJSON\n     * @memberof ListParWithRandom\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ListParWithRandom.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ListParWithRandom;\n})();\n\n$root.Var = (function() {\n\n    /**\n     * Properties of a Var.\n     * @exports IVar\n     * @interface IVar\n     * @property {number|null} [bound_var] Var bound_var\n     * @property {number|null} [free_var] Var free_var\n     * @property {Var.IWildcardMsg|null} [wildcard] Var wildcard\n     */\n\n    /**\n     * Constructs a new Var.\n     * @exports Var\n     * @classdesc Represents a Var.\n     * @implements IVar\n     * @constructor\n     * @param {IVar=} [properties] Properties to set\n     */\n    function Var(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Var bound_var.\n     * @member {number} bound_var\n     * @memberof Var\n     * @instance\n     */\n    Var.prototype.bound_var = 0;\n\n    /**\n     * Var free_var.\n     * @member {number} free_var\n     * @memberof Var\n     * @instance\n     */\n    Var.prototype.free_var = 0;\n\n    /**\n     * Var wildcard.\n     * @member {Var.IWildcardMsg|null|undefined} wildcard\n     * @memberof Var\n     * @instance\n     */\n    Var.prototype.wildcard = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * Var var_instance.\n     * @member {\"bound_var\"|\"free_var\"|\"wildcard\"|undefined} var_instance\n     * @memberof Var\n     * @instance\n     */\n    Object.defineProperty(Var.prototype, \"var_instance\", {\n        get: $util.oneOfGetter($oneOfFields = [\"bound_var\", \"free_var\", \"wildcard\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new Var instance using the specified properties.\n     * @function create\n     * @memberof Var\n     * @static\n     * @param {IVar=} [properties] Properties to set\n     * @returns {Var} Var instance\n     */\n    Var.create = function create(properties) {\n        return new Var(properties);\n    };\n\n    /**\n     * Encodes the specified Var message. Does not implicitly {@link Var.verify|verify} messages.\n     * @function encode\n     * @memberof Var\n     * @static\n     * @param {IVar} message Var message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Var.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.bound_var != null && message.hasOwnProperty(\"bound_var\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.bound_var);\n        if (message.free_var != null && message.hasOwnProperty(\"free_var\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.free_var);\n        if (message.wildcard != null && message.hasOwnProperty(\"wildcard\"))\n            $root.Var.WildcardMsg.encode(message.wildcard, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Var message, length delimited. Does not implicitly {@link Var.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Var\n     * @static\n     * @param {IVar} message Var message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Var.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Var message from the specified reader or buffer.\n     * @function decode\n     * @memberof Var\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Var} Var\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Var.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Var();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.bound_var = reader.sint32();\n                break;\n            case 2:\n                message.free_var = reader.sint32();\n                break;\n            case 3:\n                message.wildcard = $root.Var.WildcardMsg.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Var message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Var\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Var} Var\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Var.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Var message.\n     * @function verify\n     * @memberof Var\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Var.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        var properties = {};\n        if (message.bound_var != null && message.hasOwnProperty(\"bound_var\")) {\n            properties.var_instance = 1;\n            if (!$util.isInteger(message.bound_var))\n                return \"bound_var: integer expected\";\n        }\n        if (message.free_var != null && message.hasOwnProperty(\"free_var\")) {\n            if (properties.var_instance === 1)\n                return \"var_instance: multiple values\";\n            properties.var_instance = 1;\n            if (!$util.isInteger(message.free_var))\n                return \"free_var: integer expected\";\n        }\n        if (message.wildcard != null && message.hasOwnProperty(\"wildcard\")) {\n            if (properties.var_instance === 1)\n                return \"var_instance: multiple values\";\n            properties.var_instance = 1;\n            {\n                var error = $root.Var.WildcardMsg.verify(message.wildcard);\n                if (error)\n                    return \"wildcard.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Var message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Var\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Var} Var\n     */\n    Var.fromObject = function fromObject(object) {\n        if (object instanceof $root.Var)\n            return object;\n        var message = new $root.Var();\n        if (object.bound_var != null)\n            message.bound_var = object.bound_var | 0;\n        if (object.free_var != null)\n            message.free_var = object.free_var | 0;\n        if (object.wildcard != null) {\n            if (typeof object.wildcard !== \"object\")\n                throw TypeError(\".Var.wildcard: object expected\");\n            message.wildcard = $root.Var.WildcardMsg.fromObject(object.wildcard);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Var message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Var\n     * @static\n     * @param {Var} message Var\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Var.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (message.bound_var != null && message.hasOwnProperty(\"bound_var\")) {\n            object.bound_var = message.bound_var;\n            if (options.oneofs)\n                object.var_instance = \"bound_var\";\n        }\n        if (message.free_var != null && message.hasOwnProperty(\"free_var\")) {\n            object.free_var = message.free_var;\n            if (options.oneofs)\n                object.var_instance = \"free_var\";\n        }\n        if (message.wildcard != null && message.hasOwnProperty(\"wildcard\")) {\n            object.wildcard = $root.Var.WildcardMsg.toObject(message.wildcard, options);\n            if (options.oneofs)\n                object.var_instance = \"wildcard\";\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Var to JSON.\n     * @function toJSON\n     * @memberof Var\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Var.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Var.WildcardMsg = (function() {\n\n        /**\n         * Properties of a WildcardMsg.\n         * @memberof Var\n         * @interface IWildcardMsg\n         */\n\n        /**\n         * Constructs a new WildcardMsg.\n         * @memberof Var\n         * @classdesc Represents a WildcardMsg.\n         * @implements IWildcardMsg\n         * @constructor\n         * @param {Var.IWildcardMsg=} [properties] Properties to set\n         */\n        function WildcardMsg(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new WildcardMsg instance using the specified properties.\n         * @function create\n         * @memberof Var.WildcardMsg\n         * @static\n         * @param {Var.IWildcardMsg=} [properties] Properties to set\n         * @returns {Var.WildcardMsg} WildcardMsg instance\n         */\n        WildcardMsg.create = function create(properties) {\n            return new WildcardMsg(properties);\n        };\n\n        /**\n         * Encodes the specified WildcardMsg message. Does not implicitly {@link Var.WildcardMsg.verify|verify} messages.\n         * @function encode\n         * @memberof Var.WildcardMsg\n         * @static\n         * @param {Var.IWildcardMsg} message WildcardMsg message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WildcardMsg.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified WildcardMsg message, length delimited. Does not implicitly {@link Var.WildcardMsg.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Var.WildcardMsg\n         * @static\n         * @param {Var.IWildcardMsg} message WildcardMsg message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WildcardMsg.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a WildcardMsg message from the specified reader or buffer.\n         * @function decode\n         * @memberof Var.WildcardMsg\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Var.WildcardMsg} WildcardMsg\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WildcardMsg.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Var.WildcardMsg();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a WildcardMsg message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Var.WildcardMsg\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Var.WildcardMsg} WildcardMsg\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WildcardMsg.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a WildcardMsg message.\n         * @function verify\n         * @memberof Var.WildcardMsg\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WildcardMsg.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a WildcardMsg message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Var.WildcardMsg\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Var.WildcardMsg} WildcardMsg\n         */\n        WildcardMsg.fromObject = function fromObject(object) {\n            if (object instanceof $root.Var.WildcardMsg)\n                return object;\n            return new $root.Var.WildcardMsg();\n        };\n\n        /**\n         * Creates a plain object from a WildcardMsg message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Var.WildcardMsg\n         * @static\n         * @param {Var.WildcardMsg} message WildcardMsg\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WildcardMsg.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this WildcardMsg to JSON.\n         * @function toJSON\n         * @memberof Var.WildcardMsg\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WildcardMsg.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return WildcardMsg;\n    })();\n\n    return Var;\n})();\n\n$root.Bundle = (function() {\n\n    /**\n     * Properties of a Bundle.\n     * @exports IBundle\n     * @interface IBundle\n     * @property {IPar|null} [body] Bundle body\n     * @property {boolean|null} [writeFlag] Bundle writeFlag\n     * @property {boolean|null} [readFlag] Bundle readFlag\n     */\n\n    /**\n     * Constructs a new Bundle.\n     * @exports Bundle\n     * @classdesc Nothing can be received from a (quoted) bundle with `readFlag = false`.\n     * Likeise nothing can be sent to a (quoted) bundle with `writeFlag = false`.\n     * \n     * If both flags are set to false, bundle allows only for equivalance check.\n     * @implements IBundle\n     * @constructor\n     * @param {IBundle=} [properties] Properties to set\n     */\n    function Bundle(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Bundle body.\n     * @member {IPar|null|undefined} body\n     * @memberof Bundle\n     * @instance\n     */\n    Bundle.prototype.body = null;\n\n    /**\n     * Bundle writeFlag.\n     * @member {boolean} writeFlag\n     * @memberof Bundle\n     * @instance\n     */\n    Bundle.prototype.writeFlag = false;\n\n    /**\n     * Bundle readFlag.\n     * @member {boolean} readFlag\n     * @memberof Bundle\n     * @instance\n     */\n    Bundle.prototype.readFlag = false;\n\n    /**\n     * Creates a new Bundle instance using the specified properties.\n     * @function create\n     * @memberof Bundle\n     * @static\n     * @param {IBundle=} [properties] Properties to set\n     * @returns {Bundle} Bundle instance\n     */\n    Bundle.create = function create(properties) {\n        return new Bundle(properties);\n    };\n\n    /**\n     * Encodes the specified Bundle message. Does not implicitly {@link Bundle.verify|verify} messages.\n     * @function encode\n     * @memberof Bundle\n     * @static\n     * @param {IBundle} message Bundle message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Bundle.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.body != null && message.hasOwnProperty(\"body\"))\n            $root.Par.encode(message.body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.writeFlag != null && message.hasOwnProperty(\"writeFlag\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.writeFlag);\n        if (message.readFlag != null && message.hasOwnProperty(\"readFlag\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.readFlag);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Bundle message, length delimited. Does not implicitly {@link Bundle.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Bundle\n     * @static\n     * @param {IBundle} message Bundle message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Bundle.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Bundle message from the specified reader or buffer.\n     * @function decode\n     * @memberof Bundle\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Bundle} Bundle\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Bundle.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Bundle();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.body = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.writeFlag = reader.bool();\n                break;\n            case 3:\n                message.readFlag = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Bundle message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Bundle\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Bundle} Bundle\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Bundle.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Bundle message.\n     * @function verify\n     * @memberof Bundle\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Bundle.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.body != null && message.hasOwnProperty(\"body\")) {\n            var error = $root.Par.verify(message.body);\n            if (error)\n                return \"body.\" + error;\n        }\n        if (message.writeFlag != null && message.hasOwnProperty(\"writeFlag\"))\n            if (typeof message.writeFlag !== \"boolean\")\n                return \"writeFlag: boolean expected\";\n        if (message.readFlag != null && message.hasOwnProperty(\"readFlag\"))\n            if (typeof message.readFlag !== \"boolean\")\n                return \"readFlag: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Bundle message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Bundle\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Bundle} Bundle\n     */\n    Bundle.fromObject = function fromObject(object) {\n        if (object instanceof $root.Bundle)\n            return object;\n        var message = new $root.Bundle();\n        if (object.body != null) {\n            if (typeof object.body !== \"object\")\n                throw TypeError(\".Bundle.body: object expected\");\n            message.body = $root.Par.fromObject(object.body);\n        }\n        if (object.writeFlag != null)\n            message.writeFlag = Boolean(object.writeFlag);\n        if (object.readFlag != null)\n            message.readFlag = Boolean(object.readFlag);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Bundle message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Bundle\n     * @static\n     * @param {Bundle} message Bundle\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Bundle.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.body = null;\n            object.writeFlag = false;\n            object.readFlag = false;\n        }\n        if (message.body != null && message.hasOwnProperty(\"body\"))\n            object.body = $root.Par.toObject(message.body, options);\n        if (message.writeFlag != null && message.hasOwnProperty(\"writeFlag\"))\n            object.writeFlag = message.writeFlag;\n        if (message.readFlag != null && message.hasOwnProperty(\"readFlag\"))\n            object.readFlag = message.readFlag;\n        return object;\n    };\n\n    /**\n     * Converts this Bundle to JSON.\n     * @function toJSON\n     * @memberof Bundle\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Bundle.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Bundle;\n})();\n\n$root.Send = (function() {\n\n    /**\n     * Properties of a Send.\n     * @exports ISend\n     * @interface ISend\n     * @property {IPar|null} [chan] Send chan\n     * @property {Array.<IPar>|null} [data] Send data\n     * @property {boolean|null} [persistent] Send persistent\n     * @property {Uint8Array|null} [locallyFree] Send locallyFree\n     * @property {boolean|null} [connective_used] Send connective_used\n     */\n\n    /**\n     * Constructs a new Send.\n     * @exports Send\n     * @classdesc A send is written `chan!(data)` or `chan!!(data)` for a persistent send.\n     * \n     * Upon send, all free variables in data are substituted with their values.\n     * @implements ISend\n     * @constructor\n     * @param {ISend=} [properties] Properties to set\n     */\n    function Send(properties) {\n        this.data = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Send chan.\n     * @member {IPar|null|undefined} chan\n     * @memberof Send\n     * @instance\n     */\n    Send.prototype.chan = null;\n\n    /**\n     * Send data.\n     * @member {Array.<IPar>} data\n     * @memberof Send\n     * @instance\n     */\n    Send.prototype.data = $util.emptyArray;\n\n    /**\n     * Send persistent.\n     * @member {boolean} persistent\n     * @memberof Send\n     * @instance\n     */\n    Send.prototype.persistent = false;\n\n    /**\n     * Send locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof Send\n     * @instance\n     */\n    Send.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * Send connective_used.\n     * @member {boolean} connective_used\n     * @memberof Send\n     * @instance\n     */\n    Send.prototype.connective_used = false;\n\n    /**\n     * Creates a new Send instance using the specified properties.\n     * @function create\n     * @memberof Send\n     * @static\n     * @param {ISend=} [properties] Properties to set\n     * @returns {Send} Send instance\n     */\n    Send.create = function create(properties) {\n        return new Send(properties);\n    };\n\n    /**\n     * Encodes the specified Send message. Does not implicitly {@link Send.verify|verify} messages.\n     * @function encode\n     * @memberof Send\n     * @static\n     * @param {ISend} message Send message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Send.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.chan != null && message.hasOwnProperty(\"chan\"))\n            $root.Par.encode(message.chan, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.data != null && message.data.length)\n            for (var i = 0; i < message.data.length; ++i)\n                $root.Par.encode(message.data[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.locallyFree);\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.connective_used);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Send message, length delimited. Does not implicitly {@link Send.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Send\n     * @static\n     * @param {ISend} message Send message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Send.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Send message from the specified reader or buffer.\n     * @function decode\n     * @memberof Send\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Send} Send\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Send.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Send();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.chan = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                if (!(message.data && message.data.length))\n                    message.data = [];\n                message.data.push($root.Par.decode(reader, reader.uint32()));\n                break;\n            case 3:\n                message.persistent = reader.bool();\n                break;\n            case 5:\n                message.locallyFree = reader.bytes();\n                break;\n            case 6:\n                message.connective_used = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Send message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Send\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Send} Send\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Send.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Send message.\n     * @function verify\n     * @memberof Send\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Send.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.chan != null && message.hasOwnProperty(\"chan\")) {\n            var error = $root.Par.verify(message.chan);\n            if (error)\n                return \"chan.\" + error;\n        }\n        if (message.data != null && message.hasOwnProperty(\"data\")) {\n            if (!Array.isArray(message.data))\n                return \"data: array expected\";\n            for (var i = 0; i < message.data.length; ++i) {\n                var error = $root.Par.verify(message.data[i]);\n                if (error)\n                    return \"data.\" + error;\n            }\n        }\n        if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n            if (typeof message.persistent !== \"boolean\")\n                return \"persistent: boolean expected\";\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            if (typeof message.connective_used !== \"boolean\")\n                return \"connective_used: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Send message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Send\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Send} Send\n     */\n    Send.fromObject = function fromObject(object) {\n        if (object instanceof $root.Send)\n            return object;\n        var message = new $root.Send();\n        if (object.chan != null) {\n            if (typeof object.chan !== \"object\")\n                throw TypeError(\".Send.chan: object expected\");\n            message.chan = $root.Par.fromObject(object.chan);\n        }\n        if (object.data) {\n            if (!Array.isArray(object.data))\n                throw TypeError(\".Send.data: array expected\");\n            message.data = [];\n            for (var i = 0; i < object.data.length; ++i) {\n                if (typeof object.data[i] !== \"object\")\n                    throw TypeError(\".Send.data: object expected\");\n                message.data[i] = $root.Par.fromObject(object.data[i]);\n            }\n        }\n        if (object.persistent != null)\n            message.persistent = Boolean(object.persistent);\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        if (object.connective_used != null)\n            message.connective_used = Boolean(object.connective_used);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Send message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Send\n     * @static\n     * @param {Send} message Send\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Send.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.data = [];\n        if (options.defaults) {\n            object.chan = null;\n            object.persistent = false;\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n            object.connective_used = false;\n        }\n        if (message.chan != null && message.hasOwnProperty(\"chan\"))\n            object.chan = $root.Par.toObject(message.chan, options);\n        if (message.data && message.data.length) {\n            object.data = [];\n            for (var j = 0; j < message.data.length; ++j)\n                object.data[j] = $root.Par.toObject(message.data[j], options);\n        }\n        if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n            object.persistent = message.persistent;\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            object.connective_used = message.connective_used;\n        return object;\n    };\n\n    /**\n     * Converts this Send to JSON.\n     * @function toJSON\n     * @memberof Send\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Send.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Send;\n})();\n\n$root.ReceiveBind = (function() {\n\n    /**\n     * Properties of a ReceiveBind.\n     * @exports IReceiveBind\n     * @interface IReceiveBind\n     * @property {Array.<IPar>|null} [patterns] ReceiveBind patterns\n     * @property {IPar|null} [source] ReceiveBind source\n     * @property {IVar|null} [remainder] ReceiveBind remainder\n     * @property {number|null} [freeCount] ReceiveBind freeCount\n     */\n\n    /**\n     * Constructs a new ReceiveBind.\n     * @exports ReceiveBind\n     * @classdesc Represents a ReceiveBind.\n     * @implements IReceiveBind\n     * @constructor\n     * @param {IReceiveBind=} [properties] Properties to set\n     */\n    function ReceiveBind(properties) {\n        this.patterns = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReceiveBind patterns.\n     * @member {Array.<IPar>} patterns\n     * @memberof ReceiveBind\n     * @instance\n     */\n    ReceiveBind.prototype.patterns = $util.emptyArray;\n\n    /**\n     * ReceiveBind source.\n     * @member {IPar|null|undefined} source\n     * @memberof ReceiveBind\n     * @instance\n     */\n    ReceiveBind.prototype.source = null;\n\n    /**\n     * ReceiveBind remainder.\n     * @member {IVar|null|undefined} remainder\n     * @memberof ReceiveBind\n     * @instance\n     */\n    ReceiveBind.prototype.remainder = null;\n\n    /**\n     * ReceiveBind freeCount.\n     * @member {number} freeCount\n     * @memberof ReceiveBind\n     * @instance\n     */\n    ReceiveBind.prototype.freeCount = 0;\n\n    /**\n     * Creates a new ReceiveBind instance using the specified properties.\n     * @function create\n     * @memberof ReceiveBind\n     * @static\n     * @param {IReceiveBind=} [properties] Properties to set\n     * @returns {ReceiveBind} ReceiveBind instance\n     */\n    ReceiveBind.create = function create(properties) {\n        return new ReceiveBind(properties);\n    };\n\n    /**\n     * Encodes the specified ReceiveBind message. Does not implicitly {@link ReceiveBind.verify|verify} messages.\n     * @function encode\n     * @memberof ReceiveBind\n     * @static\n     * @param {IReceiveBind} message ReceiveBind message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReceiveBind.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.patterns != null && message.patterns.length)\n            for (var i = 0; i < message.patterns.length; ++i)\n                $root.Par.encode(message.patterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.source != null && message.hasOwnProperty(\"source\"))\n            $root.Par.encode(message.source, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            $root.Var.encode(message.remainder, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.freeCount != null && message.hasOwnProperty(\"freeCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.freeCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReceiveBind message, length delimited. Does not implicitly {@link ReceiveBind.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReceiveBind\n     * @static\n     * @param {IReceiveBind} message ReceiveBind message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReceiveBind.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReceiveBind message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReceiveBind\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReceiveBind} ReceiveBind\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReceiveBind.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReceiveBind();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.patterns && message.patterns.length))\n                    message.patterns = [];\n                message.patterns.push($root.Par.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.source = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.remainder = $root.Var.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.freeCount = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReceiveBind message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReceiveBind\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReceiveBind} ReceiveBind\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReceiveBind.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReceiveBind message.\n     * @function verify\n     * @memberof ReceiveBind\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReceiveBind.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.patterns != null && message.hasOwnProperty(\"patterns\")) {\n            if (!Array.isArray(message.patterns))\n                return \"patterns: array expected\";\n            for (var i = 0; i < message.patterns.length; ++i) {\n                var error = $root.Par.verify(message.patterns[i]);\n                if (error)\n                    return \"patterns.\" + error;\n            }\n        }\n        if (message.source != null && message.hasOwnProperty(\"source\")) {\n            var error = $root.Par.verify(message.source);\n            if (error)\n                return \"source.\" + error;\n        }\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\")) {\n            var error = $root.Var.verify(message.remainder);\n            if (error)\n                return \"remainder.\" + error;\n        }\n        if (message.freeCount != null && message.hasOwnProperty(\"freeCount\"))\n            if (!$util.isInteger(message.freeCount))\n                return \"freeCount: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ReceiveBind message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ReceiveBind\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ReceiveBind} ReceiveBind\n     */\n    ReceiveBind.fromObject = function fromObject(object) {\n        if (object instanceof $root.ReceiveBind)\n            return object;\n        var message = new $root.ReceiveBind();\n        if (object.patterns) {\n            if (!Array.isArray(object.patterns))\n                throw TypeError(\".ReceiveBind.patterns: array expected\");\n            message.patterns = [];\n            for (var i = 0; i < object.patterns.length; ++i) {\n                if (typeof object.patterns[i] !== \"object\")\n                    throw TypeError(\".ReceiveBind.patterns: object expected\");\n                message.patterns[i] = $root.Par.fromObject(object.patterns[i]);\n            }\n        }\n        if (object.source != null) {\n            if (typeof object.source !== \"object\")\n                throw TypeError(\".ReceiveBind.source: object expected\");\n            message.source = $root.Par.fromObject(object.source);\n        }\n        if (object.remainder != null) {\n            if (typeof object.remainder !== \"object\")\n                throw TypeError(\".ReceiveBind.remainder: object expected\");\n            message.remainder = $root.Var.fromObject(object.remainder);\n        }\n        if (object.freeCount != null)\n            message.freeCount = object.freeCount | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ReceiveBind message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReceiveBind\n     * @static\n     * @param {ReceiveBind} message ReceiveBind\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReceiveBind.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.patterns = [];\n        if (options.defaults) {\n            object.source = null;\n            object.remainder = null;\n            object.freeCount = 0;\n        }\n        if (message.patterns && message.patterns.length) {\n            object.patterns = [];\n            for (var j = 0; j < message.patterns.length; ++j)\n                object.patterns[j] = $root.Par.toObject(message.patterns[j], options);\n        }\n        if (message.source != null && message.hasOwnProperty(\"source\"))\n            object.source = $root.Par.toObject(message.source, options);\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            object.remainder = $root.Var.toObject(message.remainder, options);\n        if (message.freeCount != null && message.hasOwnProperty(\"freeCount\"))\n            object.freeCount = message.freeCount;\n        return object;\n    };\n\n    /**\n     * Converts this ReceiveBind to JSON.\n     * @function toJSON\n     * @memberof ReceiveBind\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReceiveBind.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReceiveBind;\n})();\n\n$root.BindPattern = (function() {\n\n    /**\n     * Properties of a BindPattern.\n     * @exports IBindPattern\n     * @interface IBindPattern\n     * @property {Array.<IPar>|null} [patterns] BindPattern patterns\n     * @property {IVar|null} [remainder] BindPattern remainder\n     * @property {number|null} [freeCount] BindPattern freeCount\n     */\n\n    /**\n     * Constructs a new BindPattern.\n     * @exports BindPattern\n     * @classdesc Represents a BindPattern.\n     * @implements IBindPattern\n     * @constructor\n     * @param {IBindPattern=} [properties] Properties to set\n     */\n    function BindPattern(properties) {\n        this.patterns = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * BindPattern patterns.\n     * @member {Array.<IPar>} patterns\n     * @memberof BindPattern\n     * @instance\n     */\n    BindPattern.prototype.patterns = $util.emptyArray;\n\n    /**\n     * BindPattern remainder.\n     * @member {IVar|null|undefined} remainder\n     * @memberof BindPattern\n     * @instance\n     */\n    BindPattern.prototype.remainder = null;\n\n    /**\n     * BindPattern freeCount.\n     * @member {number} freeCount\n     * @memberof BindPattern\n     * @instance\n     */\n    BindPattern.prototype.freeCount = 0;\n\n    /**\n     * Creates a new BindPattern instance using the specified properties.\n     * @function create\n     * @memberof BindPattern\n     * @static\n     * @param {IBindPattern=} [properties] Properties to set\n     * @returns {BindPattern} BindPattern instance\n     */\n    BindPattern.create = function create(properties) {\n        return new BindPattern(properties);\n    };\n\n    /**\n     * Encodes the specified BindPattern message. Does not implicitly {@link BindPattern.verify|verify} messages.\n     * @function encode\n     * @memberof BindPattern\n     * @static\n     * @param {IBindPattern} message BindPattern message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BindPattern.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.patterns != null && message.patterns.length)\n            for (var i = 0; i < message.patterns.length; ++i)\n                $root.Par.encode(message.patterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            $root.Var.encode(message.remainder, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.freeCount != null && message.hasOwnProperty(\"freeCount\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.freeCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified BindPattern message, length delimited. Does not implicitly {@link BindPattern.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof BindPattern\n     * @static\n     * @param {IBindPattern} message BindPattern message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BindPattern.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a BindPattern message from the specified reader or buffer.\n     * @function decode\n     * @memberof BindPattern\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {BindPattern} BindPattern\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BindPattern.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.BindPattern();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.patterns && message.patterns.length))\n                    message.patterns = [];\n                message.patterns.push($root.Par.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.remainder = $root.Var.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.freeCount = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a BindPattern message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof BindPattern\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {BindPattern} BindPattern\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BindPattern.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a BindPattern message.\n     * @function verify\n     * @memberof BindPattern\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    BindPattern.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.patterns != null && message.hasOwnProperty(\"patterns\")) {\n            if (!Array.isArray(message.patterns))\n                return \"patterns: array expected\";\n            for (var i = 0; i < message.patterns.length; ++i) {\n                var error = $root.Par.verify(message.patterns[i]);\n                if (error)\n                    return \"patterns.\" + error;\n            }\n        }\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\")) {\n            var error = $root.Var.verify(message.remainder);\n            if (error)\n                return \"remainder.\" + error;\n        }\n        if (message.freeCount != null && message.hasOwnProperty(\"freeCount\"))\n            if (!$util.isInteger(message.freeCount))\n                return \"freeCount: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a BindPattern message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof BindPattern\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {BindPattern} BindPattern\n     */\n    BindPattern.fromObject = function fromObject(object) {\n        if (object instanceof $root.BindPattern)\n            return object;\n        var message = new $root.BindPattern();\n        if (object.patterns) {\n            if (!Array.isArray(object.patterns))\n                throw TypeError(\".BindPattern.patterns: array expected\");\n            message.patterns = [];\n            for (var i = 0; i < object.patterns.length; ++i) {\n                if (typeof object.patterns[i] !== \"object\")\n                    throw TypeError(\".BindPattern.patterns: object expected\");\n                message.patterns[i] = $root.Par.fromObject(object.patterns[i]);\n            }\n        }\n        if (object.remainder != null) {\n            if (typeof object.remainder !== \"object\")\n                throw TypeError(\".BindPattern.remainder: object expected\");\n            message.remainder = $root.Var.fromObject(object.remainder);\n        }\n        if (object.freeCount != null)\n            message.freeCount = object.freeCount | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a BindPattern message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof BindPattern\n     * @static\n     * @param {BindPattern} message BindPattern\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BindPattern.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.patterns = [];\n        if (options.defaults) {\n            object.remainder = null;\n            object.freeCount = 0;\n        }\n        if (message.patterns && message.patterns.length) {\n            object.patterns = [];\n            for (var j = 0; j < message.patterns.length; ++j)\n                object.patterns[j] = $root.Par.toObject(message.patterns[j], options);\n        }\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            object.remainder = $root.Var.toObject(message.remainder, options);\n        if (message.freeCount != null && message.hasOwnProperty(\"freeCount\"))\n            object.freeCount = message.freeCount;\n        return object;\n    };\n\n    /**\n     * Converts this BindPattern to JSON.\n     * @function toJSON\n     * @memberof BindPattern\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BindPattern.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return BindPattern;\n})();\n\n$root.ListBindPatterns = (function() {\n\n    /**\n     * Properties of a ListBindPatterns.\n     * @exports IListBindPatterns\n     * @interface IListBindPatterns\n     * @property {Array.<IBindPattern>|null} [patterns] ListBindPatterns patterns\n     */\n\n    /**\n     * Constructs a new ListBindPatterns.\n     * @exports ListBindPatterns\n     * @classdesc Represents a ListBindPatterns.\n     * @implements IListBindPatterns\n     * @constructor\n     * @param {IListBindPatterns=} [properties] Properties to set\n     */\n    function ListBindPatterns(properties) {\n        this.patterns = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ListBindPatterns patterns.\n     * @member {Array.<IBindPattern>} patterns\n     * @memberof ListBindPatterns\n     * @instance\n     */\n    ListBindPatterns.prototype.patterns = $util.emptyArray;\n\n    /**\n     * Creates a new ListBindPatterns instance using the specified properties.\n     * @function create\n     * @memberof ListBindPatterns\n     * @static\n     * @param {IListBindPatterns=} [properties] Properties to set\n     * @returns {ListBindPatterns} ListBindPatterns instance\n     */\n    ListBindPatterns.create = function create(properties) {\n        return new ListBindPatterns(properties);\n    };\n\n    /**\n     * Encodes the specified ListBindPatterns message. Does not implicitly {@link ListBindPatterns.verify|verify} messages.\n     * @function encode\n     * @memberof ListBindPatterns\n     * @static\n     * @param {IListBindPatterns} message ListBindPatterns message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ListBindPatterns.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.patterns != null && message.patterns.length)\n            for (var i = 0; i < message.patterns.length; ++i)\n                $root.BindPattern.encode(message.patterns[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ListBindPatterns message, length delimited. Does not implicitly {@link ListBindPatterns.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ListBindPatterns\n     * @static\n     * @param {IListBindPatterns} message ListBindPatterns message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ListBindPatterns.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ListBindPatterns message from the specified reader or buffer.\n     * @function decode\n     * @memberof ListBindPatterns\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ListBindPatterns} ListBindPatterns\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ListBindPatterns.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ListBindPatterns();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.patterns && message.patterns.length))\n                    message.patterns = [];\n                message.patterns.push($root.BindPattern.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ListBindPatterns message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ListBindPatterns\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ListBindPatterns} ListBindPatterns\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ListBindPatterns.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ListBindPatterns message.\n     * @function verify\n     * @memberof ListBindPatterns\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ListBindPatterns.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.patterns != null && message.hasOwnProperty(\"patterns\")) {\n            if (!Array.isArray(message.patterns))\n                return \"patterns: array expected\";\n            for (var i = 0; i < message.patterns.length; ++i) {\n                var error = $root.BindPattern.verify(message.patterns[i]);\n                if (error)\n                    return \"patterns.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ListBindPatterns message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ListBindPatterns\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ListBindPatterns} ListBindPatterns\n     */\n    ListBindPatterns.fromObject = function fromObject(object) {\n        if (object instanceof $root.ListBindPatterns)\n            return object;\n        var message = new $root.ListBindPatterns();\n        if (object.patterns) {\n            if (!Array.isArray(object.patterns))\n                throw TypeError(\".ListBindPatterns.patterns: array expected\");\n            message.patterns = [];\n            for (var i = 0; i < object.patterns.length; ++i) {\n                if (typeof object.patterns[i] !== \"object\")\n                    throw TypeError(\".ListBindPatterns.patterns: object expected\");\n                message.patterns[i] = $root.BindPattern.fromObject(object.patterns[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ListBindPatterns message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ListBindPatterns\n     * @static\n     * @param {ListBindPatterns} message ListBindPatterns\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ListBindPatterns.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.patterns = [];\n        if (message.patterns && message.patterns.length) {\n            object.patterns = [];\n            for (var j = 0; j < message.patterns.length; ++j)\n                object.patterns[j] = $root.BindPattern.toObject(message.patterns[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ListBindPatterns to JSON.\n     * @function toJSON\n     * @memberof ListBindPatterns\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ListBindPatterns.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ListBindPatterns;\n})();\n\n$root.Receive = (function() {\n\n    /**\n     * Properties of a Receive.\n     * @exports IReceive\n     * @interface IReceive\n     * @property {Array.<IReceiveBind>|null} [binds] Receive binds\n     * @property {IPar|null} [body] Receive body\n     * @property {boolean|null} [persistent] Receive persistent\n     * @property {boolean|null} [peek] Receive peek\n     * @property {number|null} [bindCount] Receive bindCount\n     * @property {Uint8Array|null} [locallyFree] Receive locallyFree\n     * @property {boolean|null} [connective_used] Receive connective_used\n     */\n\n    /**\n     * Constructs a new Receive.\n     * @exports Receive\n     * @classdesc A receive is written `for(binds) { body }`\n     * i.e. `for(patterns <- source) { body }`\n     * or for a persistent recieve: `for(patterns <= source) { body }`.\n     * \n     * It's an error for free Variable to occur more than once in a pattern.\n     * @implements IReceive\n     * @constructor\n     * @param {IReceive=} [properties] Properties to set\n     */\n    function Receive(properties) {\n        this.binds = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Receive binds.\n     * @member {Array.<IReceiveBind>} binds\n     * @memberof Receive\n     * @instance\n     */\n    Receive.prototype.binds = $util.emptyArray;\n\n    /**\n     * Receive body.\n     * @member {IPar|null|undefined} body\n     * @memberof Receive\n     * @instance\n     */\n    Receive.prototype.body = null;\n\n    /**\n     * Receive persistent.\n     * @member {boolean} persistent\n     * @memberof Receive\n     * @instance\n     */\n    Receive.prototype.persistent = false;\n\n    /**\n     * Receive peek.\n     * @member {boolean} peek\n     * @memberof Receive\n     * @instance\n     */\n    Receive.prototype.peek = false;\n\n    /**\n     * Receive bindCount.\n     * @member {number} bindCount\n     * @memberof Receive\n     * @instance\n     */\n    Receive.prototype.bindCount = 0;\n\n    /**\n     * Receive locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof Receive\n     * @instance\n     */\n    Receive.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * Receive connective_used.\n     * @member {boolean} connective_used\n     * @memberof Receive\n     * @instance\n     */\n    Receive.prototype.connective_used = false;\n\n    /**\n     * Creates a new Receive instance using the specified properties.\n     * @function create\n     * @memberof Receive\n     * @static\n     * @param {IReceive=} [properties] Properties to set\n     * @returns {Receive} Receive instance\n     */\n    Receive.create = function create(properties) {\n        return new Receive(properties);\n    };\n\n    /**\n     * Encodes the specified Receive message. Does not implicitly {@link Receive.verify|verify} messages.\n     * @function encode\n     * @memberof Receive\n     * @static\n     * @param {IReceive} message Receive message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Receive.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.binds != null && message.binds.length)\n            for (var i = 0; i < message.binds.length; ++i)\n                $root.ReceiveBind.encode(message.binds[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.body != null && message.hasOwnProperty(\"body\"))\n            $root.Par.encode(message.body, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.persistent);\n        if (message.peek != null && message.hasOwnProperty(\"peek\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.peek);\n        if (message.bindCount != null && message.hasOwnProperty(\"bindCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.bindCount);\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.locallyFree);\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.connective_used);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Receive message, length delimited. Does not implicitly {@link Receive.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Receive\n     * @static\n     * @param {IReceive} message Receive message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Receive.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Receive message from the specified reader or buffer.\n     * @function decode\n     * @memberof Receive\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Receive} Receive\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Receive.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Receive();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.binds && message.binds.length))\n                    message.binds = [];\n                message.binds.push($root.ReceiveBind.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                message.body = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.persistent = reader.bool();\n                break;\n            case 4:\n                message.peek = reader.bool();\n                break;\n            case 5:\n                message.bindCount = reader.int32();\n                break;\n            case 6:\n                message.locallyFree = reader.bytes();\n                break;\n            case 7:\n                message.connective_used = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Receive message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Receive\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Receive} Receive\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Receive.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Receive message.\n     * @function verify\n     * @memberof Receive\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Receive.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.binds != null && message.hasOwnProperty(\"binds\")) {\n            if (!Array.isArray(message.binds))\n                return \"binds: array expected\";\n            for (var i = 0; i < message.binds.length; ++i) {\n                var error = $root.ReceiveBind.verify(message.binds[i]);\n                if (error)\n                    return \"binds.\" + error;\n            }\n        }\n        if (message.body != null && message.hasOwnProperty(\"body\")) {\n            var error = $root.Par.verify(message.body);\n            if (error)\n                return \"body.\" + error;\n        }\n        if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n            if (typeof message.persistent !== \"boolean\")\n                return \"persistent: boolean expected\";\n        if (message.peek != null && message.hasOwnProperty(\"peek\"))\n            if (typeof message.peek !== \"boolean\")\n                return \"peek: boolean expected\";\n        if (message.bindCount != null && message.hasOwnProperty(\"bindCount\"))\n            if (!$util.isInteger(message.bindCount))\n                return \"bindCount: integer expected\";\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            if (typeof message.connective_used !== \"boolean\")\n                return \"connective_used: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Receive message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Receive\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Receive} Receive\n     */\n    Receive.fromObject = function fromObject(object) {\n        if (object instanceof $root.Receive)\n            return object;\n        var message = new $root.Receive();\n        if (object.binds) {\n            if (!Array.isArray(object.binds))\n                throw TypeError(\".Receive.binds: array expected\");\n            message.binds = [];\n            for (var i = 0; i < object.binds.length; ++i) {\n                if (typeof object.binds[i] !== \"object\")\n                    throw TypeError(\".Receive.binds: object expected\");\n                message.binds[i] = $root.ReceiveBind.fromObject(object.binds[i]);\n            }\n        }\n        if (object.body != null) {\n            if (typeof object.body !== \"object\")\n                throw TypeError(\".Receive.body: object expected\");\n            message.body = $root.Par.fromObject(object.body);\n        }\n        if (object.persistent != null)\n            message.persistent = Boolean(object.persistent);\n        if (object.peek != null)\n            message.peek = Boolean(object.peek);\n        if (object.bindCount != null)\n            message.bindCount = object.bindCount | 0;\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        if (object.connective_used != null)\n            message.connective_used = Boolean(object.connective_used);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Receive message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Receive\n     * @static\n     * @param {Receive} message Receive\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Receive.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.binds = [];\n        if (options.defaults) {\n            object.body = null;\n            object.persistent = false;\n            object.peek = false;\n            object.bindCount = 0;\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n            object.connective_used = false;\n        }\n        if (message.binds && message.binds.length) {\n            object.binds = [];\n            for (var j = 0; j < message.binds.length; ++j)\n                object.binds[j] = $root.ReceiveBind.toObject(message.binds[j], options);\n        }\n        if (message.body != null && message.hasOwnProperty(\"body\"))\n            object.body = $root.Par.toObject(message.body, options);\n        if (message.persistent != null && message.hasOwnProperty(\"persistent\"))\n            object.persistent = message.persistent;\n        if (message.peek != null && message.hasOwnProperty(\"peek\"))\n            object.peek = message.peek;\n        if (message.bindCount != null && message.hasOwnProperty(\"bindCount\"))\n            object.bindCount = message.bindCount;\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            object.connective_used = message.connective_used;\n        return object;\n    };\n\n    /**\n     * Converts this Receive to JSON.\n     * @function toJSON\n     * @memberof Receive\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Receive.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Receive;\n})();\n\n$root.New = (function() {\n\n    /**\n     * Properties of a New.\n     * @exports INew\n     * @interface INew\n     * @property {number|null} [bindCount] New bindCount\n     * @property {IPar|null} [p] New p\n     * @property {Array.<string>|null} [uri] New uri\n     * @property {Object.<string,IPar>|null} [injections] New injections\n     * @property {Uint8Array|null} [locallyFree] New locallyFree\n     */\n\n    /**\n     * Constructs a new New.\n     * @exports New\n     * @classdesc Represents a New.\n     * @implements INew\n     * @constructor\n     * @param {INew=} [properties] Properties to set\n     */\n    function New(properties) {\n        this.uri = [];\n        this.injections = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * New bindCount.\n     * @member {number} bindCount\n     * @memberof New\n     * @instance\n     */\n    New.prototype.bindCount = 0;\n\n    /**\n     * New p.\n     * @member {IPar|null|undefined} p\n     * @memberof New\n     * @instance\n     */\n    New.prototype.p = null;\n\n    /**\n     * New uri.\n     * @member {Array.<string>} uri\n     * @memberof New\n     * @instance\n     */\n    New.prototype.uri = $util.emptyArray;\n\n    /**\n     * New injections.\n     * @member {Object.<string,IPar>} injections\n     * @memberof New\n     * @instance\n     */\n    New.prototype.injections = $util.emptyObject;\n\n    /**\n     * New locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof New\n     * @instance\n     */\n    New.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * Creates a new New instance using the specified properties.\n     * @function create\n     * @memberof New\n     * @static\n     * @param {INew=} [properties] Properties to set\n     * @returns {New} New instance\n     */\n    New.create = function create(properties) {\n        return new New(properties);\n    };\n\n    /**\n     * Encodes the specified New message. Does not implicitly {@link New.verify|verify} messages.\n     * @function encode\n     * @memberof New\n     * @static\n     * @param {INew} message New message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    New.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.bindCount != null && message.hasOwnProperty(\"bindCount\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.bindCount);\n        if (message.p != null && message.hasOwnProperty(\"p\"))\n            $root.Par.encode(message.p, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.uri != null && message.uri.length)\n            for (var i = 0; i < message.uri.length; ++i)\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.uri[i]);\n        if (message.injections != null && message.hasOwnProperty(\"injections\"))\n            for (var keys = Object.keys(message.injections), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.Par.encode(message.injections[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.locallyFree);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified New message, length delimited. Does not implicitly {@link New.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof New\n     * @static\n     * @param {INew} message New message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    New.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a New message from the specified reader or buffer.\n     * @function decode\n     * @memberof New\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {New} New\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    New.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.New(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.bindCount = reader.sint32();\n                break;\n            case 2:\n                message.p = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 3:\n                if (!(message.uri && message.uri.length))\n                    message.uri = [];\n                message.uri.push(reader.string());\n                break;\n            case 4:\n                reader.skip().pos++;\n                if (message.injections === $util.emptyObject)\n                    message.injections = {};\n                key = reader.string();\n                reader.pos++;\n                message.injections[key] = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 5:\n                message.locallyFree = reader.bytes();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a New message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof New\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {New} New\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    New.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a New message.\n     * @function verify\n     * @memberof New\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    New.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.bindCount != null && message.hasOwnProperty(\"bindCount\"))\n            if (!$util.isInteger(message.bindCount))\n                return \"bindCount: integer expected\";\n        if (message.p != null && message.hasOwnProperty(\"p\")) {\n            var error = $root.Par.verify(message.p);\n            if (error)\n                return \"p.\" + error;\n        }\n        if (message.uri != null && message.hasOwnProperty(\"uri\")) {\n            if (!Array.isArray(message.uri))\n                return \"uri: array expected\";\n            for (var i = 0; i < message.uri.length; ++i)\n                if (!$util.isString(message.uri[i]))\n                    return \"uri: string[] expected\";\n        }\n        if (message.injections != null && message.hasOwnProperty(\"injections\")) {\n            if (!$util.isObject(message.injections))\n                return \"injections: object expected\";\n            var key = Object.keys(message.injections);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.Par.verify(message.injections[key[i]]);\n                if (error)\n                    return \"injections.\" + error;\n            }\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a New message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof New\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {New} New\n     */\n    New.fromObject = function fromObject(object) {\n        if (object instanceof $root.New)\n            return object;\n        var message = new $root.New();\n        if (object.bindCount != null)\n            message.bindCount = object.bindCount | 0;\n        if (object.p != null) {\n            if (typeof object.p !== \"object\")\n                throw TypeError(\".New.p: object expected\");\n            message.p = $root.Par.fromObject(object.p);\n        }\n        if (object.uri) {\n            if (!Array.isArray(object.uri))\n                throw TypeError(\".New.uri: array expected\");\n            message.uri = [];\n            for (var i = 0; i < object.uri.length; ++i)\n                message.uri[i] = String(object.uri[i]);\n        }\n        if (object.injections) {\n            if (typeof object.injections !== \"object\")\n                throw TypeError(\".New.injections: object expected\");\n            message.injections = {};\n            for (var keys = Object.keys(object.injections), i = 0; i < keys.length; ++i) {\n                if (typeof object.injections[keys[i]] !== \"object\")\n                    throw TypeError(\".New.injections: object expected\");\n                message.injections[keys[i]] = $root.Par.fromObject(object.injections[keys[i]]);\n            }\n        }\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a New message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof New\n     * @static\n     * @param {New} message New\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    New.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.uri = [];\n        if (options.objects || options.defaults)\n            object.injections = {};\n        if (options.defaults) {\n            object.bindCount = 0;\n            object.p = null;\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n        }\n        if (message.bindCount != null && message.hasOwnProperty(\"bindCount\"))\n            object.bindCount = message.bindCount;\n        if (message.p != null && message.hasOwnProperty(\"p\"))\n            object.p = $root.Par.toObject(message.p, options);\n        if (message.uri && message.uri.length) {\n            object.uri = [];\n            for (var j = 0; j < message.uri.length; ++j)\n                object.uri[j] = message.uri[j];\n        }\n        var keys2;\n        if (message.injections && (keys2 = Object.keys(message.injections)).length) {\n            object.injections = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.injections[keys2[j]] = $root.Par.toObject(message.injections[keys2[j]], options);\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        return object;\n    };\n\n    /**\n     * Converts this New to JSON.\n     * @function toJSON\n     * @memberof New\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    New.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return New;\n})();\n\n$root.MatchCase = (function() {\n\n    /**\n     * Properties of a MatchCase.\n     * @exports IMatchCase\n     * @interface IMatchCase\n     * @property {IPar|null} [pattern] MatchCase pattern\n     * @property {IPar|null} [source] MatchCase source\n     * @property {number|null} [freeCount] MatchCase freeCount\n     */\n\n    /**\n     * Constructs a new MatchCase.\n     * @exports MatchCase\n     * @classdesc Represents a MatchCase.\n     * @implements IMatchCase\n     * @constructor\n     * @param {IMatchCase=} [properties] Properties to set\n     */\n    function MatchCase(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * MatchCase pattern.\n     * @member {IPar|null|undefined} pattern\n     * @memberof MatchCase\n     * @instance\n     */\n    MatchCase.prototype.pattern = null;\n\n    /**\n     * MatchCase source.\n     * @member {IPar|null|undefined} source\n     * @memberof MatchCase\n     * @instance\n     */\n    MatchCase.prototype.source = null;\n\n    /**\n     * MatchCase freeCount.\n     * @member {number} freeCount\n     * @memberof MatchCase\n     * @instance\n     */\n    MatchCase.prototype.freeCount = 0;\n\n    /**\n     * Creates a new MatchCase instance using the specified properties.\n     * @function create\n     * @memberof MatchCase\n     * @static\n     * @param {IMatchCase=} [properties] Properties to set\n     * @returns {MatchCase} MatchCase instance\n     */\n    MatchCase.create = function create(properties) {\n        return new MatchCase(properties);\n    };\n\n    /**\n     * Encodes the specified MatchCase message. Does not implicitly {@link MatchCase.verify|verify} messages.\n     * @function encode\n     * @memberof MatchCase\n     * @static\n     * @param {IMatchCase} message MatchCase message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MatchCase.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.pattern != null && message.hasOwnProperty(\"pattern\"))\n            $root.Par.encode(message.pattern, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.source != null && message.hasOwnProperty(\"source\"))\n            $root.Par.encode(message.source, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.freeCount != null && message.hasOwnProperty(\"freeCount\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.freeCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified MatchCase message, length delimited. Does not implicitly {@link MatchCase.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof MatchCase\n     * @static\n     * @param {IMatchCase} message MatchCase message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    MatchCase.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a MatchCase message from the specified reader or buffer.\n     * @function decode\n     * @memberof MatchCase\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {MatchCase} MatchCase\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MatchCase.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MatchCase();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.pattern = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.source = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.freeCount = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a MatchCase message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof MatchCase\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {MatchCase} MatchCase\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    MatchCase.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a MatchCase message.\n     * @function verify\n     * @memberof MatchCase\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    MatchCase.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.pattern != null && message.hasOwnProperty(\"pattern\")) {\n            var error = $root.Par.verify(message.pattern);\n            if (error)\n                return \"pattern.\" + error;\n        }\n        if (message.source != null && message.hasOwnProperty(\"source\")) {\n            var error = $root.Par.verify(message.source);\n            if (error)\n                return \"source.\" + error;\n        }\n        if (message.freeCount != null && message.hasOwnProperty(\"freeCount\"))\n            if (!$util.isInteger(message.freeCount))\n                return \"freeCount: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a MatchCase message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof MatchCase\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {MatchCase} MatchCase\n     */\n    MatchCase.fromObject = function fromObject(object) {\n        if (object instanceof $root.MatchCase)\n            return object;\n        var message = new $root.MatchCase();\n        if (object.pattern != null) {\n            if (typeof object.pattern !== \"object\")\n                throw TypeError(\".MatchCase.pattern: object expected\");\n            message.pattern = $root.Par.fromObject(object.pattern);\n        }\n        if (object.source != null) {\n            if (typeof object.source !== \"object\")\n                throw TypeError(\".MatchCase.source: object expected\");\n            message.source = $root.Par.fromObject(object.source);\n        }\n        if (object.freeCount != null)\n            message.freeCount = object.freeCount | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a MatchCase message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof MatchCase\n     * @static\n     * @param {MatchCase} message MatchCase\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    MatchCase.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.pattern = null;\n            object.source = null;\n            object.freeCount = 0;\n        }\n        if (message.pattern != null && message.hasOwnProperty(\"pattern\"))\n            object.pattern = $root.Par.toObject(message.pattern, options);\n        if (message.source != null && message.hasOwnProperty(\"source\"))\n            object.source = $root.Par.toObject(message.source, options);\n        if (message.freeCount != null && message.hasOwnProperty(\"freeCount\"))\n            object.freeCount = message.freeCount;\n        return object;\n    };\n\n    /**\n     * Converts this MatchCase to JSON.\n     * @function toJSON\n     * @memberof MatchCase\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    MatchCase.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return MatchCase;\n})();\n\n$root.Match = (function() {\n\n    /**\n     * Properties of a Match.\n     * @exports IMatch\n     * @interface IMatch\n     * @property {IPar|null} [target] Match target\n     * @property {Array.<IMatchCase>|null} [cases] Match cases\n     * @property {Uint8Array|null} [locallyFree] Match locallyFree\n     * @property {boolean|null} [connective_used] Match connective_used\n     */\n\n    /**\n     * Constructs a new Match.\n     * @exports Match\n     * @classdesc Represents a Match.\n     * @implements IMatch\n     * @constructor\n     * @param {IMatch=} [properties] Properties to set\n     */\n    function Match(properties) {\n        this.cases = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Match target.\n     * @member {IPar|null|undefined} target\n     * @memberof Match\n     * @instance\n     */\n    Match.prototype.target = null;\n\n    /**\n     * Match cases.\n     * @member {Array.<IMatchCase>} cases\n     * @memberof Match\n     * @instance\n     */\n    Match.prototype.cases = $util.emptyArray;\n\n    /**\n     * Match locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof Match\n     * @instance\n     */\n    Match.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * Match connective_used.\n     * @member {boolean} connective_used\n     * @memberof Match\n     * @instance\n     */\n    Match.prototype.connective_used = false;\n\n    /**\n     * Creates a new Match instance using the specified properties.\n     * @function create\n     * @memberof Match\n     * @static\n     * @param {IMatch=} [properties] Properties to set\n     * @returns {Match} Match instance\n     */\n    Match.create = function create(properties) {\n        return new Match(properties);\n    };\n\n    /**\n     * Encodes the specified Match message. Does not implicitly {@link Match.verify|verify} messages.\n     * @function encode\n     * @memberof Match\n     * @static\n     * @param {IMatch} message Match message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Match.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.target != null && message.hasOwnProperty(\"target\"))\n            $root.Par.encode(message.target, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.cases != null && message.cases.length)\n            for (var i = 0; i < message.cases.length; ++i)\n                $root.MatchCase.encode(message.cases[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.locallyFree);\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.connective_used);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Match message, length delimited. Does not implicitly {@link Match.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Match\n     * @static\n     * @param {IMatch} message Match message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Match.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Match message from the specified reader or buffer.\n     * @function decode\n     * @memberof Match\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Match} Match\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Match.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Match();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.target = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                if (!(message.cases && message.cases.length))\n                    message.cases = [];\n                message.cases.push($root.MatchCase.decode(reader, reader.uint32()));\n                break;\n            case 4:\n                message.locallyFree = reader.bytes();\n                break;\n            case 5:\n                message.connective_used = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Match message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Match\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Match} Match\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Match.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Match message.\n     * @function verify\n     * @memberof Match\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Match.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.target != null && message.hasOwnProperty(\"target\")) {\n            var error = $root.Par.verify(message.target);\n            if (error)\n                return \"target.\" + error;\n        }\n        if (message.cases != null && message.hasOwnProperty(\"cases\")) {\n            if (!Array.isArray(message.cases))\n                return \"cases: array expected\";\n            for (var i = 0; i < message.cases.length; ++i) {\n                var error = $root.MatchCase.verify(message.cases[i]);\n                if (error)\n                    return \"cases.\" + error;\n            }\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            if (typeof message.connective_used !== \"boolean\")\n                return \"connective_used: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Match message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Match\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Match} Match\n     */\n    Match.fromObject = function fromObject(object) {\n        if (object instanceof $root.Match)\n            return object;\n        var message = new $root.Match();\n        if (object.target != null) {\n            if (typeof object.target !== \"object\")\n                throw TypeError(\".Match.target: object expected\");\n            message.target = $root.Par.fromObject(object.target);\n        }\n        if (object.cases) {\n            if (!Array.isArray(object.cases))\n                throw TypeError(\".Match.cases: array expected\");\n            message.cases = [];\n            for (var i = 0; i < object.cases.length; ++i) {\n                if (typeof object.cases[i] !== \"object\")\n                    throw TypeError(\".Match.cases: object expected\");\n                message.cases[i] = $root.MatchCase.fromObject(object.cases[i]);\n            }\n        }\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        if (object.connective_used != null)\n            message.connective_used = Boolean(object.connective_used);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Match message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Match\n     * @static\n     * @param {Match} message Match\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Match.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.cases = [];\n        if (options.defaults) {\n            object.target = null;\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n            object.connective_used = false;\n        }\n        if (message.target != null && message.hasOwnProperty(\"target\"))\n            object.target = $root.Par.toObject(message.target, options);\n        if (message.cases && message.cases.length) {\n            object.cases = [];\n            for (var j = 0; j < message.cases.length; ++j)\n                object.cases[j] = $root.MatchCase.toObject(message.cases[j], options);\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            object.connective_used = message.connective_used;\n        return object;\n    };\n\n    /**\n     * Converts this Match to JSON.\n     * @function toJSON\n     * @memberof Match\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Match.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Match;\n})();\n\n$root.Expr = (function() {\n\n    /**\n     * Properties of an Expr.\n     * @exports IExpr\n     * @interface IExpr\n     * @property {boolean|null} [g_bool] Expr g_bool\n     * @property {number|Long|null} [g_int] Expr g_int\n     * @property {string|null} [g_string] Expr g_string\n     * @property {string|null} [g_uri] Expr g_uri\n     * @property {Uint8Array|null} [g_byte_array] Expr g_byte_array\n     * @property {IENot|null} [e_not_body] Expr e_not_body\n     * @property {IENeg|null} [e_neg_body] Expr e_neg_body\n     * @property {IEMult|null} [e_mult_body] Expr e_mult_body\n     * @property {IEDiv|null} [e_div_body] Expr e_div_body\n     * @property {IEPlus|null} [e_plus_body] Expr e_plus_body\n     * @property {IEMinus|null} [e_minus_body] Expr e_minus_body\n     * @property {IELt|null} [e_lt_body] Expr e_lt_body\n     * @property {IELte|null} [e_lte_body] Expr e_lte_body\n     * @property {IEGt|null} [e_gt_body] Expr e_gt_body\n     * @property {IEGte|null} [e_gte_body] Expr e_gte_body\n     * @property {IEEq|null} [e_eq_body] Expr e_eq_body\n     * @property {IENeq|null} [e_neq_body] Expr e_neq_body\n     * @property {IEAnd|null} [e_and_body] Expr e_and_body\n     * @property {IEOr|null} [e_or_body] Expr e_or_body\n     * @property {IEVar|null} [e_var_body] Expr e_var_body\n     * @property {IEList|null} [e_list_body] Expr e_list_body\n     * @property {IETuple|null} [e_tuple_body] Expr e_tuple_body\n     * @property {IESet|null} [e_set_body] Expr e_set_body\n     * @property {IEMap|null} [e_map_body] Expr e_map_body\n     * @property {IEMethod|null} [e_method_body] Expr e_method_body\n     * @property {IEMatches|null} [e_matches_body] Expr e_matches_body\n     * @property {IEPercentPercent|null} [e_percent_percent_body] Expr e_percent_percent_body\n     * @property {IEPlusPlus|null} [e_plus_plus_body] Expr e_plus_plus_body\n     * @property {IEMinusMinus|null} [e_minus_minus_body] Expr e_minus_minus_body\n     * @property {IEMod|null} [e_mod_body] Expr e_mod_body\n     */\n\n    /**\n     * Constructs a new Expr.\n     * @exports Expr\n     * @classdesc Represents an Expr.\n     * @implements IExpr\n     * @constructor\n     * @param {IExpr=} [properties] Properties to set\n     */\n    function Expr(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Expr g_bool.\n     * @member {boolean} g_bool\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.g_bool = false;\n\n    /**\n     * Expr g_int.\n     * @member {number|Long} g_int\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.g_int = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * Expr g_string.\n     * @member {string} g_string\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.g_string = \"\";\n\n    /**\n     * Expr g_uri.\n     * @member {string} g_uri\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.g_uri = \"\";\n\n    /**\n     * Expr g_byte_array.\n     * @member {Uint8Array} g_byte_array\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.g_byte_array = $util.newBuffer([]);\n\n    /**\n     * Expr e_not_body.\n     * @member {IENot|null|undefined} e_not_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_not_body = null;\n\n    /**\n     * Expr e_neg_body.\n     * @member {IENeg|null|undefined} e_neg_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_neg_body = null;\n\n    /**\n     * Expr e_mult_body.\n     * @member {IEMult|null|undefined} e_mult_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_mult_body = null;\n\n    /**\n     * Expr e_div_body.\n     * @member {IEDiv|null|undefined} e_div_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_div_body = null;\n\n    /**\n     * Expr e_plus_body.\n     * @member {IEPlus|null|undefined} e_plus_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_plus_body = null;\n\n    /**\n     * Expr e_minus_body.\n     * @member {IEMinus|null|undefined} e_minus_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_minus_body = null;\n\n    /**\n     * Expr e_lt_body.\n     * @member {IELt|null|undefined} e_lt_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_lt_body = null;\n\n    /**\n     * Expr e_lte_body.\n     * @member {IELte|null|undefined} e_lte_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_lte_body = null;\n\n    /**\n     * Expr e_gt_body.\n     * @member {IEGt|null|undefined} e_gt_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_gt_body = null;\n\n    /**\n     * Expr e_gte_body.\n     * @member {IEGte|null|undefined} e_gte_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_gte_body = null;\n\n    /**\n     * Expr e_eq_body.\n     * @member {IEEq|null|undefined} e_eq_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_eq_body = null;\n\n    /**\n     * Expr e_neq_body.\n     * @member {IENeq|null|undefined} e_neq_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_neq_body = null;\n\n    /**\n     * Expr e_and_body.\n     * @member {IEAnd|null|undefined} e_and_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_and_body = null;\n\n    /**\n     * Expr e_or_body.\n     * @member {IEOr|null|undefined} e_or_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_or_body = null;\n\n    /**\n     * Expr e_var_body.\n     * @member {IEVar|null|undefined} e_var_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_var_body = null;\n\n    /**\n     * Expr e_list_body.\n     * @member {IEList|null|undefined} e_list_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_list_body = null;\n\n    /**\n     * Expr e_tuple_body.\n     * @member {IETuple|null|undefined} e_tuple_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_tuple_body = null;\n\n    /**\n     * Expr e_set_body.\n     * @member {IESet|null|undefined} e_set_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_set_body = null;\n\n    /**\n     * Expr e_map_body.\n     * @member {IEMap|null|undefined} e_map_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_map_body = null;\n\n    /**\n     * Expr e_method_body.\n     * @member {IEMethod|null|undefined} e_method_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_method_body = null;\n\n    /**\n     * Expr e_matches_body.\n     * @member {IEMatches|null|undefined} e_matches_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_matches_body = null;\n\n    /**\n     * Expr e_percent_percent_body.\n     * @member {IEPercentPercent|null|undefined} e_percent_percent_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_percent_percent_body = null;\n\n    /**\n     * Expr e_plus_plus_body.\n     * @member {IEPlusPlus|null|undefined} e_plus_plus_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_plus_plus_body = null;\n\n    /**\n     * Expr e_minus_minus_body.\n     * @member {IEMinusMinus|null|undefined} e_minus_minus_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_minus_minus_body = null;\n\n    /**\n     * Expr e_mod_body.\n     * @member {IEMod|null|undefined} e_mod_body\n     * @memberof Expr\n     * @instance\n     */\n    Expr.prototype.e_mod_body = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * Expr expr_instance.\n     * @member {\"g_bool\"|\"g_int\"|\"g_string\"|\"g_uri\"|\"g_byte_array\"|\"e_not_body\"|\"e_neg_body\"|\"e_mult_body\"|\"e_div_body\"|\"e_plus_body\"|\"e_minus_body\"|\"e_lt_body\"|\"e_lte_body\"|\"e_gt_body\"|\"e_gte_body\"|\"e_eq_body\"|\"e_neq_body\"|\"e_and_body\"|\"e_or_body\"|\"e_var_body\"|\"e_list_body\"|\"e_tuple_body\"|\"e_set_body\"|\"e_map_body\"|\"e_method_body\"|\"e_matches_body\"|\"e_percent_percent_body\"|\"e_plus_plus_body\"|\"e_minus_minus_body\"|\"e_mod_body\"|undefined} expr_instance\n     * @memberof Expr\n     * @instance\n     */\n    Object.defineProperty(Expr.prototype, \"expr_instance\", {\n        get: $util.oneOfGetter($oneOfFields = [\"g_bool\", \"g_int\", \"g_string\", \"g_uri\", \"g_byte_array\", \"e_not_body\", \"e_neg_body\", \"e_mult_body\", \"e_div_body\", \"e_plus_body\", \"e_minus_body\", \"e_lt_body\", \"e_lte_body\", \"e_gt_body\", \"e_gte_body\", \"e_eq_body\", \"e_neq_body\", \"e_and_body\", \"e_or_body\", \"e_var_body\", \"e_list_body\", \"e_tuple_body\", \"e_set_body\", \"e_map_body\", \"e_method_body\", \"e_matches_body\", \"e_percent_percent_body\", \"e_plus_plus_body\", \"e_minus_minus_body\", \"e_mod_body\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new Expr instance using the specified properties.\n     * @function create\n     * @memberof Expr\n     * @static\n     * @param {IExpr=} [properties] Properties to set\n     * @returns {Expr} Expr instance\n     */\n    Expr.create = function create(properties) {\n        return new Expr(properties);\n    };\n\n    /**\n     * Encodes the specified Expr message. Does not implicitly {@link Expr.verify|verify} messages.\n     * @function encode\n     * @memberof Expr\n     * @static\n     * @param {IExpr} message Expr message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Expr.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.g_bool != null && message.hasOwnProperty(\"g_bool\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.g_bool);\n        if (message.g_int != null && message.hasOwnProperty(\"g_int\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.g_int);\n        if (message.g_string != null && message.hasOwnProperty(\"g_string\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.g_string);\n        if (message.g_uri != null && message.hasOwnProperty(\"g_uri\"))\n            writer.uint32(/* id 4, wireType 2 =*/34).string(message.g_uri);\n        if (message.e_not_body != null && message.hasOwnProperty(\"e_not_body\"))\n            $root.ENot.encode(message.e_not_body, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.e_neg_body != null && message.hasOwnProperty(\"e_neg_body\"))\n            $root.ENeg.encode(message.e_neg_body, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.e_mult_body != null && message.hasOwnProperty(\"e_mult_body\"))\n            $root.EMult.encode(message.e_mult_body, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.e_div_body != null && message.hasOwnProperty(\"e_div_body\"))\n            $root.EDiv.encode(message.e_div_body, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.e_plus_body != null && message.hasOwnProperty(\"e_plus_body\"))\n            $root.EPlus.encode(message.e_plus_body, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n        if (message.e_minus_body != null && message.hasOwnProperty(\"e_minus_body\"))\n            $root.EMinus.encode(message.e_minus_body, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.e_lt_body != null && message.hasOwnProperty(\"e_lt_body\"))\n            $root.ELt.encode(message.e_lt_body, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n        if (message.e_lte_body != null && message.hasOwnProperty(\"e_lte_body\"))\n            $root.ELte.encode(message.e_lte_body, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n        if (message.e_gt_body != null && message.hasOwnProperty(\"e_gt_body\"))\n            $root.EGt.encode(message.e_gt_body, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n        if (message.e_gte_body != null && message.hasOwnProperty(\"e_gte_body\"))\n            $root.EGte.encode(message.e_gte_body, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n        if (message.e_eq_body != null && message.hasOwnProperty(\"e_eq_body\"))\n            $root.EEq.encode(message.e_eq_body, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n        if (message.e_neq_body != null && message.hasOwnProperty(\"e_neq_body\"))\n            $root.ENeq.encode(message.e_neq_body, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n        if (message.e_and_body != null && message.hasOwnProperty(\"e_and_body\"))\n            $root.EAnd.encode(message.e_and_body, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n        if (message.e_or_body != null && message.hasOwnProperty(\"e_or_body\"))\n            $root.EOr.encode(message.e_or_body, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.e_var_body != null && message.hasOwnProperty(\"e_var_body\"))\n            $root.EVar.encode(message.e_var_body, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n        if (message.e_list_body != null && message.hasOwnProperty(\"e_list_body\"))\n            $root.EList.encode(message.e_list_body, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n        if (message.e_tuple_body != null && message.hasOwnProperty(\"e_tuple_body\"))\n            $root.ETuple.encode(message.e_tuple_body, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n        if (message.e_set_body != null && message.hasOwnProperty(\"e_set_body\"))\n            $root.ESet.encode(message.e_set_body, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n        if (message.e_map_body != null && message.hasOwnProperty(\"e_map_body\"))\n            $root.EMap.encode(message.e_map_body, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n        if (message.e_method_body != null && message.hasOwnProperty(\"e_method_body\"))\n            $root.EMethod.encode(message.e_method_body, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();\n        if (message.g_byte_array != null && message.hasOwnProperty(\"g_byte_array\"))\n            writer.uint32(/* id 25, wireType 2 =*/202).bytes(message.g_byte_array);\n        if (message.e_matches_body != null && message.hasOwnProperty(\"e_matches_body\"))\n            $root.EMatches.encode(message.e_matches_body, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();\n        if (message.e_percent_percent_body != null && message.hasOwnProperty(\"e_percent_percent_body\"))\n            $root.EPercentPercent.encode(message.e_percent_percent_body, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();\n        if (message.e_plus_plus_body != null && message.hasOwnProperty(\"e_plus_plus_body\"))\n            $root.EPlusPlus.encode(message.e_plus_plus_body, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();\n        if (message.e_minus_minus_body != null && message.hasOwnProperty(\"e_minus_minus_body\"))\n            $root.EMinusMinus.encode(message.e_minus_minus_body, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();\n        if (message.e_mod_body != null && message.hasOwnProperty(\"e_mod_body\"))\n            $root.EMod.encode(message.e_mod_body, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Expr message, length delimited. Does not implicitly {@link Expr.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Expr\n     * @static\n     * @param {IExpr} message Expr message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Expr.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes an Expr message from the specified reader or buffer.\n     * @function decode\n     * @memberof Expr\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Expr} Expr\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Expr.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Expr();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.g_bool = reader.bool();\n                break;\n            case 2:\n                message.g_int = reader.sint64();\n                break;\n            case 3:\n                message.g_string = reader.string();\n                break;\n            case 4:\n                message.g_uri = reader.string();\n                break;\n            case 25:\n                message.g_byte_array = reader.bytes();\n                break;\n            case 5:\n                message.e_not_body = $root.ENot.decode(reader, reader.uint32());\n                break;\n            case 6:\n                message.e_neg_body = $root.ENeg.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.e_mult_body = $root.EMult.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.e_div_body = $root.EDiv.decode(reader, reader.uint32());\n                break;\n            case 9:\n                message.e_plus_body = $root.EPlus.decode(reader, reader.uint32());\n                break;\n            case 10:\n                message.e_minus_body = $root.EMinus.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.e_lt_body = $root.ELt.decode(reader, reader.uint32());\n                break;\n            case 12:\n                message.e_lte_body = $root.ELte.decode(reader, reader.uint32());\n                break;\n            case 13:\n                message.e_gt_body = $root.EGt.decode(reader, reader.uint32());\n                break;\n            case 14:\n                message.e_gte_body = $root.EGte.decode(reader, reader.uint32());\n                break;\n            case 15:\n                message.e_eq_body = $root.EEq.decode(reader, reader.uint32());\n                break;\n            case 16:\n                message.e_neq_body = $root.ENeq.decode(reader, reader.uint32());\n                break;\n            case 17:\n                message.e_and_body = $root.EAnd.decode(reader, reader.uint32());\n                break;\n            case 18:\n                message.e_or_body = $root.EOr.decode(reader, reader.uint32());\n                break;\n            case 19:\n                message.e_var_body = $root.EVar.decode(reader, reader.uint32());\n                break;\n            case 20:\n                message.e_list_body = $root.EList.decode(reader, reader.uint32());\n                break;\n            case 21:\n                message.e_tuple_body = $root.ETuple.decode(reader, reader.uint32());\n                break;\n            case 22:\n                message.e_set_body = $root.ESet.decode(reader, reader.uint32());\n                break;\n            case 23:\n                message.e_map_body = $root.EMap.decode(reader, reader.uint32());\n                break;\n            case 24:\n                message.e_method_body = $root.EMethod.decode(reader, reader.uint32());\n                break;\n            case 27:\n                message.e_matches_body = $root.EMatches.decode(reader, reader.uint32());\n                break;\n            case 28:\n                message.e_percent_percent_body = $root.EPercentPercent.decode(reader, reader.uint32());\n                break;\n            case 29:\n                message.e_plus_plus_body = $root.EPlusPlus.decode(reader, reader.uint32());\n                break;\n            case 30:\n                message.e_minus_minus_body = $root.EMinusMinus.decode(reader, reader.uint32());\n                break;\n            case 31:\n                message.e_mod_body = $root.EMod.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes an Expr message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Expr\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Expr} Expr\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Expr.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies an Expr message.\n     * @function verify\n     * @memberof Expr\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Expr.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        var properties = {};\n        if (message.g_bool != null && message.hasOwnProperty(\"g_bool\")) {\n            properties.expr_instance = 1;\n            if (typeof message.g_bool !== \"boolean\")\n                return \"g_bool: boolean expected\";\n        }\n        if (message.g_int != null && message.hasOwnProperty(\"g_int\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            if (!$util.isInteger(message.g_int) && !(message.g_int && $util.isInteger(message.g_int.low) && $util.isInteger(message.g_int.high)))\n                return \"g_int: integer|Long expected\";\n        }\n        if (message.g_string != null && message.hasOwnProperty(\"g_string\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            if (!$util.isString(message.g_string))\n                return \"g_string: string expected\";\n        }\n        if (message.g_uri != null && message.hasOwnProperty(\"g_uri\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            if (!$util.isString(message.g_uri))\n                return \"g_uri: string expected\";\n        }\n        if (message.g_byte_array != null && message.hasOwnProperty(\"g_byte_array\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            if (!(message.g_byte_array && typeof message.g_byte_array.length === \"number\" || $util.isString(message.g_byte_array)))\n                return \"g_byte_array: buffer expected\";\n        }\n        if (message.e_not_body != null && message.hasOwnProperty(\"e_not_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.ENot.verify(message.e_not_body);\n                if (error)\n                    return \"e_not_body.\" + error;\n            }\n        }\n        if (message.e_neg_body != null && message.hasOwnProperty(\"e_neg_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.ENeg.verify(message.e_neg_body);\n                if (error)\n                    return \"e_neg_body.\" + error;\n            }\n        }\n        if (message.e_mult_body != null && message.hasOwnProperty(\"e_mult_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EMult.verify(message.e_mult_body);\n                if (error)\n                    return \"e_mult_body.\" + error;\n            }\n        }\n        if (message.e_div_body != null && message.hasOwnProperty(\"e_div_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EDiv.verify(message.e_div_body);\n                if (error)\n                    return \"e_div_body.\" + error;\n            }\n        }\n        if (message.e_plus_body != null && message.hasOwnProperty(\"e_plus_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EPlus.verify(message.e_plus_body);\n                if (error)\n                    return \"e_plus_body.\" + error;\n            }\n        }\n        if (message.e_minus_body != null && message.hasOwnProperty(\"e_minus_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EMinus.verify(message.e_minus_body);\n                if (error)\n                    return \"e_minus_body.\" + error;\n            }\n        }\n        if (message.e_lt_body != null && message.hasOwnProperty(\"e_lt_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.ELt.verify(message.e_lt_body);\n                if (error)\n                    return \"e_lt_body.\" + error;\n            }\n        }\n        if (message.e_lte_body != null && message.hasOwnProperty(\"e_lte_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.ELte.verify(message.e_lte_body);\n                if (error)\n                    return \"e_lte_body.\" + error;\n            }\n        }\n        if (message.e_gt_body != null && message.hasOwnProperty(\"e_gt_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EGt.verify(message.e_gt_body);\n                if (error)\n                    return \"e_gt_body.\" + error;\n            }\n        }\n        if (message.e_gte_body != null && message.hasOwnProperty(\"e_gte_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EGte.verify(message.e_gte_body);\n                if (error)\n                    return \"e_gte_body.\" + error;\n            }\n        }\n        if (message.e_eq_body != null && message.hasOwnProperty(\"e_eq_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EEq.verify(message.e_eq_body);\n                if (error)\n                    return \"e_eq_body.\" + error;\n            }\n        }\n        if (message.e_neq_body != null && message.hasOwnProperty(\"e_neq_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.ENeq.verify(message.e_neq_body);\n                if (error)\n                    return \"e_neq_body.\" + error;\n            }\n        }\n        if (message.e_and_body != null && message.hasOwnProperty(\"e_and_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EAnd.verify(message.e_and_body);\n                if (error)\n                    return \"e_and_body.\" + error;\n            }\n        }\n        if (message.e_or_body != null && message.hasOwnProperty(\"e_or_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EOr.verify(message.e_or_body);\n                if (error)\n                    return \"e_or_body.\" + error;\n            }\n        }\n        if (message.e_var_body != null && message.hasOwnProperty(\"e_var_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EVar.verify(message.e_var_body);\n                if (error)\n                    return \"e_var_body.\" + error;\n            }\n        }\n        if (message.e_list_body != null && message.hasOwnProperty(\"e_list_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EList.verify(message.e_list_body);\n                if (error)\n                    return \"e_list_body.\" + error;\n            }\n        }\n        if (message.e_tuple_body != null && message.hasOwnProperty(\"e_tuple_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.ETuple.verify(message.e_tuple_body);\n                if (error)\n                    return \"e_tuple_body.\" + error;\n            }\n        }\n        if (message.e_set_body != null && message.hasOwnProperty(\"e_set_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.ESet.verify(message.e_set_body);\n                if (error)\n                    return \"e_set_body.\" + error;\n            }\n        }\n        if (message.e_map_body != null && message.hasOwnProperty(\"e_map_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EMap.verify(message.e_map_body);\n                if (error)\n                    return \"e_map_body.\" + error;\n            }\n        }\n        if (message.e_method_body != null && message.hasOwnProperty(\"e_method_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EMethod.verify(message.e_method_body);\n                if (error)\n                    return \"e_method_body.\" + error;\n            }\n        }\n        if (message.e_matches_body != null && message.hasOwnProperty(\"e_matches_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EMatches.verify(message.e_matches_body);\n                if (error)\n                    return \"e_matches_body.\" + error;\n            }\n        }\n        if (message.e_percent_percent_body != null && message.hasOwnProperty(\"e_percent_percent_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EPercentPercent.verify(message.e_percent_percent_body);\n                if (error)\n                    return \"e_percent_percent_body.\" + error;\n            }\n        }\n        if (message.e_plus_plus_body != null && message.hasOwnProperty(\"e_plus_plus_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EPlusPlus.verify(message.e_plus_plus_body);\n                if (error)\n                    return \"e_plus_plus_body.\" + error;\n            }\n        }\n        if (message.e_minus_minus_body != null && message.hasOwnProperty(\"e_minus_minus_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EMinusMinus.verify(message.e_minus_minus_body);\n                if (error)\n                    return \"e_minus_minus_body.\" + error;\n            }\n        }\n        if (message.e_mod_body != null && message.hasOwnProperty(\"e_mod_body\")) {\n            if (properties.expr_instance === 1)\n                return \"expr_instance: multiple values\";\n            properties.expr_instance = 1;\n            {\n                var error = $root.EMod.verify(message.e_mod_body);\n                if (error)\n                    return \"e_mod_body.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates an Expr message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Expr\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Expr} Expr\n     */\n    Expr.fromObject = function fromObject(object) {\n        if (object instanceof $root.Expr)\n            return object;\n        var message = new $root.Expr();\n        if (object.g_bool != null)\n            message.g_bool = Boolean(object.g_bool);\n        if (object.g_int != null)\n            if ($util.Long)\n                (message.g_int = $util.Long.fromValue(object.g_int)).unsigned = false;\n            else if (typeof object.g_int === \"string\")\n                message.g_int = parseInt(object.g_int, 10);\n            else if (typeof object.g_int === \"number\")\n                message.g_int = object.g_int;\n            else if (typeof object.g_int === \"object\")\n                message.g_int = new $util.LongBits(object.g_int.low >>> 0, object.g_int.high >>> 0).toNumber();\n        if (object.g_string != null)\n            message.g_string = String(object.g_string);\n        if (object.g_uri != null)\n            message.g_uri = String(object.g_uri);\n        if (object.g_byte_array != null)\n            if (typeof object.g_byte_array === \"string\")\n                $util.base64.decode(object.g_byte_array, message.g_byte_array = $util.newBuffer($util.base64.length(object.g_byte_array)), 0);\n            else if (object.g_byte_array.length)\n                message.g_byte_array = object.g_byte_array;\n        if (object.e_not_body != null) {\n            if (typeof object.e_not_body !== \"object\")\n                throw TypeError(\".Expr.e_not_body: object expected\");\n            message.e_not_body = $root.ENot.fromObject(object.e_not_body);\n        }\n        if (object.e_neg_body != null) {\n            if (typeof object.e_neg_body !== \"object\")\n                throw TypeError(\".Expr.e_neg_body: object expected\");\n            message.e_neg_body = $root.ENeg.fromObject(object.e_neg_body);\n        }\n        if (object.e_mult_body != null) {\n            if (typeof object.e_mult_body !== \"object\")\n                throw TypeError(\".Expr.e_mult_body: object expected\");\n            message.e_mult_body = $root.EMult.fromObject(object.e_mult_body);\n        }\n        if (object.e_div_body != null) {\n            if (typeof object.e_div_body !== \"object\")\n                throw TypeError(\".Expr.e_div_body: object expected\");\n            message.e_div_body = $root.EDiv.fromObject(object.e_div_body);\n        }\n        if (object.e_plus_body != null) {\n            if (typeof object.e_plus_body !== \"object\")\n                throw TypeError(\".Expr.e_plus_body: object expected\");\n            message.e_plus_body = $root.EPlus.fromObject(object.e_plus_body);\n        }\n        if (object.e_minus_body != null) {\n            if (typeof object.e_minus_body !== \"object\")\n                throw TypeError(\".Expr.e_minus_body: object expected\");\n            message.e_minus_body = $root.EMinus.fromObject(object.e_minus_body);\n        }\n        if (object.e_lt_body != null) {\n            if (typeof object.e_lt_body !== \"object\")\n                throw TypeError(\".Expr.e_lt_body: object expected\");\n            message.e_lt_body = $root.ELt.fromObject(object.e_lt_body);\n        }\n        if (object.e_lte_body != null) {\n            if (typeof object.e_lte_body !== \"object\")\n                throw TypeError(\".Expr.e_lte_body: object expected\");\n            message.e_lte_body = $root.ELte.fromObject(object.e_lte_body);\n        }\n        if (object.e_gt_body != null) {\n            if (typeof object.e_gt_body !== \"object\")\n                throw TypeError(\".Expr.e_gt_body: object expected\");\n            message.e_gt_body = $root.EGt.fromObject(object.e_gt_body);\n        }\n        if (object.e_gte_body != null) {\n            if (typeof object.e_gte_body !== \"object\")\n                throw TypeError(\".Expr.e_gte_body: object expected\");\n            message.e_gte_body = $root.EGte.fromObject(object.e_gte_body);\n        }\n        if (object.e_eq_body != null) {\n            if (typeof object.e_eq_body !== \"object\")\n                throw TypeError(\".Expr.e_eq_body: object expected\");\n            message.e_eq_body = $root.EEq.fromObject(object.e_eq_body);\n        }\n        if (object.e_neq_body != null) {\n            if (typeof object.e_neq_body !== \"object\")\n                throw TypeError(\".Expr.e_neq_body: object expected\");\n            message.e_neq_body = $root.ENeq.fromObject(object.e_neq_body);\n        }\n        if (object.e_and_body != null) {\n            if (typeof object.e_and_body !== \"object\")\n                throw TypeError(\".Expr.e_and_body: object expected\");\n            message.e_and_body = $root.EAnd.fromObject(object.e_and_body);\n        }\n        if (object.e_or_body != null) {\n            if (typeof object.e_or_body !== \"object\")\n                throw TypeError(\".Expr.e_or_body: object expected\");\n            message.e_or_body = $root.EOr.fromObject(object.e_or_body);\n        }\n        if (object.e_var_body != null) {\n            if (typeof object.e_var_body !== \"object\")\n                throw TypeError(\".Expr.e_var_body: object expected\");\n            message.e_var_body = $root.EVar.fromObject(object.e_var_body);\n        }\n        if (object.e_list_body != null) {\n            if (typeof object.e_list_body !== \"object\")\n                throw TypeError(\".Expr.e_list_body: object expected\");\n            message.e_list_body = $root.EList.fromObject(object.e_list_body);\n        }\n        if (object.e_tuple_body != null) {\n            if (typeof object.e_tuple_body !== \"object\")\n                throw TypeError(\".Expr.e_tuple_body: object expected\");\n            message.e_tuple_body = $root.ETuple.fromObject(object.e_tuple_body);\n        }\n        if (object.e_set_body != null) {\n            if (typeof object.e_set_body !== \"object\")\n                throw TypeError(\".Expr.e_set_body: object expected\");\n            message.e_set_body = $root.ESet.fromObject(object.e_set_body);\n        }\n        if (object.e_map_body != null) {\n            if (typeof object.e_map_body !== \"object\")\n                throw TypeError(\".Expr.e_map_body: object expected\");\n            message.e_map_body = $root.EMap.fromObject(object.e_map_body);\n        }\n        if (object.e_method_body != null) {\n            if (typeof object.e_method_body !== \"object\")\n                throw TypeError(\".Expr.e_method_body: object expected\");\n            message.e_method_body = $root.EMethod.fromObject(object.e_method_body);\n        }\n        if (object.e_matches_body != null) {\n            if (typeof object.e_matches_body !== \"object\")\n                throw TypeError(\".Expr.e_matches_body: object expected\");\n            message.e_matches_body = $root.EMatches.fromObject(object.e_matches_body);\n        }\n        if (object.e_percent_percent_body != null) {\n            if (typeof object.e_percent_percent_body !== \"object\")\n                throw TypeError(\".Expr.e_percent_percent_body: object expected\");\n            message.e_percent_percent_body = $root.EPercentPercent.fromObject(object.e_percent_percent_body);\n        }\n        if (object.e_plus_plus_body != null) {\n            if (typeof object.e_plus_plus_body !== \"object\")\n                throw TypeError(\".Expr.e_plus_plus_body: object expected\");\n            message.e_plus_plus_body = $root.EPlusPlus.fromObject(object.e_plus_plus_body);\n        }\n        if (object.e_minus_minus_body != null) {\n            if (typeof object.e_minus_minus_body !== \"object\")\n                throw TypeError(\".Expr.e_minus_minus_body: object expected\");\n            message.e_minus_minus_body = $root.EMinusMinus.fromObject(object.e_minus_minus_body);\n        }\n        if (object.e_mod_body != null) {\n            if (typeof object.e_mod_body !== \"object\")\n                throw TypeError(\".Expr.e_mod_body: object expected\");\n            message.e_mod_body = $root.EMod.fromObject(object.e_mod_body);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from an Expr message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Expr\n     * @static\n     * @param {Expr} message Expr\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Expr.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (message.g_bool != null && message.hasOwnProperty(\"g_bool\")) {\n            object.g_bool = message.g_bool;\n            if (options.oneofs)\n                object.expr_instance = \"g_bool\";\n        }\n        if (message.g_int != null && message.hasOwnProperty(\"g_int\")) {\n            if (typeof message.g_int === \"number\")\n                object.g_int = options.longs === String ? String(message.g_int) : message.g_int;\n            else\n                object.g_int = options.longs === String ? $util.Long.prototype.toString.call(message.g_int) : options.longs === Number ? new $util.LongBits(message.g_int.low >>> 0, message.g_int.high >>> 0).toNumber() : message.g_int;\n            if (options.oneofs)\n                object.expr_instance = \"g_int\";\n        }\n        if (message.g_string != null && message.hasOwnProperty(\"g_string\")) {\n            object.g_string = message.g_string;\n            if (options.oneofs)\n                object.expr_instance = \"g_string\";\n        }\n        if (message.g_uri != null && message.hasOwnProperty(\"g_uri\")) {\n            object.g_uri = message.g_uri;\n            if (options.oneofs)\n                object.expr_instance = \"g_uri\";\n        }\n        if (message.e_not_body != null && message.hasOwnProperty(\"e_not_body\")) {\n            object.e_not_body = $root.ENot.toObject(message.e_not_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_not_body\";\n        }\n        if (message.e_neg_body != null && message.hasOwnProperty(\"e_neg_body\")) {\n            object.e_neg_body = $root.ENeg.toObject(message.e_neg_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_neg_body\";\n        }\n        if (message.e_mult_body != null && message.hasOwnProperty(\"e_mult_body\")) {\n            object.e_mult_body = $root.EMult.toObject(message.e_mult_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_mult_body\";\n        }\n        if (message.e_div_body != null && message.hasOwnProperty(\"e_div_body\")) {\n            object.e_div_body = $root.EDiv.toObject(message.e_div_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_div_body\";\n        }\n        if (message.e_plus_body != null && message.hasOwnProperty(\"e_plus_body\")) {\n            object.e_plus_body = $root.EPlus.toObject(message.e_plus_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_plus_body\";\n        }\n        if (message.e_minus_body != null && message.hasOwnProperty(\"e_minus_body\")) {\n            object.e_minus_body = $root.EMinus.toObject(message.e_minus_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_minus_body\";\n        }\n        if (message.e_lt_body != null && message.hasOwnProperty(\"e_lt_body\")) {\n            object.e_lt_body = $root.ELt.toObject(message.e_lt_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_lt_body\";\n        }\n        if (message.e_lte_body != null && message.hasOwnProperty(\"e_lte_body\")) {\n            object.e_lte_body = $root.ELte.toObject(message.e_lte_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_lte_body\";\n        }\n        if (message.e_gt_body != null && message.hasOwnProperty(\"e_gt_body\")) {\n            object.e_gt_body = $root.EGt.toObject(message.e_gt_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_gt_body\";\n        }\n        if (message.e_gte_body != null && message.hasOwnProperty(\"e_gte_body\")) {\n            object.e_gte_body = $root.EGte.toObject(message.e_gte_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_gte_body\";\n        }\n        if (message.e_eq_body != null && message.hasOwnProperty(\"e_eq_body\")) {\n            object.e_eq_body = $root.EEq.toObject(message.e_eq_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_eq_body\";\n        }\n        if (message.e_neq_body != null && message.hasOwnProperty(\"e_neq_body\")) {\n            object.e_neq_body = $root.ENeq.toObject(message.e_neq_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_neq_body\";\n        }\n        if (message.e_and_body != null && message.hasOwnProperty(\"e_and_body\")) {\n            object.e_and_body = $root.EAnd.toObject(message.e_and_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_and_body\";\n        }\n        if (message.e_or_body != null && message.hasOwnProperty(\"e_or_body\")) {\n            object.e_or_body = $root.EOr.toObject(message.e_or_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_or_body\";\n        }\n        if (message.e_var_body != null && message.hasOwnProperty(\"e_var_body\")) {\n            object.e_var_body = $root.EVar.toObject(message.e_var_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_var_body\";\n        }\n        if (message.e_list_body != null && message.hasOwnProperty(\"e_list_body\")) {\n            object.e_list_body = $root.EList.toObject(message.e_list_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_list_body\";\n        }\n        if (message.e_tuple_body != null && message.hasOwnProperty(\"e_tuple_body\")) {\n            object.e_tuple_body = $root.ETuple.toObject(message.e_tuple_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_tuple_body\";\n        }\n        if (message.e_set_body != null && message.hasOwnProperty(\"e_set_body\")) {\n            object.e_set_body = $root.ESet.toObject(message.e_set_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_set_body\";\n        }\n        if (message.e_map_body != null && message.hasOwnProperty(\"e_map_body\")) {\n            object.e_map_body = $root.EMap.toObject(message.e_map_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_map_body\";\n        }\n        if (message.e_method_body != null && message.hasOwnProperty(\"e_method_body\")) {\n            object.e_method_body = $root.EMethod.toObject(message.e_method_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_method_body\";\n        }\n        if (message.g_byte_array != null && message.hasOwnProperty(\"g_byte_array\")) {\n            object.g_byte_array = options.bytes === String ? $util.base64.encode(message.g_byte_array, 0, message.g_byte_array.length) : options.bytes === Array ? Array.prototype.slice.call(message.g_byte_array) : message.g_byte_array;\n            if (options.oneofs)\n                object.expr_instance = \"g_byte_array\";\n        }\n        if (message.e_matches_body != null && message.hasOwnProperty(\"e_matches_body\")) {\n            object.e_matches_body = $root.EMatches.toObject(message.e_matches_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_matches_body\";\n        }\n        if (message.e_percent_percent_body != null && message.hasOwnProperty(\"e_percent_percent_body\")) {\n            object.e_percent_percent_body = $root.EPercentPercent.toObject(message.e_percent_percent_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_percent_percent_body\";\n        }\n        if (message.e_plus_plus_body != null && message.hasOwnProperty(\"e_plus_plus_body\")) {\n            object.e_plus_plus_body = $root.EPlusPlus.toObject(message.e_plus_plus_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_plus_plus_body\";\n        }\n        if (message.e_minus_minus_body != null && message.hasOwnProperty(\"e_minus_minus_body\")) {\n            object.e_minus_minus_body = $root.EMinusMinus.toObject(message.e_minus_minus_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_minus_minus_body\";\n        }\n        if (message.e_mod_body != null && message.hasOwnProperty(\"e_mod_body\")) {\n            object.e_mod_body = $root.EMod.toObject(message.e_mod_body, options);\n            if (options.oneofs)\n                object.expr_instance = \"e_mod_body\";\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Expr to JSON.\n     * @function toJSON\n     * @memberof Expr\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Expr.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Expr;\n})();\n\n$root.EList = (function() {\n\n    /**\n     * Properties of a EList.\n     * @exports IEList\n     * @interface IEList\n     * @property {Array.<IPar>|null} [ps] EList ps\n     * @property {Uint8Array|null} [locallyFree] EList locallyFree\n     * @property {boolean|null} [connective_used] EList connective_used\n     * @property {IVar|null} [remainder] EList remainder\n     */\n\n    /**\n     * Constructs a new EList.\n     * @exports EList\n     * @classdesc Represents a EList.\n     * @implements IEList\n     * @constructor\n     * @param {IEList=} [properties] Properties to set\n     */\n    function EList(properties) {\n        this.ps = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EList ps.\n     * @member {Array.<IPar>} ps\n     * @memberof EList\n     * @instance\n     */\n    EList.prototype.ps = $util.emptyArray;\n\n    /**\n     * EList locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof EList\n     * @instance\n     */\n    EList.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * EList connective_used.\n     * @member {boolean} connective_used\n     * @memberof EList\n     * @instance\n     */\n    EList.prototype.connective_used = false;\n\n    /**\n     * EList remainder.\n     * @member {IVar|null|undefined} remainder\n     * @memberof EList\n     * @instance\n     */\n    EList.prototype.remainder = null;\n\n    /**\n     * Creates a new EList instance using the specified properties.\n     * @function create\n     * @memberof EList\n     * @static\n     * @param {IEList=} [properties] Properties to set\n     * @returns {EList} EList instance\n     */\n    EList.create = function create(properties) {\n        return new EList(properties);\n    };\n\n    /**\n     * Encodes the specified EList message. Does not implicitly {@link EList.verify|verify} messages.\n     * @function encode\n     * @memberof EList\n     * @static\n     * @param {IEList} message EList message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EList.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.ps != null && message.ps.length)\n            for (var i = 0; i < message.ps.length; ++i)\n                $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connective_used);\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            $root.Var.encode(message.remainder, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EList message, length delimited. Does not implicitly {@link EList.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EList\n     * @static\n     * @param {IEList} message EList message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EList.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EList message from the specified reader or buffer.\n     * @function decode\n     * @memberof EList\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EList} EList\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EList.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EList();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.ps && message.ps.length))\n                    message.ps = [];\n                message.ps.push($root.Par.decode(reader, reader.uint32()));\n                break;\n            case 3:\n                message.locallyFree = reader.bytes();\n                break;\n            case 4:\n                message.connective_used = reader.bool();\n                break;\n            case 5:\n                message.remainder = $root.Var.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EList message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EList\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EList} EList\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EList.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EList message.\n     * @function verify\n     * @memberof EList\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EList.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.ps != null && message.hasOwnProperty(\"ps\")) {\n            if (!Array.isArray(message.ps))\n                return \"ps: array expected\";\n            for (var i = 0; i < message.ps.length; ++i) {\n                var error = $root.Par.verify(message.ps[i]);\n                if (error)\n                    return \"ps.\" + error;\n            }\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            if (typeof message.connective_used !== \"boolean\")\n                return \"connective_used: boolean expected\";\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\")) {\n            var error = $root.Var.verify(message.remainder);\n            if (error)\n                return \"remainder.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EList message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EList\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EList} EList\n     */\n    EList.fromObject = function fromObject(object) {\n        if (object instanceof $root.EList)\n            return object;\n        var message = new $root.EList();\n        if (object.ps) {\n            if (!Array.isArray(object.ps))\n                throw TypeError(\".EList.ps: array expected\");\n            message.ps = [];\n            for (var i = 0; i < object.ps.length; ++i) {\n                if (typeof object.ps[i] !== \"object\")\n                    throw TypeError(\".EList.ps: object expected\");\n                message.ps[i] = $root.Par.fromObject(object.ps[i]);\n            }\n        }\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        if (object.connective_used != null)\n            message.connective_used = Boolean(object.connective_used);\n        if (object.remainder != null) {\n            if (typeof object.remainder !== \"object\")\n                throw TypeError(\".EList.remainder: object expected\");\n            message.remainder = $root.Var.fromObject(object.remainder);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EList message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EList\n     * @static\n     * @param {EList} message EList\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EList.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.ps = [];\n        if (options.defaults) {\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n            object.connective_used = false;\n            object.remainder = null;\n        }\n        if (message.ps && message.ps.length) {\n            object.ps = [];\n            for (var j = 0; j < message.ps.length; ++j)\n                object.ps[j] = $root.Par.toObject(message.ps[j], options);\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            object.connective_used = message.connective_used;\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            object.remainder = $root.Var.toObject(message.remainder, options);\n        return object;\n    };\n\n    /**\n     * Converts this EList to JSON.\n     * @function toJSON\n     * @memberof EList\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EList.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EList;\n})();\n\n$root.ETuple = (function() {\n\n    /**\n     * Properties of a ETuple.\n     * @exports IETuple\n     * @interface IETuple\n     * @property {Array.<IPar>|null} [ps] ETuple ps\n     * @property {Uint8Array|null} [locallyFree] ETuple locallyFree\n     * @property {boolean|null} [connective_used] ETuple connective_used\n     */\n\n    /**\n     * Constructs a new ETuple.\n     * @exports ETuple\n     * @classdesc Represents a ETuple.\n     * @implements IETuple\n     * @constructor\n     * @param {IETuple=} [properties] Properties to set\n     */\n    function ETuple(properties) {\n        this.ps = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ETuple ps.\n     * @member {Array.<IPar>} ps\n     * @memberof ETuple\n     * @instance\n     */\n    ETuple.prototype.ps = $util.emptyArray;\n\n    /**\n     * ETuple locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof ETuple\n     * @instance\n     */\n    ETuple.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * ETuple connective_used.\n     * @member {boolean} connective_used\n     * @memberof ETuple\n     * @instance\n     */\n    ETuple.prototype.connective_used = false;\n\n    /**\n     * Creates a new ETuple instance using the specified properties.\n     * @function create\n     * @memberof ETuple\n     * @static\n     * @param {IETuple=} [properties] Properties to set\n     * @returns {ETuple} ETuple instance\n     */\n    ETuple.create = function create(properties) {\n        return new ETuple(properties);\n    };\n\n    /**\n     * Encodes the specified ETuple message. Does not implicitly {@link ETuple.verify|verify} messages.\n     * @function encode\n     * @memberof ETuple\n     * @static\n     * @param {IETuple} message ETuple message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ETuple.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.ps != null && message.ps.length)\n            for (var i = 0; i < message.ps.length; ++i)\n                $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connective_used);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ETuple message, length delimited. Does not implicitly {@link ETuple.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ETuple\n     * @static\n     * @param {IETuple} message ETuple message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ETuple.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ETuple message from the specified reader or buffer.\n     * @function decode\n     * @memberof ETuple\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ETuple} ETuple\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ETuple.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ETuple();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.ps && message.ps.length))\n                    message.ps = [];\n                message.ps.push($root.Par.decode(reader, reader.uint32()));\n                break;\n            case 3:\n                message.locallyFree = reader.bytes();\n                break;\n            case 4:\n                message.connective_used = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ETuple message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ETuple\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ETuple} ETuple\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ETuple.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ETuple message.\n     * @function verify\n     * @memberof ETuple\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ETuple.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.ps != null && message.hasOwnProperty(\"ps\")) {\n            if (!Array.isArray(message.ps))\n                return \"ps: array expected\";\n            for (var i = 0; i < message.ps.length; ++i) {\n                var error = $root.Par.verify(message.ps[i]);\n                if (error)\n                    return \"ps.\" + error;\n            }\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            if (typeof message.connective_used !== \"boolean\")\n                return \"connective_used: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ETuple message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ETuple\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ETuple} ETuple\n     */\n    ETuple.fromObject = function fromObject(object) {\n        if (object instanceof $root.ETuple)\n            return object;\n        var message = new $root.ETuple();\n        if (object.ps) {\n            if (!Array.isArray(object.ps))\n                throw TypeError(\".ETuple.ps: array expected\");\n            message.ps = [];\n            for (var i = 0; i < object.ps.length; ++i) {\n                if (typeof object.ps[i] !== \"object\")\n                    throw TypeError(\".ETuple.ps: object expected\");\n                message.ps[i] = $root.Par.fromObject(object.ps[i]);\n            }\n        }\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        if (object.connective_used != null)\n            message.connective_used = Boolean(object.connective_used);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ETuple message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ETuple\n     * @static\n     * @param {ETuple} message ETuple\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ETuple.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.ps = [];\n        if (options.defaults) {\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n            object.connective_used = false;\n        }\n        if (message.ps && message.ps.length) {\n            object.ps = [];\n            for (var j = 0; j < message.ps.length; ++j)\n                object.ps[j] = $root.Par.toObject(message.ps[j], options);\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            object.connective_used = message.connective_used;\n        return object;\n    };\n\n    /**\n     * Converts this ETuple to JSON.\n     * @function toJSON\n     * @memberof ETuple\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ETuple.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ETuple;\n})();\n\n$root.ESet = (function() {\n\n    /**\n     * Properties of a ESet.\n     * @exports IESet\n     * @interface IESet\n     * @property {Array.<IPar>|null} [ps] ESet ps\n     * @property {Uint8Array|null} [locallyFree] ESet locallyFree\n     * @property {boolean|null} [connective_used] ESet connective_used\n     * @property {IVar|null} [remainder] ESet remainder\n     */\n\n    /**\n     * Constructs a new ESet.\n     * @exports ESet\n     * @classdesc Represents a ESet.\n     * @implements IESet\n     * @constructor\n     * @param {IESet=} [properties] Properties to set\n     */\n    function ESet(properties) {\n        this.ps = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ESet ps.\n     * @member {Array.<IPar>} ps\n     * @memberof ESet\n     * @instance\n     */\n    ESet.prototype.ps = $util.emptyArray;\n\n    /**\n     * ESet locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof ESet\n     * @instance\n     */\n    ESet.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * ESet connective_used.\n     * @member {boolean} connective_used\n     * @memberof ESet\n     * @instance\n     */\n    ESet.prototype.connective_used = false;\n\n    /**\n     * ESet remainder.\n     * @member {IVar|null|undefined} remainder\n     * @memberof ESet\n     * @instance\n     */\n    ESet.prototype.remainder = null;\n\n    /**\n     * Creates a new ESet instance using the specified properties.\n     * @function create\n     * @memberof ESet\n     * @static\n     * @param {IESet=} [properties] Properties to set\n     * @returns {ESet} ESet instance\n     */\n    ESet.create = function create(properties) {\n        return new ESet(properties);\n    };\n\n    /**\n     * Encodes the specified ESet message. Does not implicitly {@link ESet.verify|verify} messages.\n     * @function encode\n     * @memberof ESet\n     * @static\n     * @param {IESet} message ESet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ESet.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.ps != null && message.ps.length)\n            for (var i = 0; i < message.ps.length; ++i)\n                $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connective_used);\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            $root.Var.encode(message.remainder, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ESet message, length delimited. Does not implicitly {@link ESet.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ESet\n     * @static\n     * @param {IESet} message ESet message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ESet.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ESet message from the specified reader or buffer.\n     * @function decode\n     * @memberof ESet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ESet} ESet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ESet.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ESet();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.ps && message.ps.length))\n                    message.ps = [];\n                message.ps.push($root.Par.decode(reader, reader.uint32()));\n                break;\n            case 3:\n                message.locallyFree = reader.bytes();\n                break;\n            case 4:\n                message.connective_used = reader.bool();\n                break;\n            case 5:\n                message.remainder = $root.Var.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ESet message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ESet\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ESet} ESet\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ESet.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ESet message.\n     * @function verify\n     * @memberof ESet\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ESet.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.ps != null && message.hasOwnProperty(\"ps\")) {\n            if (!Array.isArray(message.ps))\n                return \"ps: array expected\";\n            for (var i = 0; i < message.ps.length; ++i) {\n                var error = $root.Par.verify(message.ps[i]);\n                if (error)\n                    return \"ps.\" + error;\n            }\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            if (typeof message.connective_used !== \"boolean\")\n                return \"connective_used: boolean expected\";\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\")) {\n            var error = $root.Var.verify(message.remainder);\n            if (error)\n                return \"remainder.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ESet message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ESet\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ESet} ESet\n     */\n    ESet.fromObject = function fromObject(object) {\n        if (object instanceof $root.ESet)\n            return object;\n        var message = new $root.ESet();\n        if (object.ps) {\n            if (!Array.isArray(object.ps))\n                throw TypeError(\".ESet.ps: array expected\");\n            message.ps = [];\n            for (var i = 0; i < object.ps.length; ++i) {\n                if (typeof object.ps[i] !== \"object\")\n                    throw TypeError(\".ESet.ps: object expected\");\n                message.ps[i] = $root.Par.fromObject(object.ps[i]);\n            }\n        }\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        if (object.connective_used != null)\n            message.connective_used = Boolean(object.connective_used);\n        if (object.remainder != null) {\n            if (typeof object.remainder !== \"object\")\n                throw TypeError(\".ESet.remainder: object expected\");\n            message.remainder = $root.Var.fromObject(object.remainder);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ESet message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ESet\n     * @static\n     * @param {ESet} message ESet\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ESet.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.ps = [];\n        if (options.defaults) {\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n            object.connective_used = false;\n            object.remainder = null;\n        }\n        if (message.ps && message.ps.length) {\n            object.ps = [];\n            for (var j = 0; j < message.ps.length; ++j)\n                object.ps[j] = $root.Par.toObject(message.ps[j], options);\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            object.connective_used = message.connective_used;\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            object.remainder = $root.Var.toObject(message.remainder, options);\n        return object;\n    };\n\n    /**\n     * Converts this ESet to JSON.\n     * @function toJSON\n     * @memberof ESet\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ESet.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ESet;\n})();\n\n$root.EMap = (function() {\n\n    /**\n     * Properties of a EMap.\n     * @exports IEMap\n     * @interface IEMap\n     * @property {Array.<IKeyValuePair>|null} [kvs] EMap kvs\n     * @property {Uint8Array|null} [locallyFree] EMap locallyFree\n     * @property {boolean|null} [connective_used] EMap connective_used\n     * @property {IVar|null} [remainder] EMap remainder\n     */\n\n    /**\n     * Constructs a new EMap.\n     * @exports EMap\n     * @classdesc Represents a EMap.\n     * @implements IEMap\n     * @constructor\n     * @param {IEMap=} [properties] Properties to set\n     */\n    function EMap(properties) {\n        this.kvs = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EMap kvs.\n     * @member {Array.<IKeyValuePair>} kvs\n     * @memberof EMap\n     * @instance\n     */\n    EMap.prototype.kvs = $util.emptyArray;\n\n    /**\n     * EMap locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof EMap\n     * @instance\n     */\n    EMap.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * EMap connective_used.\n     * @member {boolean} connective_used\n     * @memberof EMap\n     * @instance\n     */\n    EMap.prototype.connective_used = false;\n\n    /**\n     * EMap remainder.\n     * @member {IVar|null|undefined} remainder\n     * @memberof EMap\n     * @instance\n     */\n    EMap.prototype.remainder = null;\n\n    /**\n     * Creates a new EMap instance using the specified properties.\n     * @function create\n     * @memberof EMap\n     * @static\n     * @param {IEMap=} [properties] Properties to set\n     * @returns {EMap} EMap instance\n     */\n    EMap.create = function create(properties) {\n        return new EMap(properties);\n    };\n\n    /**\n     * Encodes the specified EMap message. Does not implicitly {@link EMap.verify|verify} messages.\n     * @function encode\n     * @memberof EMap\n     * @static\n     * @param {IEMap} message EMap message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMap.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.kvs != null && message.kvs.length)\n            for (var i = 0; i < message.kvs.length; ++i)\n                $root.KeyValuePair.encode(message.kvs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.locallyFree);\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.connective_used);\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            $root.Var.encode(message.remainder, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EMap message, length delimited. Does not implicitly {@link EMap.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EMap\n     * @static\n     * @param {IEMap} message EMap message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMap.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EMap message from the specified reader or buffer.\n     * @function decode\n     * @memberof EMap\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EMap} EMap\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMap.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMap();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.kvs && message.kvs.length))\n                    message.kvs = [];\n                message.kvs.push($root.KeyValuePair.decode(reader, reader.uint32()));\n                break;\n            case 3:\n                message.locallyFree = reader.bytes();\n                break;\n            case 4:\n                message.connective_used = reader.bool();\n                break;\n            case 5:\n                message.remainder = $root.Var.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EMap message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EMap\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EMap} EMap\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMap.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EMap message.\n     * @function verify\n     * @memberof EMap\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EMap.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.kvs != null && message.hasOwnProperty(\"kvs\")) {\n            if (!Array.isArray(message.kvs))\n                return \"kvs: array expected\";\n            for (var i = 0; i < message.kvs.length; ++i) {\n                var error = $root.KeyValuePair.verify(message.kvs[i]);\n                if (error)\n                    return \"kvs.\" + error;\n            }\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            if (typeof message.connective_used !== \"boolean\")\n                return \"connective_used: boolean expected\";\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\")) {\n            var error = $root.Var.verify(message.remainder);\n            if (error)\n                return \"remainder.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EMap message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EMap\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EMap} EMap\n     */\n    EMap.fromObject = function fromObject(object) {\n        if (object instanceof $root.EMap)\n            return object;\n        var message = new $root.EMap();\n        if (object.kvs) {\n            if (!Array.isArray(object.kvs))\n                throw TypeError(\".EMap.kvs: array expected\");\n            message.kvs = [];\n            for (var i = 0; i < object.kvs.length; ++i) {\n                if (typeof object.kvs[i] !== \"object\")\n                    throw TypeError(\".EMap.kvs: object expected\");\n                message.kvs[i] = $root.KeyValuePair.fromObject(object.kvs[i]);\n            }\n        }\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        if (object.connective_used != null)\n            message.connective_used = Boolean(object.connective_used);\n        if (object.remainder != null) {\n            if (typeof object.remainder !== \"object\")\n                throw TypeError(\".EMap.remainder: object expected\");\n            message.remainder = $root.Var.fromObject(object.remainder);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EMap message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EMap\n     * @static\n     * @param {EMap} message EMap\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EMap.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.kvs = [];\n        if (options.defaults) {\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n            object.connective_used = false;\n            object.remainder = null;\n        }\n        if (message.kvs && message.kvs.length) {\n            object.kvs = [];\n            for (var j = 0; j < message.kvs.length; ++j)\n                object.kvs[j] = $root.KeyValuePair.toObject(message.kvs[j], options);\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            object.connective_used = message.connective_used;\n        if (message.remainder != null && message.hasOwnProperty(\"remainder\"))\n            object.remainder = $root.Var.toObject(message.remainder, options);\n        return object;\n    };\n\n    /**\n     * Converts this EMap to JSON.\n     * @function toJSON\n     * @memberof EMap\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EMap.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EMap;\n})();\n\n$root.EMethod = (function() {\n\n    /**\n     * Properties of a EMethod.\n     * @exports IEMethod\n     * @interface IEMethod\n     * @property {string|null} [methodName] EMethod methodName\n     * @property {IPar|null} [target] EMethod target\n     * @property {Array.<IPar>|null} [\"arguments\"] EMethod arguments\n     * @property {Uint8Array|null} [locallyFree] EMethod locallyFree\n     * @property {boolean|null} [connective_used] EMethod connective_used\n     */\n\n    /**\n     * Constructs a new EMethod.\n     * @exports EMethod\n     * @classdesc `target.method(arguments)`\n     * @implements IEMethod\n     * @constructor\n     * @param {IEMethod=} [properties] Properties to set\n     */\n    function EMethod(properties) {\n        this[\"arguments\"] = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EMethod methodName.\n     * @member {string} methodName\n     * @memberof EMethod\n     * @instance\n     */\n    EMethod.prototype.methodName = \"\";\n\n    /**\n     * EMethod target.\n     * @member {IPar|null|undefined} target\n     * @memberof EMethod\n     * @instance\n     */\n    EMethod.prototype.target = null;\n\n    /**\n     * EMethod arguments.\n     * @member {Array.<IPar>} arguments\n     * @memberof EMethod\n     * @instance\n     */\n    EMethod.prototype[\"arguments\"] = $util.emptyArray;\n\n    /**\n     * EMethod locallyFree.\n     * @member {Uint8Array} locallyFree\n     * @memberof EMethod\n     * @instance\n     */\n    EMethod.prototype.locallyFree = $util.newBuffer([]);\n\n    /**\n     * EMethod connective_used.\n     * @member {boolean} connective_used\n     * @memberof EMethod\n     * @instance\n     */\n    EMethod.prototype.connective_used = false;\n\n    /**\n     * Creates a new EMethod instance using the specified properties.\n     * @function create\n     * @memberof EMethod\n     * @static\n     * @param {IEMethod=} [properties] Properties to set\n     * @returns {EMethod} EMethod instance\n     */\n    EMethod.create = function create(properties) {\n        return new EMethod(properties);\n    };\n\n    /**\n     * Encodes the specified EMethod message. Does not implicitly {@link EMethod.verify|verify} messages.\n     * @function encode\n     * @memberof EMethod\n     * @static\n     * @param {IEMethod} message EMethod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMethod.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.methodName != null && message.hasOwnProperty(\"methodName\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.methodName);\n        if (message.target != null && message.hasOwnProperty(\"target\"))\n            $root.Par.encode(message.target, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message[\"arguments\"] != null && message[\"arguments\"].length)\n            for (var i = 0; i < message[\"arguments\"].length; ++i)\n                $root.Par.encode(message[\"arguments\"][i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.locallyFree);\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.connective_used);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EMethod message, length delimited. Does not implicitly {@link EMethod.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EMethod\n     * @static\n     * @param {IEMethod} message EMethod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMethod.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EMethod message from the specified reader or buffer.\n     * @function decode\n     * @memberof EMethod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EMethod} EMethod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMethod.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMethod();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.methodName = reader.string();\n                break;\n            case 2:\n                message.target = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 3:\n                if (!(message[\"arguments\"] && message[\"arguments\"].length))\n                    message[\"arguments\"] = [];\n                message[\"arguments\"].push($root.Par.decode(reader, reader.uint32()));\n                break;\n            case 5:\n                message.locallyFree = reader.bytes();\n                break;\n            case 6:\n                message.connective_used = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EMethod message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EMethod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EMethod} EMethod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMethod.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EMethod message.\n     * @function verify\n     * @memberof EMethod\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EMethod.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.methodName != null && message.hasOwnProperty(\"methodName\"))\n            if (!$util.isString(message.methodName))\n                return \"methodName: string expected\";\n        if (message.target != null && message.hasOwnProperty(\"target\")) {\n            var error = $root.Par.verify(message.target);\n            if (error)\n                return \"target.\" + error;\n        }\n        if (message[\"arguments\"] != null && message.hasOwnProperty(\"arguments\")) {\n            if (!Array.isArray(message[\"arguments\"]))\n                return \"arguments: array expected\";\n            for (var i = 0; i < message[\"arguments\"].length; ++i) {\n                var error = $root.Par.verify(message[\"arguments\"][i]);\n                if (error)\n                    return \"arguments.\" + error;\n            }\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            if (!(message.locallyFree && typeof message.locallyFree.length === \"number\" || $util.isString(message.locallyFree)))\n                return \"locallyFree: buffer expected\";\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            if (typeof message.connective_used !== \"boolean\")\n                return \"connective_used: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a EMethod message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EMethod\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EMethod} EMethod\n     */\n    EMethod.fromObject = function fromObject(object) {\n        if (object instanceof $root.EMethod)\n            return object;\n        var message = new $root.EMethod();\n        if (object.methodName != null)\n            message.methodName = String(object.methodName);\n        if (object.target != null) {\n            if (typeof object.target !== \"object\")\n                throw TypeError(\".EMethod.target: object expected\");\n            message.target = $root.Par.fromObject(object.target);\n        }\n        if (object[\"arguments\"]) {\n            if (!Array.isArray(object[\"arguments\"]))\n                throw TypeError(\".EMethod.arguments: array expected\");\n            message[\"arguments\"] = [];\n            for (var i = 0; i < object[\"arguments\"].length; ++i) {\n                if (typeof object[\"arguments\"][i] !== \"object\")\n                    throw TypeError(\".EMethod.arguments: object expected\");\n                message[\"arguments\"][i] = $root.Par.fromObject(object[\"arguments\"][i]);\n            }\n        }\n        if (object.locallyFree != null)\n            if (typeof object.locallyFree === \"string\")\n                $util.base64.decode(object.locallyFree, message.locallyFree = $util.newBuffer($util.base64.length(object.locallyFree)), 0);\n            else if (object.locallyFree.length)\n                message.locallyFree = object.locallyFree;\n        if (object.connective_used != null)\n            message.connective_used = Boolean(object.connective_used);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EMethod message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EMethod\n     * @static\n     * @param {EMethod} message EMethod\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EMethod.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object[\"arguments\"] = [];\n        if (options.defaults) {\n            object.methodName = \"\";\n            object.target = null;\n            if (options.bytes === String)\n                object.locallyFree = \"\";\n            else {\n                object.locallyFree = [];\n                if (options.bytes !== Array)\n                    object.locallyFree = $util.newBuffer(object.locallyFree);\n            }\n            object.connective_used = false;\n        }\n        if (message.methodName != null && message.hasOwnProperty(\"methodName\"))\n            object.methodName = message.methodName;\n        if (message.target != null && message.hasOwnProperty(\"target\"))\n            object.target = $root.Par.toObject(message.target, options);\n        if (message[\"arguments\"] && message[\"arguments\"].length) {\n            object[\"arguments\"] = [];\n            for (var j = 0; j < message[\"arguments\"].length; ++j)\n                object[\"arguments\"][j] = $root.Par.toObject(message[\"arguments\"][j], options);\n        }\n        if (message.locallyFree != null && message.hasOwnProperty(\"locallyFree\"))\n            object.locallyFree = options.bytes === String ? $util.base64.encode(message.locallyFree, 0, message.locallyFree.length) : options.bytes === Array ? Array.prototype.slice.call(message.locallyFree) : message.locallyFree;\n        if (message.connective_used != null && message.hasOwnProperty(\"connective_used\"))\n            object.connective_used = message.connective_used;\n        return object;\n    };\n\n    /**\n     * Converts this EMethod to JSON.\n     * @function toJSON\n     * @memberof EMethod\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EMethod.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EMethod;\n})();\n\n$root.KeyValuePair = (function() {\n\n    /**\n     * Properties of a KeyValuePair.\n     * @exports IKeyValuePair\n     * @interface IKeyValuePair\n     * @property {IPar|null} [key] KeyValuePair key\n     * @property {IPar|null} [value] KeyValuePair value\n     */\n\n    /**\n     * Constructs a new KeyValuePair.\n     * @exports KeyValuePair\n     * @classdesc Represents a KeyValuePair.\n     * @implements IKeyValuePair\n     * @constructor\n     * @param {IKeyValuePair=} [properties] Properties to set\n     */\n    function KeyValuePair(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * KeyValuePair key.\n     * @member {IPar|null|undefined} key\n     * @memberof KeyValuePair\n     * @instance\n     */\n    KeyValuePair.prototype.key = null;\n\n    /**\n     * KeyValuePair value.\n     * @member {IPar|null|undefined} value\n     * @memberof KeyValuePair\n     * @instance\n     */\n    KeyValuePair.prototype.value = null;\n\n    /**\n     * Creates a new KeyValuePair instance using the specified properties.\n     * @function create\n     * @memberof KeyValuePair\n     * @static\n     * @param {IKeyValuePair=} [properties] Properties to set\n     * @returns {KeyValuePair} KeyValuePair instance\n     */\n    KeyValuePair.create = function create(properties) {\n        return new KeyValuePair(properties);\n    };\n\n    /**\n     * Encodes the specified KeyValuePair message. Does not implicitly {@link KeyValuePair.verify|verify} messages.\n     * @function encode\n     * @memberof KeyValuePair\n     * @static\n     * @param {IKeyValuePair} message KeyValuePair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeyValuePair.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            $root.Par.encode(message.key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            $root.Par.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified KeyValuePair message, length delimited. Does not implicitly {@link KeyValuePair.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof KeyValuePair\n     * @static\n     * @param {IKeyValuePair} message KeyValuePair message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    KeyValuePair.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a KeyValuePair message from the specified reader or buffer.\n     * @function decode\n     * @memberof KeyValuePair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {KeyValuePair} KeyValuePair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeyValuePair.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.KeyValuePair();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.key = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.value = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a KeyValuePair message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof KeyValuePair\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {KeyValuePair} KeyValuePair\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    KeyValuePair.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a KeyValuePair message.\n     * @function verify\n     * @memberof KeyValuePair\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    KeyValuePair.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.key != null && message.hasOwnProperty(\"key\")) {\n            var error = $root.Par.verify(message.key);\n            if (error)\n                return \"key.\" + error;\n        }\n        if (message.value != null && message.hasOwnProperty(\"value\")) {\n            var error = $root.Par.verify(message.value);\n            if (error)\n                return \"value.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a KeyValuePair message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof KeyValuePair\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {KeyValuePair} KeyValuePair\n     */\n    KeyValuePair.fromObject = function fromObject(object) {\n        if (object instanceof $root.KeyValuePair)\n            return object;\n        var message = new $root.KeyValuePair();\n        if (object.key != null) {\n            if (typeof object.key !== \"object\")\n                throw TypeError(\".KeyValuePair.key: object expected\");\n            message.key = $root.Par.fromObject(object.key);\n        }\n        if (object.value != null) {\n            if (typeof object.value !== \"object\")\n                throw TypeError(\".KeyValuePair.value: object expected\");\n            message.value = $root.Par.fromObject(object.value);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a KeyValuePair message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof KeyValuePair\n     * @static\n     * @param {KeyValuePair} message KeyValuePair\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    KeyValuePair.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.key = null;\n            object.value = null;\n        }\n        if (message.key != null && message.hasOwnProperty(\"key\"))\n            object.key = $root.Par.toObject(message.key, options);\n        if (message.value != null && message.hasOwnProperty(\"value\"))\n            object.value = $root.Par.toObject(message.value, options);\n        return object;\n    };\n\n    /**\n     * Converts this KeyValuePair to JSON.\n     * @function toJSON\n     * @memberof KeyValuePair\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    KeyValuePair.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return KeyValuePair;\n})();\n\n$root.EVar = (function() {\n\n    /**\n     * Properties of a EVar.\n     * @exports IEVar\n     * @interface IEVar\n     * @property {IVar|null} [v] EVar v\n     */\n\n    /**\n     * Constructs a new EVar.\n     * @exports EVar\n     * @classdesc Represents a EVar.\n     * @implements IEVar\n     * @constructor\n     * @param {IEVar=} [properties] Properties to set\n     */\n    function EVar(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EVar v.\n     * @member {IVar|null|undefined} v\n     * @memberof EVar\n     * @instance\n     */\n    EVar.prototype.v = null;\n\n    /**\n     * Creates a new EVar instance using the specified properties.\n     * @function create\n     * @memberof EVar\n     * @static\n     * @param {IEVar=} [properties] Properties to set\n     * @returns {EVar} EVar instance\n     */\n    EVar.create = function create(properties) {\n        return new EVar(properties);\n    };\n\n    /**\n     * Encodes the specified EVar message. Does not implicitly {@link EVar.verify|verify} messages.\n     * @function encode\n     * @memberof EVar\n     * @static\n     * @param {IEVar} message EVar message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EVar.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.v != null && message.hasOwnProperty(\"v\"))\n            $root.Var.encode(message.v, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EVar message, length delimited. Does not implicitly {@link EVar.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EVar\n     * @static\n     * @param {IEVar} message EVar message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EVar.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EVar message from the specified reader or buffer.\n     * @function decode\n     * @memberof EVar\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EVar} EVar\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EVar.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EVar();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.v = $root.Var.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EVar message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EVar\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EVar} EVar\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EVar.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EVar message.\n     * @function verify\n     * @memberof EVar\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EVar.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.v != null && message.hasOwnProperty(\"v\")) {\n            var error = $root.Var.verify(message.v);\n            if (error)\n                return \"v.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EVar message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EVar\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EVar} EVar\n     */\n    EVar.fromObject = function fromObject(object) {\n        if (object instanceof $root.EVar)\n            return object;\n        var message = new $root.EVar();\n        if (object.v != null) {\n            if (typeof object.v !== \"object\")\n                throw TypeError(\".EVar.v: object expected\");\n            message.v = $root.Var.fromObject(object.v);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EVar message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EVar\n     * @static\n     * @param {EVar} message EVar\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EVar.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.v = null;\n        if (message.v != null && message.hasOwnProperty(\"v\"))\n            object.v = $root.Var.toObject(message.v, options);\n        return object;\n    };\n\n    /**\n     * Converts this EVar to JSON.\n     * @function toJSON\n     * @memberof EVar\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EVar.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EVar;\n})();\n\n$root.ENot = (function() {\n\n    /**\n     * Properties of a ENot.\n     * @exports IENot\n     * @interface IENot\n     * @property {IPar|null} [p] ENot p\n     */\n\n    /**\n     * Constructs a new ENot.\n     * @exports ENot\n     * @classdesc Represents a ENot.\n     * @implements IENot\n     * @constructor\n     * @param {IENot=} [properties] Properties to set\n     */\n    function ENot(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ENot p.\n     * @member {IPar|null|undefined} p\n     * @memberof ENot\n     * @instance\n     */\n    ENot.prototype.p = null;\n\n    /**\n     * Creates a new ENot instance using the specified properties.\n     * @function create\n     * @memberof ENot\n     * @static\n     * @param {IENot=} [properties] Properties to set\n     * @returns {ENot} ENot instance\n     */\n    ENot.create = function create(properties) {\n        return new ENot(properties);\n    };\n\n    /**\n     * Encodes the specified ENot message. Does not implicitly {@link ENot.verify|verify} messages.\n     * @function encode\n     * @memberof ENot\n     * @static\n     * @param {IENot} message ENot message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ENot.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p != null && message.hasOwnProperty(\"p\"))\n            $root.Par.encode(message.p, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ENot message, length delimited. Does not implicitly {@link ENot.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ENot\n     * @static\n     * @param {IENot} message ENot message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ENot.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ENot message from the specified reader or buffer.\n     * @function decode\n     * @memberof ENot\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ENot} ENot\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ENot.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ENot();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ENot message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ENot\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ENot} ENot\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ENot.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ENot message.\n     * @function verify\n     * @memberof ENot\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ENot.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p != null && message.hasOwnProperty(\"p\")) {\n            var error = $root.Par.verify(message.p);\n            if (error)\n                return \"p.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ENot message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ENot\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ENot} ENot\n     */\n    ENot.fromObject = function fromObject(object) {\n        if (object instanceof $root.ENot)\n            return object;\n        var message = new $root.ENot();\n        if (object.p != null) {\n            if (typeof object.p !== \"object\")\n                throw TypeError(\".ENot.p: object expected\");\n            message.p = $root.Par.fromObject(object.p);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ENot message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ENot\n     * @static\n     * @param {ENot} message ENot\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ENot.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.p = null;\n        if (message.p != null && message.hasOwnProperty(\"p\"))\n            object.p = $root.Par.toObject(message.p, options);\n        return object;\n    };\n\n    /**\n     * Converts this ENot to JSON.\n     * @function toJSON\n     * @memberof ENot\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ENot.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ENot;\n})();\n\n$root.ENeg = (function() {\n\n    /**\n     * Properties of a ENeg.\n     * @exports IENeg\n     * @interface IENeg\n     * @property {IPar|null} [p] ENeg p\n     */\n\n    /**\n     * Constructs a new ENeg.\n     * @exports ENeg\n     * @classdesc Represents a ENeg.\n     * @implements IENeg\n     * @constructor\n     * @param {IENeg=} [properties] Properties to set\n     */\n    function ENeg(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ENeg p.\n     * @member {IPar|null|undefined} p\n     * @memberof ENeg\n     * @instance\n     */\n    ENeg.prototype.p = null;\n\n    /**\n     * Creates a new ENeg instance using the specified properties.\n     * @function create\n     * @memberof ENeg\n     * @static\n     * @param {IENeg=} [properties] Properties to set\n     * @returns {ENeg} ENeg instance\n     */\n    ENeg.create = function create(properties) {\n        return new ENeg(properties);\n    };\n\n    /**\n     * Encodes the specified ENeg message. Does not implicitly {@link ENeg.verify|verify} messages.\n     * @function encode\n     * @memberof ENeg\n     * @static\n     * @param {IENeg} message ENeg message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ENeg.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p != null && message.hasOwnProperty(\"p\"))\n            $root.Par.encode(message.p, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ENeg message, length delimited. Does not implicitly {@link ENeg.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ENeg\n     * @static\n     * @param {IENeg} message ENeg message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ENeg.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ENeg message from the specified reader or buffer.\n     * @function decode\n     * @memberof ENeg\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ENeg} ENeg\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ENeg.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ENeg();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ENeg message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ENeg\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ENeg} ENeg\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ENeg.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ENeg message.\n     * @function verify\n     * @memberof ENeg\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ENeg.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p != null && message.hasOwnProperty(\"p\")) {\n            var error = $root.Par.verify(message.p);\n            if (error)\n                return \"p.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ENeg message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ENeg\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ENeg} ENeg\n     */\n    ENeg.fromObject = function fromObject(object) {\n        if (object instanceof $root.ENeg)\n            return object;\n        var message = new $root.ENeg();\n        if (object.p != null) {\n            if (typeof object.p !== \"object\")\n                throw TypeError(\".ENeg.p: object expected\");\n            message.p = $root.Par.fromObject(object.p);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ENeg message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ENeg\n     * @static\n     * @param {ENeg} message ENeg\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ENeg.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            object.p = null;\n        if (message.p != null && message.hasOwnProperty(\"p\"))\n            object.p = $root.Par.toObject(message.p, options);\n        return object;\n    };\n\n    /**\n     * Converts this ENeg to JSON.\n     * @function toJSON\n     * @memberof ENeg\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ENeg.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ENeg;\n})();\n\n$root.EMult = (function() {\n\n    /**\n     * Properties of a EMult.\n     * @exports IEMult\n     * @interface IEMult\n     * @property {IPar|null} [p1] EMult p1\n     * @property {IPar|null} [p2] EMult p2\n     */\n\n    /**\n     * Constructs a new EMult.\n     * @exports EMult\n     * @classdesc Represents a EMult.\n     * @implements IEMult\n     * @constructor\n     * @param {IEMult=} [properties] Properties to set\n     */\n    function EMult(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EMult p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EMult\n     * @instance\n     */\n    EMult.prototype.p1 = null;\n\n    /**\n     * EMult p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EMult\n     * @instance\n     */\n    EMult.prototype.p2 = null;\n\n    /**\n     * Creates a new EMult instance using the specified properties.\n     * @function create\n     * @memberof EMult\n     * @static\n     * @param {IEMult=} [properties] Properties to set\n     * @returns {EMult} EMult instance\n     */\n    EMult.create = function create(properties) {\n        return new EMult(properties);\n    };\n\n    /**\n     * Encodes the specified EMult message. Does not implicitly {@link EMult.verify|verify} messages.\n     * @function encode\n     * @memberof EMult\n     * @static\n     * @param {IEMult} message EMult message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMult.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EMult message, length delimited. Does not implicitly {@link EMult.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EMult\n     * @static\n     * @param {IEMult} message EMult message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMult.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EMult message from the specified reader or buffer.\n     * @function decode\n     * @memberof EMult\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EMult} EMult\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMult.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMult();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EMult message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EMult\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EMult} EMult\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMult.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EMult message.\n     * @function verify\n     * @memberof EMult\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EMult.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EMult message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EMult\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EMult} EMult\n     */\n    EMult.fromObject = function fromObject(object) {\n        if (object instanceof $root.EMult)\n            return object;\n        var message = new $root.EMult();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EMult.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EMult.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EMult message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EMult\n     * @static\n     * @param {EMult} message EMult\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EMult.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EMult to JSON.\n     * @function toJSON\n     * @memberof EMult\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EMult.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EMult;\n})();\n\n$root.EDiv = (function() {\n\n    /**\n     * Properties of a EDiv.\n     * @exports IEDiv\n     * @interface IEDiv\n     * @property {IPar|null} [p1] EDiv p1\n     * @property {IPar|null} [p2] EDiv p2\n     */\n\n    /**\n     * Constructs a new EDiv.\n     * @exports EDiv\n     * @classdesc Represents a EDiv.\n     * @implements IEDiv\n     * @constructor\n     * @param {IEDiv=} [properties] Properties to set\n     */\n    function EDiv(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EDiv p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EDiv\n     * @instance\n     */\n    EDiv.prototype.p1 = null;\n\n    /**\n     * EDiv p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EDiv\n     * @instance\n     */\n    EDiv.prototype.p2 = null;\n\n    /**\n     * Creates a new EDiv instance using the specified properties.\n     * @function create\n     * @memberof EDiv\n     * @static\n     * @param {IEDiv=} [properties] Properties to set\n     * @returns {EDiv} EDiv instance\n     */\n    EDiv.create = function create(properties) {\n        return new EDiv(properties);\n    };\n\n    /**\n     * Encodes the specified EDiv message. Does not implicitly {@link EDiv.verify|verify} messages.\n     * @function encode\n     * @memberof EDiv\n     * @static\n     * @param {IEDiv} message EDiv message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EDiv.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EDiv message, length delimited. Does not implicitly {@link EDiv.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EDiv\n     * @static\n     * @param {IEDiv} message EDiv message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EDiv.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EDiv message from the specified reader or buffer.\n     * @function decode\n     * @memberof EDiv\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EDiv} EDiv\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EDiv.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EDiv();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EDiv message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EDiv\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EDiv} EDiv\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EDiv.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EDiv message.\n     * @function verify\n     * @memberof EDiv\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EDiv.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EDiv message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EDiv\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EDiv} EDiv\n     */\n    EDiv.fromObject = function fromObject(object) {\n        if (object instanceof $root.EDiv)\n            return object;\n        var message = new $root.EDiv();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EDiv.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EDiv.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EDiv message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EDiv\n     * @static\n     * @param {EDiv} message EDiv\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EDiv.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EDiv to JSON.\n     * @function toJSON\n     * @memberof EDiv\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EDiv.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EDiv;\n})();\n\n$root.EMod = (function() {\n\n    /**\n     * Properties of a EMod.\n     * @exports IEMod\n     * @interface IEMod\n     * @property {IPar|null} [p1] EMod p1\n     * @property {IPar|null} [p2] EMod p2\n     */\n\n    /**\n     * Constructs a new EMod.\n     * @exports EMod\n     * @classdesc Represents a EMod.\n     * @implements IEMod\n     * @constructor\n     * @param {IEMod=} [properties] Properties to set\n     */\n    function EMod(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EMod p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EMod\n     * @instance\n     */\n    EMod.prototype.p1 = null;\n\n    /**\n     * EMod p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EMod\n     * @instance\n     */\n    EMod.prototype.p2 = null;\n\n    /**\n     * Creates a new EMod instance using the specified properties.\n     * @function create\n     * @memberof EMod\n     * @static\n     * @param {IEMod=} [properties] Properties to set\n     * @returns {EMod} EMod instance\n     */\n    EMod.create = function create(properties) {\n        return new EMod(properties);\n    };\n\n    /**\n     * Encodes the specified EMod message. Does not implicitly {@link EMod.verify|verify} messages.\n     * @function encode\n     * @memberof EMod\n     * @static\n     * @param {IEMod} message EMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMod.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EMod message, length delimited. Does not implicitly {@link EMod.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EMod\n     * @static\n     * @param {IEMod} message EMod message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMod.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EMod message from the specified reader or buffer.\n     * @function decode\n     * @memberof EMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EMod} EMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMod.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMod();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EMod message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EMod\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EMod} EMod\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMod.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EMod message.\n     * @function verify\n     * @memberof EMod\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EMod.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EMod message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EMod\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EMod} EMod\n     */\n    EMod.fromObject = function fromObject(object) {\n        if (object instanceof $root.EMod)\n            return object;\n        var message = new $root.EMod();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EMod.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EMod.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EMod message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EMod\n     * @static\n     * @param {EMod} message EMod\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EMod.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EMod to JSON.\n     * @function toJSON\n     * @memberof EMod\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EMod.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EMod;\n})();\n\n$root.EPlus = (function() {\n\n    /**\n     * Properties of a EPlus.\n     * @exports IEPlus\n     * @interface IEPlus\n     * @property {IPar|null} [p1] EPlus p1\n     * @property {IPar|null} [p2] EPlus p2\n     */\n\n    /**\n     * Constructs a new EPlus.\n     * @exports EPlus\n     * @classdesc Represents a EPlus.\n     * @implements IEPlus\n     * @constructor\n     * @param {IEPlus=} [properties] Properties to set\n     */\n    function EPlus(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EPlus p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EPlus\n     * @instance\n     */\n    EPlus.prototype.p1 = null;\n\n    /**\n     * EPlus p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EPlus\n     * @instance\n     */\n    EPlus.prototype.p2 = null;\n\n    /**\n     * Creates a new EPlus instance using the specified properties.\n     * @function create\n     * @memberof EPlus\n     * @static\n     * @param {IEPlus=} [properties] Properties to set\n     * @returns {EPlus} EPlus instance\n     */\n    EPlus.create = function create(properties) {\n        return new EPlus(properties);\n    };\n\n    /**\n     * Encodes the specified EPlus message. Does not implicitly {@link EPlus.verify|verify} messages.\n     * @function encode\n     * @memberof EPlus\n     * @static\n     * @param {IEPlus} message EPlus message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EPlus.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EPlus message, length delimited. Does not implicitly {@link EPlus.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EPlus\n     * @static\n     * @param {IEPlus} message EPlus message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EPlus.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EPlus message from the specified reader or buffer.\n     * @function decode\n     * @memberof EPlus\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EPlus} EPlus\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EPlus.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EPlus();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EPlus message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EPlus\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EPlus} EPlus\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EPlus.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EPlus message.\n     * @function verify\n     * @memberof EPlus\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EPlus.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EPlus message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EPlus\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EPlus} EPlus\n     */\n    EPlus.fromObject = function fromObject(object) {\n        if (object instanceof $root.EPlus)\n            return object;\n        var message = new $root.EPlus();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EPlus.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EPlus.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EPlus message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EPlus\n     * @static\n     * @param {EPlus} message EPlus\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EPlus.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EPlus to JSON.\n     * @function toJSON\n     * @memberof EPlus\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EPlus.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EPlus;\n})();\n\n$root.EMinus = (function() {\n\n    /**\n     * Properties of a EMinus.\n     * @exports IEMinus\n     * @interface IEMinus\n     * @property {IPar|null} [p1] EMinus p1\n     * @property {IPar|null} [p2] EMinus p2\n     */\n\n    /**\n     * Constructs a new EMinus.\n     * @exports EMinus\n     * @classdesc Represents a EMinus.\n     * @implements IEMinus\n     * @constructor\n     * @param {IEMinus=} [properties] Properties to set\n     */\n    function EMinus(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EMinus p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EMinus\n     * @instance\n     */\n    EMinus.prototype.p1 = null;\n\n    /**\n     * EMinus p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EMinus\n     * @instance\n     */\n    EMinus.prototype.p2 = null;\n\n    /**\n     * Creates a new EMinus instance using the specified properties.\n     * @function create\n     * @memberof EMinus\n     * @static\n     * @param {IEMinus=} [properties] Properties to set\n     * @returns {EMinus} EMinus instance\n     */\n    EMinus.create = function create(properties) {\n        return new EMinus(properties);\n    };\n\n    /**\n     * Encodes the specified EMinus message. Does not implicitly {@link EMinus.verify|verify} messages.\n     * @function encode\n     * @memberof EMinus\n     * @static\n     * @param {IEMinus} message EMinus message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMinus.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EMinus message, length delimited. Does not implicitly {@link EMinus.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EMinus\n     * @static\n     * @param {IEMinus} message EMinus message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMinus.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EMinus message from the specified reader or buffer.\n     * @function decode\n     * @memberof EMinus\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EMinus} EMinus\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMinus.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMinus();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EMinus message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EMinus\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EMinus} EMinus\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMinus.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EMinus message.\n     * @function verify\n     * @memberof EMinus\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EMinus.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EMinus message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EMinus\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EMinus} EMinus\n     */\n    EMinus.fromObject = function fromObject(object) {\n        if (object instanceof $root.EMinus)\n            return object;\n        var message = new $root.EMinus();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EMinus.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EMinus.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EMinus message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EMinus\n     * @static\n     * @param {EMinus} message EMinus\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EMinus.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EMinus to JSON.\n     * @function toJSON\n     * @memberof EMinus\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EMinus.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EMinus;\n})();\n\n$root.ELt = (function() {\n\n    /**\n     * Properties of a ELt.\n     * @exports IELt\n     * @interface IELt\n     * @property {IPar|null} [p1] ELt p1\n     * @property {IPar|null} [p2] ELt p2\n     */\n\n    /**\n     * Constructs a new ELt.\n     * @exports ELt\n     * @classdesc Represents a ELt.\n     * @implements IELt\n     * @constructor\n     * @param {IELt=} [properties] Properties to set\n     */\n    function ELt(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ELt p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof ELt\n     * @instance\n     */\n    ELt.prototype.p1 = null;\n\n    /**\n     * ELt p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof ELt\n     * @instance\n     */\n    ELt.prototype.p2 = null;\n\n    /**\n     * Creates a new ELt instance using the specified properties.\n     * @function create\n     * @memberof ELt\n     * @static\n     * @param {IELt=} [properties] Properties to set\n     * @returns {ELt} ELt instance\n     */\n    ELt.create = function create(properties) {\n        return new ELt(properties);\n    };\n\n    /**\n     * Encodes the specified ELt message. Does not implicitly {@link ELt.verify|verify} messages.\n     * @function encode\n     * @memberof ELt\n     * @static\n     * @param {IELt} message ELt message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ELt.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ELt message, length delimited. Does not implicitly {@link ELt.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ELt\n     * @static\n     * @param {IELt} message ELt message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ELt.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ELt message from the specified reader or buffer.\n     * @function decode\n     * @memberof ELt\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ELt} ELt\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ELt.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ELt();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ELt message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ELt\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ELt} ELt\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ELt.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ELt message.\n     * @function verify\n     * @memberof ELt\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ELt.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ELt message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ELt\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ELt} ELt\n     */\n    ELt.fromObject = function fromObject(object) {\n        if (object instanceof $root.ELt)\n            return object;\n        var message = new $root.ELt();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".ELt.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".ELt.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ELt message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ELt\n     * @static\n     * @param {ELt} message ELt\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ELt.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this ELt to JSON.\n     * @function toJSON\n     * @memberof ELt\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ELt.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ELt;\n})();\n\n$root.ELte = (function() {\n\n    /**\n     * Properties of a ELte.\n     * @exports IELte\n     * @interface IELte\n     * @property {IPar|null} [p1] ELte p1\n     * @property {IPar|null} [p2] ELte p2\n     */\n\n    /**\n     * Constructs a new ELte.\n     * @exports ELte\n     * @classdesc Represents a ELte.\n     * @implements IELte\n     * @constructor\n     * @param {IELte=} [properties] Properties to set\n     */\n    function ELte(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ELte p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof ELte\n     * @instance\n     */\n    ELte.prototype.p1 = null;\n\n    /**\n     * ELte p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof ELte\n     * @instance\n     */\n    ELte.prototype.p2 = null;\n\n    /**\n     * Creates a new ELte instance using the specified properties.\n     * @function create\n     * @memberof ELte\n     * @static\n     * @param {IELte=} [properties] Properties to set\n     * @returns {ELte} ELte instance\n     */\n    ELte.create = function create(properties) {\n        return new ELte(properties);\n    };\n\n    /**\n     * Encodes the specified ELte message. Does not implicitly {@link ELte.verify|verify} messages.\n     * @function encode\n     * @memberof ELte\n     * @static\n     * @param {IELte} message ELte message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ELte.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ELte message, length delimited. Does not implicitly {@link ELte.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ELte\n     * @static\n     * @param {IELte} message ELte message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ELte.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ELte message from the specified reader or buffer.\n     * @function decode\n     * @memberof ELte\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ELte} ELte\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ELte.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ELte();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ELte message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ELte\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ELte} ELte\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ELte.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ELte message.\n     * @function verify\n     * @memberof ELte\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ELte.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ELte message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ELte\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ELte} ELte\n     */\n    ELte.fromObject = function fromObject(object) {\n        if (object instanceof $root.ELte)\n            return object;\n        var message = new $root.ELte();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".ELte.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".ELte.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ELte message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ELte\n     * @static\n     * @param {ELte} message ELte\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ELte.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this ELte to JSON.\n     * @function toJSON\n     * @memberof ELte\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ELte.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ELte;\n})();\n\n$root.EGt = (function() {\n\n    /**\n     * Properties of a EGt.\n     * @exports IEGt\n     * @interface IEGt\n     * @property {IPar|null} [p1] EGt p1\n     * @property {IPar|null} [p2] EGt p2\n     */\n\n    /**\n     * Constructs a new EGt.\n     * @exports EGt\n     * @classdesc Represents a EGt.\n     * @implements IEGt\n     * @constructor\n     * @param {IEGt=} [properties] Properties to set\n     */\n    function EGt(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EGt p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EGt\n     * @instance\n     */\n    EGt.prototype.p1 = null;\n\n    /**\n     * EGt p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EGt\n     * @instance\n     */\n    EGt.prototype.p2 = null;\n\n    /**\n     * Creates a new EGt instance using the specified properties.\n     * @function create\n     * @memberof EGt\n     * @static\n     * @param {IEGt=} [properties] Properties to set\n     * @returns {EGt} EGt instance\n     */\n    EGt.create = function create(properties) {\n        return new EGt(properties);\n    };\n\n    /**\n     * Encodes the specified EGt message. Does not implicitly {@link EGt.verify|verify} messages.\n     * @function encode\n     * @memberof EGt\n     * @static\n     * @param {IEGt} message EGt message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EGt.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EGt message, length delimited. Does not implicitly {@link EGt.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EGt\n     * @static\n     * @param {IEGt} message EGt message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EGt.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EGt message from the specified reader or buffer.\n     * @function decode\n     * @memberof EGt\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EGt} EGt\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EGt.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EGt();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EGt message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EGt\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EGt} EGt\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EGt.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EGt message.\n     * @function verify\n     * @memberof EGt\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EGt.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EGt message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EGt\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EGt} EGt\n     */\n    EGt.fromObject = function fromObject(object) {\n        if (object instanceof $root.EGt)\n            return object;\n        var message = new $root.EGt();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EGt.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EGt.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EGt message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EGt\n     * @static\n     * @param {EGt} message EGt\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EGt.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EGt to JSON.\n     * @function toJSON\n     * @memberof EGt\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EGt.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EGt;\n})();\n\n$root.EGte = (function() {\n\n    /**\n     * Properties of a EGte.\n     * @exports IEGte\n     * @interface IEGte\n     * @property {IPar|null} [p1] EGte p1\n     * @property {IPar|null} [p2] EGte p2\n     */\n\n    /**\n     * Constructs a new EGte.\n     * @exports EGte\n     * @classdesc Represents a EGte.\n     * @implements IEGte\n     * @constructor\n     * @param {IEGte=} [properties] Properties to set\n     */\n    function EGte(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EGte p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EGte\n     * @instance\n     */\n    EGte.prototype.p1 = null;\n\n    /**\n     * EGte p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EGte\n     * @instance\n     */\n    EGte.prototype.p2 = null;\n\n    /**\n     * Creates a new EGte instance using the specified properties.\n     * @function create\n     * @memberof EGte\n     * @static\n     * @param {IEGte=} [properties] Properties to set\n     * @returns {EGte} EGte instance\n     */\n    EGte.create = function create(properties) {\n        return new EGte(properties);\n    };\n\n    /**\n     * Encodes the specified EGte message. Does not implicitly {@link EGte.verify|verify} messages.\n     * @function encode\n     * @memberof EGte\n     * @static\n     * @param {IEGte} message EGte message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EGte.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EGte message, length delimited. Does not implicitly {@link EGte.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EGte\n     * @static\n     * @param {IEGte} message EGte message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EGte.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EGte message from the specified reader or buffer.\n     * @function decode\n     * @memberof EGte\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EGte} EGte\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EGte.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EGte();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EGte message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EGte\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EGte} EGte\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EGte.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EGte message.\n     * @function verify\n     * @memberof EGte\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EGte.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EGte message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EGte\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EGte} EGte\n     */\n    EGte.fromObject = function fromObject(object) {\n        if (object instanceof $root.EGte)\n            return object;\n        var message = new $root.EGte();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EGte.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EGte.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EGte message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EGte\n     * @static\n     * @param {EGte} message EGte\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EGte.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EGte to JSON.\n     * @function toJSON\n     * @memberof EGte\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EGte.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EGte;\n})();\n\n$root.EEq = (function() {\n\n    /**\n     * Properties of a EEq.\n     * @exports IEEq\n     * @interface IEEq\n     * @property {IPar|null} [p1] EEq p1\n     * @property {IPar|null} [p2] EEq p2\n     */\n\n    /**\n     * Constructs a new EEq.\n     * @exports EEq\n     * @classdesc Represents a EEq.\n     * @implements IEEq\n     * @constructor\n     * @param {IEEq=} [properties] Properties to set\n     */\n    function EEq(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EEq p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EEq\n     * @instance\n     */\n    EEq.prototype.p1 = null;\n\n    /**\n     * EEq p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EEq\n     * @instance\n     */\n    EEq.prototype.p2 = null;\n\n    /**\n     * Creates a new EEq instance using the specified properties.\n     * @function create\n     * @memberof EEq\n     * @static\n     * @param {IEEq=} [properties] Properties to set\n     * @returns {EEq} EEq instance\n     */\n    EEq.create = function create(properties) {\n        return new EEq(properties);\n    };\n\n    /**\n     * Encodes the specified EEq message. Does not implicitly {@link EEq.verify|verify} messages.\n     * @function encode\n     * @memberof EEq\n     * @static\n     * @param {IEEq} message EEq message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EEq.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EEq message, length delimited. Does not implicitly {@link EEq.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EEq\n     * @static\n     * @param {IEEq} message EEq message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EEq.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EEq message from the specified reader or buffer.\n     * @function decode\n     * @memberof EEq\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EEq} EEq\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EEq.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EEq();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EEq message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EEq\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EEq} EEq\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EEq.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EEq message.\n     * @function verify\n     * @memberof EEq\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EEq.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EEq message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EEq\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EEq} EEq\n     */\n    EEq.fromObject = function fromObject(object) {\n        if (object instanceof $root.EEq)\n            return object;\n        var message = new $root.EEq();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EEq.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EEq.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EEq message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EEq\n     * @static\n     * @param {EEq} message EEq\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EEq.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EEq to JSON.\n     * @function toJSON\n     * @memberof EEq\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EEq.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EEq;\n})();\n\n$root.ENeq = (function() {\n\n    /**\n     * Properties of a ENeq.\n     * @exports IENeq\n     * @interface IENeq\n     * @property {IPar|null} [p1] ENeq p1\n     * @property {IPar|null} [p2] ENeq p2\n     */\n\n    /**\n     * Constructs a new ENeq.\n     * @exports ENeq\n     * @classdesc Represents a ENeq.\n     * @implements IENeq\n     * @constructor\n     * @param {IENeq=} [properties] Properties to set\n     */\n    function ENeq(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ENeq p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof ENeq\n     * @instance\n     */\n    ENeq.prototype.p1 = null;\n\n    /**\n     * ENeq p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof ENeq\n     * @instance\n     */\n    ENeq.prototype.p2 = null;\n\n    /**\n     * Creates a new ENeq instance using the specified properties.\n     * @function create\n     * @memberof ENeq\n     * @static\n     * @param {IENeq=} [properties] Properties to set\n     * @returns {ENeq} ENeq instance\n     */\n    ENeq.create = function create(properties) {\n        return new ENeq(properties);\n    };\n\n    /**\n     * Encodes the specified ENeq message. Does not implicitly {@link ENeq.verify|verify} messages.\n     * @function encode\n     * @memberof ENeq\n     * @static\n     * @param {IENeq} message ENeq message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ENeq.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ENeq message, length delimited. Does not implicitly {@link ENeq.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ENeq\n     * @static\n     * @param {IENeq} message ENeq message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ENeq.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ENeq message from the specified reader or buffer.\n     * @function decode\n     * @memberof ENeq\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ENeq} ENeq\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ENeq.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ENeq();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ENeq message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ENeq\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ENeq} ENeq\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ENeq.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ENeq message.\n     * @function verify\n     * @memberof ENeq\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ENeq.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ENeq message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ENeq\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ENeq} ENeq\n     */\n    ENeq.fromObject = function fromObject(object) {\n        if (object instanceof $root.ENeq)\n            return object;\n        var message = new $root.ENeq();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".ENeq.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".ENeq.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ENeq message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ENeq\n     * @static\n     * @param {ENeq} message ENeq\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ENeq.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this ENeq to JSON.\n     * @function toJSON\n     * @memberof ENeq\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ENeq.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ENeq;\n})();\n\n$root.EAnd = (function() {\n\n    /**\n     * Properties of a EAnd.\n     * @exports IEAnd\n     * @interface IEAnd\n     * @property {IPar|null} [p1] EAnd p1\n     * @property {IPar|null} [p2] EAnd p2\n     */\n\n    /**\n     * Constructs a new EAnd.\n     * @exports EAnd\n     * @classdesc Represents a EAnd.\n     * @implements IEAnd\n     * @constructor\n     * @param {IEAnd=} [properties] Properties to set\n     */\n    function EAnd(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EAnd p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EAnd\n     * @instance\n     */\n    EAnd.prototype.p1 = null;\n\n    /**\n     * EAnd p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EAnd\n     * @instance\n     */\n    EAnd.prototype.p2 = null;\n\n    /**\n     * Creates a new EAnd instance using the specified properties.\n     * @function create\n     * @memberof EAnd\n     * @static\n     * @param {IEAnd=} [properties] Properties to set\n     * @returns {EAnd} EAnd instance\n     */\n    EAnd.create = function create(properties) {\n        return new EAnd(properties);\n    };\n\n    /**\n     * Encodes the specified EAnd message. Does not implicitly {@link EAnd.verify|verify} messages.\n     * @function encode\n     * @memberof EAnd\n     * @static\n     * @param {IEAnd} message EAnd message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EAnd.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EAnd message, length delimited. Does not implicitly {@link EAnd.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EAnd\n     * @static\n     * @param {IEAnd} message EAnd message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EAnd.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EAnd message from the specified reader or buffer.\n     * @function decode\n     * @memberof EAnd\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EAnd} EAnd\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EAnd.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EAnd();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EAnd message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EAnd\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EAnd} EAnd\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EAnd.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EAnd message.\n     * @function verify\n     * @memberof EAnd\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EAnd.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EAnd message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EAnd\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EAnd} EAnd\n     */\n    EAnd.fromObject = function fromObject(object) {\n        if (object instanceof $root.EAnd)\n            return object;\n        var message = new $root.EAnd();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EAnd.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EAnd.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EAnd message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EAnd\n     * @static\n     * @param {EAnd} message EAnd\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EAnd.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EAnd to JSON.\n     * @function toJSON\n     * @memberof EAnd\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EAnd.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EAnd;\n})();\n\n$root.EOr = (function() {\n\n    /**\n     * Properties of a EOr.\n     * @exports IEOr\n     * @interface IEOr\n     * @property {IPar|null} [p1] EOr p1\n     * @property {IPar|null} [p2] EOr p2\n     */\n\n    /**\n     * Constructs a new EOr.\n     * @exports EOr\n     * @classdesc Represents a EOr.\n     * @implements IEOr\n     * @constructor\n     * @param {IEOr=} [properties] Properties to set\n     */\n    function EOr(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EOr p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EOr\n     * @instance\n     */\n    EOr.prototype.p1 = null;\n\n    /**\n     * EOr p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EOr\n     * @instance\n     */\n    EOr.prototype.p2 = null;\n\n    /**\n     * Creates a new EOr instance using the specified properties.\n     * @function create\n     * @memberof EOr\n     * @static\n     * @param {IEOr=} [properties] Properties to set\n     * @returns {EOr} EOr instance\n     */\n    EOr.create = function create(properties) {\n        return new EOr(properties);\n    };\n\n    /**\n     * Encodes the specified EOr message. Does not implicitly {@link EOr.verify|verify} messages.\n     * @function encode\n     * @memberof EOr\n     * @static\n     * @param {IEOr} message EOr message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EOr.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EOr message, length delimited. Does not implicitly {@link EOr.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EOr\n     * @static\n     * @param {IEOr} message EOr message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EOr.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EOr message from the specified reader or buffer.\n     * @function decode\n     * @memberof EOr\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EOr} EOr\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EOr.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EOr();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EOr message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EOr\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EOr} EOr\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EOr.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EOr message.\n     * @function verify\n     * @memberof EOr\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EOr.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EOr message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EOr\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EOr} EOr\n     */\n    EOr.fromObject = function fromObject(object) {\n        if (object instanceof $root.EOr)\n            return object;\n        var message = new $root.EOr();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EOr.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EOr.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EOr message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EOr\n     * @static\n     * @param {EOr} message EOr\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EOr.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EOr to JSON.\n     * @function toJSON\n     * @memberof EOr\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EOr.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EOr;\n})();\n\n$root.EMatches = (function() {\n\n    /**\n     * Properties of a EMatches.\n     * @exports IEMatches\n     * @interface IEMatches\n     * @property {IPar|null} [target] EMatches target\n     * @property {IPar|null} [pattern] EMatches pattern\n     */\n\n    /**\n     * Constructs a new EMatches.\n     * @exports EMatches\n     * @classdesc Represents a EMatches.\n     * @implements IEMatches\n     * @constructor\n     * @param {IEMatches=} [properties] Properties to set\n     */\n    function EMatches(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EMatches target.\n     * @member {IPar|null|undefined} target\n     * @memberof EMatches\n     * @instance\n     */\n    EMatches.prototype.target = null;\n\n    /**\n     * EMatches pattern.\n     * @member {IPar|null|undefined} pattern\n     * @memberof EMatches\n     * @instance\n     */\n    EMatches.prototype.pattern = null;\n\n    /**\n     * Creates a new EMatches instance using the specified properties.\n     * @function create\n     * @memberof EMatches\n     * @static\n     * @param {IEMatches=} [properties] Properties to set\n     * @returns {EMatches} EMatches instance\n     */\n    EMatches.create = function create(properties) {\n        return new EMatches(properties);\n    };\n\n    /**\n     * Encodes the specified EMatches message. Does not implicitly {@link EMatches.verify|verify} messages.\n     * @function encode\n     * @memberof EMatches\n     * @static\n     * @param {IEMatches} message EMatches message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMatches.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.target != null && message.hasOwnProperty(\"target\"))\n            $root.Par.encode(message.target, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.pattern != null && message.hasOwnProperty(\"pattern\"))\n            $root.Par.encode(message.pattern, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EMatches message, length delimited. Does not implicitly {@link EMatches.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EMatches\n     * @static\n     * @param {IEMatches} message EMatches message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMatches.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EMatches message from the specified reader or buffer.\n     * @function decode\n     * @memberof EMatches\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EMatches} EMatches\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMatches.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMatches();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.target = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.pattern = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EMatches message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EMatches\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EMatches} EMatches\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMatches.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EMatches message.\n     * @function verify\n     * @memberof EMatches\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EMatches.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.target != null && message.hasOwnProperty(\"target\")) {\n            var error = $root.Par.verify(message.target);\n            if (error)\n                return \"target.\" + error;\n        }\n        if (message.pattern != null && message.hasOwnProperty(\"pattern\")) {\n            var error = $root.Par.verify(message.pattern);\n            if (error)\n                return \"pattern.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EMatches message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EMatches\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EMatches} EMatches\n     */\n    EMatches.fromObject = function fromObject(object) {\n        if (object instanceof $root.EMatches)\n            return object;\n        var message = new $root.EMatches();\n        if (object.target != null) {\n            if (typeof object.target !== \"object\")\n                throw TypeError(\".EMatches.target: object expected\");\n            message.target = $root.Par.fromObject(object.target);\n        }\n        if (object.pattern != null) {\n            if (typeof object.pattern !== \"object\")\n                throw TypeError(\".EMatches.pattern: object expected\");\n            message.pattern = $root.Par.fromObject(object.pattern);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EMatches message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EMatches\n     * @static\n     * @param {EMatches} message EMatches\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EMatches.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.target = null;\n            object.pattern = null;\n        }\n        if (message.target != null && message.hasOwnProperty(\"target\"))\n            object.target = $root.Par.toObject(message.target, options);\n        if (message.pattern != null && message.hasOwnProperty(\"pattern\"))\n            object.pattern = $root.Par.toObject(message.pattern, options);\n        return object;\n    };\n\n    /**\n     * Converts this EMatches to JSON.\n     * @function toJSON\n     * @memberof EMatches\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EMatches.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EMatches;\n})();\n\n$root.EPercentPercent = (function() {\n\n    /**\n     * Properties of a EPercentPercent.\n     * @exports IEPercentPercent\n     * @interface IEPercentPercent\n     * @property {IPar|null} [p1] EPercentPercent p1\n     * @property {IPar|null} [p2] EPercentPercent p2\n     */\n\n    /**\n     * Constructs a new EPercentPercent.\n     * @exports EPercentPercent\n     * @classdesc String interpolation\n     * \n     * `\"Hello, {name}\" %% {\"name\": \"Bob\"}` denotes `\"Hello, Bob\"`\n     * @implements IEPercentPercent\n     * @constructor\n     * @param {IEPercentPercent=} [properties] Properties to set\n     */\n    function EPercentPercent(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EPercentPercent p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EPercentPercent\n     * @instance\n     */\n    EPercentPercent.prototype.p1 = null;\n\n    /**\n     * EPercentPercent p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EPercentPercent\n     * @instance\n     */\n    EPercentPercent.prototype.p2 = null;\n\n    /**\n     * Creates a new EPercentPercent instance using the specified properties.\n     * @function create\n     * @memberof EPercentPercent\n     * @static\n     * @param {IEPercentPercent=} [properties] Properties to set\n     * @returns {EPercentPercent} EPercentPercent instance\n     */\n    EPercentPercent.create = function create(properties) {\n        return new EPercentPercent(properties);\n    };\n\n    /**\n     * Encodes the specified EPercentPercent message. Does not implicitly {@link EPercentPercent.verify|verify} messages.\n     * @function encode\n     * @memberof EPercentPercent\n     * @static\n     * @param {IEPercentPercent} message EPercentPercent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EPercentPercent.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EPercentPercent message, length delimited. Does not implicitly {@link EPercentPercent.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EPercentPercent\n     * @static\n     * @param {IEPercentPercent} message EPercentPercent message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EPercentPercent.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EPercentPercent message from the specified reader or buffer.\n     * @function decode\n     * @memberof EPercentPercent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EPercentPercent} EPercentPercent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EPercentPercent.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EPercentPercent();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EPercentPercent message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EPercentPercent\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EPercentPercent} EPercentPercent\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EPercentPercent.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EPercentPercent message.\n     * @function verify\n     * @memberof EPercentPercent\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EPercentPercent.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EPercentPercent message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EPercentPercent\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EPercentPercent} EPercentPercent\n     */\n    EPercentPercent.fromObject = function fromObject(object) {\n        if (object instanceof $root.EPercentPercent)\n            return object;\n        var message = new $root.EPercentPercent();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EPercentPercent.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EPercentPercent.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EPercentPercent message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EPercentPercent\n     * @static\n     * @param {EPercentPercent} message EPercentPercent\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EPercentPercent.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EPercentPercent to JSON.\n     * @function toJSON\n     * @memberof EPercentPercent\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EPercentPercent.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EPercentPercent;\n})();\n\n$root.EPlusPlus = (function() {\n\n    /**\n     * Properties of a EPlusPlus.\n     * @exports IEPlusPlus\n     * @interface IEPlusPlus\n     * @property {IPar|null} [p1] EPlusPlus p1\n     * @property {IPar|null} [p2] EPlusPlus p2\n     */\n\n    /**\n     * Constructs a new EPlusPlus.\n     * @exports EPlusPlus\n     * @classdesc Represents a EPlusPlus.\n     * @implements IEPlusPlus\n     * @constructor\n     * @param {IEPlusPlus=} [properties] Properties to set\n     */\n    function EPlusPlus(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EPlusPlus p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EPlusPlus\n     * @instance\n     */\n    EPlusPlus.prototype.p1 = null;\n\n    /**\n     * EPlusPlus p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EPlusPlus\n     * @instance\n     */\n    EPlusPlus.prototype.p2 = null;\n\n    /**\n     * Creates a new EPlusPlus instance using the specified properties.\n     * @function create\n     * @memberof EPlusPlus\n     * @static\n     * @param {IEPlusPlus=} [properties] Properties to set\n     * @returns {EPlusPlus} EPlusPlus instance\n     */\n    EPlusPlus.create = function create(properties) {\n        return new EPlusPlus(properties);\n    };\n\n    /**\n     * Encodes the specified EPlusPlus message. Does not implicitly {@link EPlusPlus.verify|verify} messages.\n     * @function encode\n     * @memberof EPlusPlus\n     * @static\n     * @param {IEPlusPlus} message EPlusPlus message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EPlusPlus.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EPlusPlus message, length delimited. Does not implicitly {@link EPlusPlus.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EPlusPlus\n     * @static\n     * @param {IEPlusPlus} message EPlusPlus message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EPlusPlus.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EPlusPlus message from the specified reader or buffer.\n     * @function decode\n     * @memberof EPlusPlus\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EPlusPlus} EPlusPlus\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EPlusPlus.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EPlusPlus();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EPlusPlus message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EPlusPlus\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EPlusPlus} EPlusPlus\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EPlusPlus.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EPlusPlus message.\n     * @function verify\n     * @memberof EPlusPlus\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EPlusPlus.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EPlusPlus message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EPlusPlus\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EPlusPlus} EPlusPlus\n     */\n    EPlusPlus.fromObject = function fromObject(object) {\n        if (object instanceof $root.EPlusPlus)\n            return object;\n        var message = new $root.EPlusPlus();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EPlusPlus.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EPlusPlus.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EPlusPlus message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EPlusPlus\n     * @static\n     * @param {EPlusPlus} message EPlusPlus\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EPlusPlus.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EPlusPlus to JSON.\n     * @function toJSON\n     * @memberof EPlusPlus\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EPlusPlus.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EPlusPlus;\n})();\n\n$root.EMinusMinus = (function() {\n\n    /**\n     * Properties of a EMinusMinus.\n     * @exports IEMinusMinus\n     * @interface IEMinusMinus\n     * @property {IPar|null} [p1] EMinusMinus p1\n     * @property {IPar|null} [p2] EMinusMinus p2\n     */\n\n    /**\n     * Constructs a new EMinusMinus.\n     * @exports EMinusMinus\n     * @classdesc Represents a EMinusMinus.\n     * @implements IEMinusMinus\n     * @constructor\n     * @param {IEMinusMinus=} [properties] Properties to set\n     */\n    function EMinusMinus(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * EMinusMinus p1.\n     * @member {IPar|null|undefined} p1\n     * @memberof EMinusMinus\n     * @instance\n     */\n    EMinusMinus.prototype.p1 = null;\n\n    /**\n     * EMinusMinus p2.\n     * @member {IPar|null|undefined} p2\n     * @memberof EMinusMinus\n     * @instance\n     */\n    EMinusMinus.prototype.p2 = null;\n\n    /**\n     * Creates a new EMinusMinus instance using the specified properties.\n     * @function create\n     * @memberof EMinusMinus\n     * @static\n     * @param {IEMinusMinus=} [properties] Properties to set\n     * @returns {EMinusMinus} EMinusMinus instance\n     */\n    EMinusMinus.create = function create(properties) {\n        return new EMinusMinus(properties);\n    };\n\n    /**\n     * Encodes the specified EMinusMinus message. Does not implicitly {@link EMinusMinus.verify|verify} messages.\n     * @function encode\n     * @memberof EMinusMinus\n     * @static\n     * @param {IEMinusMinus} message EMinusMinus message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMinusMinus.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            $root.Par.encode(message.p1, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            $root.Par.encode(message.p2, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified EMinusMinus message, length delimited. Does not implicitly {@link EMinusMinus.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof EMinusMinus\n     * @static\n     * @param {IEMinusMinus} message EMinusMinus message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    EMinusMinus.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a EMinusMinus message from the specified reader or buffer.\n     * @function decode\n     * @memberof EMinusMinus\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {EMinusMinus} EMinusMinus\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMinusMinus.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.EMinusMinus();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.p1 = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.p2 = $root.Par.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a EMinusMinus message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof EMinusMinus\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {EMinusMinus} EMinusMinus\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    EMinusMinus.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a EMinusMinus message.\n     * @function verify\n     * @memberof EMinusMinus\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    EMinusMinus.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.p1 != null && message.hasOwnProperty(\"p1\")) {\n            var error = $root.Par.verify(message.p1);\n            if (error)\n                return \"p1.\" + error;\n        }\n        if (message.p2 != null && message.hasOwnProperty(\"p2\")) {\n            var error = $root.Par.verify(message.p2);\n            if (error)\n                return \"p2.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a EMinusMinus message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof EMinusMinus\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {EMinusMinus} EMinusMinus\n     */\n    EMinusMinus.fromObject = function fromObject(object) {\n        if (object instanceof $root.EMinusMinus)\n            return object;\n        var message = new $root.EMinusMinus();\n        if (object.p1 != null) {\n            if (typeof object.p1 !== \"object\")\n                throw TypeError(\".EMinusMinus.p1: object expected\");\n            message.p1 = $root.Par.fromObject(object.p1);\n        }\n        if (object.p2 != null) {\n            if (typeof object.p2 !== \"object\")\n                throw TypeError(\".EMinusMinus.p2: object expected\");\n            message.p2 = $root.Par.fromObject(object.p2);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a EMinusMinus message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof EMinusMinus\n     * @static\n     * @param {EMinusMinus} message EMinusMinus\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    EMinusMinus.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.p1 = null;\n            object.p2 = null;\n        }\n        if (message.p1 != null && message.hasOwnProperty(\"p1\"))\n            object.p1 = $root.Par.toObject(message.p1, options);\n        if (message.p2 != null && message.hasOwnProperty(\"p2\"))\n            object.p2 = $root.Par.toObject(message.p2, options);\n        return object;\n    };\n\n    /**\n     * Converts this EMinusMinus to JSON.\n     * @function toJSON\n     * @memberof EMinusMinus\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    EMinusMinus.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return EMinusMinus;\n})();\n\n$root.Connective = (function() {\n\n    /**\n     * Properties of a Connective.\n     * @exports IConnective\n     * @interface IConnective\n     * @property {IConnectiveBody|null} [conn_and_body] Connective conn_and_body\n     * @property {IConnectiveBody|null} [conn_or_body] Connective conn_or_body\n     * @property {IPar|null} [conn_not_body] Connective conn_not_body\n     * @property {IVarRef|null} [var_ref_body] Connective var_ref_body\n     * @property {boolean|null} [conn_bool] Connective conn_bool\n     * @property {boolean|null} [conn_int] Connective conn_int\n     * @property {boolean|null} [conn_string] Connective conn_string\n     * @property {boolean|null} [conn_uri] Connective conn_uri\n     * @property {boolean|null} [conn_byte_array] Connective conn_byte_array\n     */\n\n    /**\n     * Constructs a new Connective.\n     * @exports Connective\n     * @classdesc Represents a Connective.\n     * @implements IConnective\n     * @constructor\n     * @param {IConnective=} [properties] Properties to set\n     */\n    function Connective(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Connective conn_and_body.\n     * @member {IConnectiveBody|null|undefined} conn_and_body\n     * @memberof Connective\n     * @instance\n     */\n    Connective.prototype.conn_and_body = null;\n\n    /**\n     * Connective conn_or_body.\n     * @member {IConnectiveBody|null|undefined} conn_or_body\n     * @memberof Connective\n     * @instance\n     */\n    Connective.prototype.conn_or_body = null;\n\n    /**\n     * Connective conn_not_body.\n     * @member {IPar|null|undefined} conn_not_body\n     * @memberof Connective\n     * @instance\n     */\n    Connective.prototype.conn_not_body = null;\n\n    /**\n     * Connective var_ref_body.\n     * @member {IVarRef|null|undefined} var_ref_body\n     * @memberof Connective\n     * @instance\n     */\n    Connective.prototype.var_ref_body = null;\n\n    /**\n     * Connective conn_bool.\n     * @member {boolean} conn_bool\n     * @memberof Connective\n     * @instance\n     */\n    Connective.prototype.conn_bool = false;\n\n    /**\n     * Connective conn_int.\n     * @member {boolean} conn_int\n     * @memberof Connective\n     * @instance\n     */\n    Connective.prototype.conn_int = false;\n\n    /**\n     * Connective conn_string.\n     * @member {boolean} conn_string\n     * @memberof Connective\n     * @instance\n     */\n    Connective.prototype.conn_string = false;\n\n    /**\n     * Connective conn_uri.\n     * @member {boolean} conn_uri\n     * @memberof Connective\n     * @instance\n     */\n    Connective.prototype.conn_uri = false;\n\n    /**\n     * Connective conn_byte_array.\n     * @member {boolean} conn_byte_array\n     * @memberof Connective\n     * @instance\n     */\n    Connective.prototype.conn_byte_array = false;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * Connective connective_instance.\n     * @member {\"conn_and_body\"|\"conn_or_body\"|\"conn_not_body\"|\"var_ref_body\"|\"conn_bool\"|\"conn_int\"|\"conn_string\"|\"conn_uri\"|\"conn_byte_array\"|undefined} connective_instance\n     * @memberof Connective\n     * @instance\n     */\n    Object.defineProperty(Connective.prototype, \"connective_instance\", {\n        get: $util.oneOfGetter($oneOfFields = [\"conn_and_body\", \"conn_or_body\", \"conn_not_body\", \"var_ref_body\", \"conn_bool\", \"conn_int\", \"conn_string\", \"conn_uri\", \"conn_byte_array\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new Connective instance using the specified properties.\n     * @function create\n     * @memberof Connective\n     * @static\n     * @param {IConnective=} [properties] Properties to set\n     * @returns {Connective} Connective instance\n     */\n    Connective.create = function create(properties) {\n        return new Connective(properties);\n    };\n\n    /**\n     * Encodes the specified Connective message. Does not implicitly {@link Connective.verify|verify} messages.\n     * @function encode\n     * @memberof Connective\n     * @static\n     * @param {IConnective} message Connective message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Connective.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.conn_and_body != null && message.hasOwnProperty(\"conn_and_body\"))\n            $root.ConnectiveBody.encode(message.conn_and_body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.conn_or_body != null && message.hasOwnProperty(\"conn_or_body\"))\n            $root.ConnectiveBody.encode(message.conn_or_body, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.conn_not_body != null && message.hasOwnProperty(\"conn_not_body\"))\n            $root.Par.encode(message.conn_not_body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.var_ref_body != null && message.hasOwnProperty(\"var_ref_body\"))\n            $root.VarRef.encode(message.var_ref_body, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.conn_bool != null && message.hasOwnProperty(\"conn_bool\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.conn_bool);\n        if (message.conn_int != null && message.hasOwnProperty(\"conn_int\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.conn_int);\n        if (message.conn_string != null && message.hasOwnProperty(\"conn_string\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.conn_string);\n        if (message.conn_uri != null && message.hasOwnProperty(\"conn_uri\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.conn_uri);\n        if (message.conn_byte_array != null && message.hasOwnProperty(\"conn_byte_array\"))\n            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.conn_byte_array);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Connective message, length delimited. Does not implicitly {@link Connective.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Connective\n     * @static\n     * @param {IConnective} message Connective message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Connective.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Connective message from the specified reader or buffer.\n     * @function decode\n     * @memberof Connective\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Connective} Connective\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Connective.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Connective();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.conn_and_body = $root.ConnectiveBody.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.conn_or_body = $root.ConnectiveBody.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.conn_not_body = $root.Par.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.var_ref_body = $root.VarRef.decode(reader, reader.uint32());\n                break;\n            case 5:\n                message.conn_bool = reader.bool();\n                break;\n            case 6:\n                message.conn_int = reader.bool();\n                break;\n            case 7:\n                message.conn_string = reader.bool();\n                break;\n            case 8:\n                message.conn_uri = reader.bool();\n                break;\n            case 9:\n                message.conn_byte_array = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Connective message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Connective\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Connective} Connective\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Connective.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Connective message.\n     * @function verify\n     * @memberof Connective\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Connective.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        var properties = {};\n        if (message.conn_and_body != null && message.hasOwnProperty(\"conn_and_body\")) {\n            properties.connective_instance = 1;\n            {\n                var error = $root.ConnectiveBody.verify(message.conn_and_body);\n                if (error)\n                    return \"conn_and_body.\" + error;\n            }\n        }\n        if (message.conn_or_body != null && message.hasOwnProperty(\"conn_or_body\")) {\n            if (properties.connective_instance === 1)\n                return \"connective_instance: multiple values\";\n            properties.connective_instance = 1;\n            {\n                var error = $root.ConnectiveBody.verify(message.conn_or_body);\n                if (error)\n                    return \"conn_or_body.\" + error;\n            }\n        }\n        if (message.conn_not_body != null && message.hasOwnProperty(\"conn_not_body\")) {\n            if (properties.connective_instance === 1)\n                return \"connective_instance: multiple values\";\n            properties.connective_instance = 1;\n            {\n                var error = $root.Par.verify(message.conn_not_body);\n                if (error)\n                    return \"conn_not_body.\" + error;\n            }\n        }\n        if (message.var_ref_body != null && message.hasOwnProperty(\"var_ref_body\")) {\n            if (properties.connective_instance === 1)\n                return \"connective_instance: multiple values\";\n            properties.connective_instance = 1;\n            {\n                var error = $root.VarRef.verify(message.var_ref_body);\n                if (error)\n                    return \"var_ref_body.\" + error;\n            }\n        }\n        if (message.conn_bool != null && message.hasOwnProperty(\"conn_bool\")) {\n            if (properties.connective_instance === 1)\n                return \"connective_instance: multiple values\";\n            properties.connective_instance = 1;\n            if (typeof message.conn_bool !== \"boolean\")\n                return \"conn_bool: boolean expected\";\n        }\n        if (message.conn_int != null && message.hasOwnProperty(\"conn_int\")) {\n            if (properties.connective_instance === 1)\n                return \"connective_instance: multiple values\";\n            properties.connective_instance = 1;\n            if (typeof message.conn_int !== \"boolean\")\n                return \"conn_int: boolean expected\";\n        }\n        if (message.conn_string != null && message.hasOwnProperty(\"conn_string\")) {\n            if (properties.connective_instance === 1)\n                return \"connective_instance: multiple values\";\n            properties.connective_instance = 1;\n            if (typeof message.conn_string !== \"boolean\")\n                return \"conn_string: boolean expected\";\n        }\n        if (message.conn_uri != null && message.hasOwnProperty(\"conn_uri\")) {\n            if (properties.connective_instance === 1)\n                return \"connective_instance: multiple values\";\n            properties.connective_instance = 1;\n            if (typeof message.conn_uri !== \"boolean\")\n                return \"conn_uri: boolean expected\";\n        }\n        if (message.conn_byte_array != null && message.hasOwnProperty(\"conn_byte_array\")) {\n            if (properties.connective_instance === 1)\n                return \"connective_instance: multiple values\";\n            properties.connective_instance = 1;\n            if (typeof message.conn_byte_array !== \"boolean\")\n                return \"conn_byte_array: boolean expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Connective message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Connective\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Connective} Connective\n     */\n    Connective.fromObject = function fromObject(object) {\n        if (object instanceof $root.Connective)\n            return object;\n        var message = new $root.Connective();\n        if (object.conn_and_body != null) {\n            if (typeof object.conn_and_body !== \"object\")\n                throw TypeError(\".Connective.conn_and_body: object expected\");\n            message.conn_and_body = $root.ConnectiveBody.fromObject(object.conn_and_body);\n        }\n        if (object.conn_or_body != null) {\n            if (typeof object.conn_or_body !== \"object\")\n                throw TypeError(\".Connective.conn_or_body: object expected\");\n            message.conn_or_body = $root.ConnectiveBody.fromObject(object.conn_or_body);\n        }\n        if (object.conn_not_body != null) {\n            if (typeof object.conn_not_body !== \"object\")\n                throw TypeError(\".Connective.conn_not_body: object expected\");\n            message.conn_not_body = $root.Par.fromObject(object.conn_not_body);\n        }\n        if (object.var_ref_body != null) {\n            if (typeof object.var_ref_body !== \"object\")\n                throw TypeError(\".Connective.var_ref_body: object expected\");\n            message.var_ref_body = $root.VarRef.fromObject(object.var_ref_body);\n        }\n        if (object.conn_bool != null)\n            message.conn_bool = Boolean(object.conn_bool);\n        if (object.conn_int != null)\n            message.conn_int = Boolean(object.conn_int);\n        if (object.conn_string != null)\n            message.conn_string = Boolean(object.conn_string);\n        if (object.conn_uri != null)\n            message.conn_uri = Boolean(object.conn_uri);\n        if (object.conn_byte_array != null)\n            message.conn_byte_array = Boolean(object.conn_byte_array);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Connective message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Connective\n     * @static\n     * @param {Connective} message Connective\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Connective.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (message.conn_and_body != null && message.hasOwnProperty(\"conn_and_body\")) {\n            object.conn_and_body = $root.ConnectiveBody.toObject(message.conn_and_body, options);\n            if (options.oneofs)\n                object.connective_instance = \"conn_and_body\";\n        }\n        if (message.conn_or_body != null && message.hasOwnProperty(\"conn_or_body\")) {\n            object.conn_or_body = $root.ConnectiveBody.toObject(message.conn_or_body, options);\n            if (options.oneofs)\n                object.connective_instance = \"conn_or_body\";\n        }\n        if (message.conn_not_body != null && message.hasOwnProperty(\"conn_not_body\")) {\n            object.conn_not_body = $root.Par.toObject(message.conn_not_body, options);\n            if (options.oneofs)\n                object.connective_instance = \"conn_not_body\";\n        }\n        if (message.var_ref_body != null && message.hasOwnProperty(\"var_ref_body\")) {\n            object.var_ref_body = $root.VarRef.toObject(message.var_ref_body, options);\n            if (options.oneofs)\n                object.connective_instance = \"var_ref_body\";\n        }\n        if (message.conn_bool != null && message.hasOwnProperty(\"conn_bool\")) {\n            object.conn_bool = message.conn_bool;\n            if (options.oneofs)\n                object.connective_instance = \"conn_bool\";\n        }\n        if (message.conn_int != null && message.hasOwnProperty(\"conn_int\")) {\n            object.conn_int = message.conn_int;\n            if (options.oneofs)\n                object.connective_instance = \"conn_int\";\n        }\n        if (message.conn_string != null && message.hasOwnProperty(\"conn_string\")) {\n            object.conn_string = message.conn_string;\n            if (options.oneofs)\n                object.connective_instance = \"conn_string\";\n        }\n        if (message.conn_uri != null && message.hasOwnProperty(\"conn_uri\")) {\n            object.conn_uri = message.conn_uri;\n            if (options.oneofs)\n                object.connective_instance = \"conn_uri\";\n        }\n        if (message.conn_byte_array != null && message.hasOwnProperty(\"conn_byte_array\")) {\n            object.conn_byte_array = message.conn_byte_array;\n            if (options.oneofs)\n                object.connective_instance = \"conn_byte_array\";\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Connective to JSON.\n     * @function toJSON\n     * @memberof Connective\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Connective.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Connective;\n})();\n\n$root.VarRef = (function() {\n\n    /**\n     * Properties of a VarRef.\n     * @exports IVarRef\n     * @interface IVarRef\n     * @property {number|null} [index] VarRef index\n     * @property {number|null} [depth] VarRef depth\n     */\n\n    /**\n     * Constructs a new VarRef.\n     * @exports VarRef\n     * @classdesc Represents a VarRef.\n     * @implements IVarRef\n     * @constructor\n     * @param {IVarRef=} [properties] Properties to set\n     */\n    function VarRef(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * VarRef index.\n     * @member {number} index\n     * @memberof VarRef\n     * @instance\n     */\n    VarRef.prototype.index = 0;\n\n    /**\n     * VarRef depth.\n     * @member {number} depth\n     * @memberof VarRef\n     * @instance\n     */\n    VarRef.prototype.depth = 0;\n\n    /**\n     * Creates a new VarRef instance using the specified properties.\n     * @function create\n     * @memberof VarRef\n     * @static\n     * @param {IVarRef=} [properties] Properties to set\n     * @returns {VarRef} VarRef instance\n     */\n    VarRef.create = function create(properties) {\n        return new VarRef(properties);\n    };\n\n    /**\n     * Encodes the specified VarRef message. Does not implicitly {@link VarRef.verify|verify} messages.\n     * @function encode\n     * @memberof VarRef\n     * @static\n     * @param {IVarRef} message VarRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    VarRef.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.index != null && message.hasOwnProperty(\"index\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.index);\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.depth);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified VarRef message, length delimited. Does not implicitly {@link VarRef.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof VarRef\n     * @static\n     * @param {IVarRef} message VarRef message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    VarRef.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a VarRef message from the specified reader or buffer.\n     * @function decode\n     * @memberof VarRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {VarRef} VarRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    VarRef.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.VarRef();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.index = reader.sint32();\n                break;\n            case 2:\n                message.depth = reader.sint32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a VarRef message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof VarRef\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {VarRef} VarRef\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    VarRef.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a VarRef message.\n     * @function verify\n     * @memberof VarRef\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    VarRef.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.index != null && message.hasOwnProperty(\"index\"))\n            if (!$util.isInteger(message.index))\n                return \"index: integer expected\";\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            if (!$util.isInteger(message.depth))\n                return \"depth: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a VarRef message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof VarRef\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {VarRef} VarRef\n     */\n    VarRef.fromObject = function fromObject(object) {\n        if (object instanceof $root.VarRef)\n            return object;\n        var message = new $root.VarRef();\n        if (object.index != null)\n            message.index = object.index | 0;\n        if (object.depth != null)\n            message.depth = object.depth | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a VarRef message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof VarRef\n     * @static\n     * @param {VarRef} message VarRef\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    VarRef.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.index = 0;\n            object.depth = 0;\n        }\n        if (message.index != null && message.hasOwnProperty(\"index\"))\n            object.index = message.index;\n        if (message.depth != null && message.hasOwnProperty(\"depth\"))\n            object.depth = message.depth;\n        return object;\n    };\n\n    /**\n     * Converts this VarRef to JSON.\n     * @function toJSON\n     * @memberof VarRef\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    VarRef.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return VarRef;\n})();\n\n$root.ConnectiveBody = (function() {\n\n    /**\n     * Properties of a ConnectiveBody.\n     * @exports IConnectiveBody\n     * @interface IConnectiveBody\n     * @property {Array.<IPar>|null} [ps] ConnectiveBody ps\n     */\n\n    /**\n     * Constructs a new ConnectiveBody.\n     * @exports ConnectiveBody\n     * @classdesc Represents a ConnectiveBody.\n     * @implements IConnectiveBody\n     * @constructor\n     * @param {IConnectiveBody=} [properties] Properties to set\n     */\n    function ConnectiveBody(properties) {\n        this.ps = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ConnectiveBody ps.\n     * @member {Array.<IPar>} ps\n     * @memberof ConnectiveBody\n     * @instance\n     */\n    ConnectiveBody.prototype.ps = $util.emptyArray;\n\n    /**\n     * Creates a new ConnectiveBody instance using the specified properties.\n     * @function create\n     * @memberof ConnectiveBody\n     * @static\n     * @param {IConnectiveBody=} [properties] Properties to set\n     * @returns {ConnectiveBody} ConnectiveBody instance\n     */\n    ConnectiveBody.create = function create(properties) {\n        return new ConnectiveBody(properties);\n    };\n\n    /**\n     * Encodes the specified ConnectiveBody message. Does not implicitly {@link ConnectiveBody.verify|verify} messages.\n     * @function encode\n     * @memberof ConnectiveBody\n     * @static\n     * @param {IConnectiveBody} message ConnectiveBody message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ConnectiveBody.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.ps != null && message.ps.length)\n            for (var i = 0; i < message.ps.length; ++i)\n                $root.Par.encode(message.ps[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ConnectiveBody message, length delimited. Does not implicitly {@link ConnectiveBody.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ConnectiveBody\n     * @static\n     * @param {IConnectiveBody} message ConnectiveBody message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ConnectiveBody.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ConnectiveBody message from the specified reader or buffer.\n     * @function decode\n     * @memberof ConnectiveBody\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ConnectiveBody} ConnectiveBody\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ConnectiveBody.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ConnectiveBody();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.ps && message.ps.length))\n                    message.ps = [];\n                message.ps.push($root.Par.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ConnectiveBody message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ConnectiveBody\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ConnectiveBody} ConnectiveBody\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ConnectiveBody.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ConnectiveBody message.\n     * @function verify\n     * @memberof ConnectiveBody\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ConnectiveBody.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.ps != null && message.hasOwnProperty(\"ps\")) {\n            if (!Array.isArray(message.ps))\n                return \"ps: array expected\";\n            for (var i = 0; i < message.ps.length; ++i) {\n                var error = $root.Par.verify(message.ps[i]);\n                if (error)\n                    return \"ps.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ConnectiveBody message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ConnectiveBody\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ConnectiveBody} ConnectiveBody\n     */\n    ConnectiveBody.fromObject = function fromObject(object) {\n        if (object instanceof $root.ConnectiveBody)\n            return object;\n        var message = new $root.ConnectiveBody();\n        if (object.ps) {\n            if (!Array.isArray(object.ps))\n                throw TypeError(\".ConnectiveBody.ps: array expected\");\n            message.ps = [];\n            for (var i = 0; i < object.ps.length; ++i) {\n                if (typeof object.ps[i] !== \"object\")\n                    throw TypeError(\".ConnectiveBody.ps: object expected\");\n                message.ps[i] = $root.Par.fromObject(object.ps[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ConnectiveBody message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ConnectiveBody\n     * @static\n     * @param {ConnectiveBody} message ConnectiveBody\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ConnectiveBody.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.ps = [];\n        if (message.ps && message.ps.length) {\n            object.ps = [];\n            for (var j = 0; j < message.ps.length; ++j)\n                object.ps[j] = $root.Par.toObject(message.ps[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ConnectiveBody to JSON.\n     * @function toJSON\n     * @memberof ConnectiveBody\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ConnectiveBody.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ConnectiveBody;\n})();\n\n$root.DeployId = (function() {\n\n    /**\n     * Properties of a DeployId.\n     * @exports IDeployId\n     * @interface IDeployId\n     * @property {Uint8Array|null} [sig] DeployId sig\n     */\n\n    /**\n     * Constructs a new DeployId.\n     * @exports DeployId\n     * @classdesc Represents a DeployId.\n     * @implements IDeployId\n     * @constructor\n     * @param {IDeployId=} [properties] Properties to set\n     */\n    function DeployId(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * DeployId sig.\n     * @member {Uint8Array} sig\n     * @memberof DeployId\n     * @instance\n     */\n    DeployId.prototype.sig = $util.newBuffer([]);\n\n    /**\n     * Creates a new DeployId instance using the specified properties.\n     * @function create\n     * @memberof DeployId\n     * @static\n     * @param {IDeployId=} [properties] Properties to set\n     * @returns {DeployId} DeployId instance\n     */\n    DeployId.create = function create(properties) {\n        return new DeployId(properties);\n    };\n\n    /**\n     * Encodes the specified DeployId message. Does not implicitly {@link DeployId.verify|verify} messages.\n     * @function encode\n     * @memberof DeployId\n     * @static\n     * @param {IDeployId} message DeployId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DeployId.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.sig != null && message.hasOwnProperty(\"sig\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.sig);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified DeployId message, length delimited. Does not implicitly {@link DeployId.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof DeployId\n     * @static\n     * @param {IDeployId} message DeployId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DeployId.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a DeployId message from the specified reader or buffer.\n     * @function decode\n     * @memberof DeployId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {DeployId} DeployId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DeployId.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeployId();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.sig = reader.bytes();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a DeployId message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof DeployId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {DeployId} DeployId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DeployId.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a DeployId message.\n     * @function verify\n     * @memberof DeployId\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    DeployId.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.sig != null && message.hasOwnProperty(\"sig\"))\n            if (!(message.sig && typeof message.sig.length === \"number\" || $util.isString(message.sig)))\n                return \"sig: buffer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a DeployId message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof DeployId\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {DeployId} DeployId\n     */\n    DeployId.fromObject = function fromObject(object) {\n        if (object instanceof $root.DeployId)\n            return object;\n        var message = new $root.DeployId();\n        if (object.sig != null)\n            if (typeof object.sig === \"string\")\n                $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);\n            else if (object.sig.length)\n                message.sig = object.sig;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a DeployId message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof DeployId\n     * @static\n     * @param {DeployId} message DeployId\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    DeployId.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            if (options.bytes === String)\n                object.sig = \"\";\n            else {\n                object.sig = [];\n                if (options.bytes !== Array)\n                    object.sig = $util.newBuffer(object.sig);\n            }\n        if (message.sig != null && message.hasOwnProperty(\"sig\"))\n            object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;\n        return object;\n    };\n\n    /**\n     * Converts this DeployId to JSON.\n     * @function toJSON\n     * @memberof DeployId\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    DeployId.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DeployId;\n})();\n\n$root.DeployerId = (function() {\n\n    /**\n     * Properties of a DeployerId.\n     * @exports IDeployerId\n     * @interface IDeployerId\n     * @property {Uint8Array|null} [publicKey] DeployerId publicKey\n     */\n\n    /**\n     * Constructs a new DeployerId.\n     * @exports DeployerId\n     * @classdesc Represents a DeployerId.\n     * @implements IDeployerId\n     * @constructor\n     * @param {IDeployerId=} [properties] Properties to set\n     */\n    function DeployerId(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * DeployerId publicKey.\n     * @member {Uint8Array} publicKey\n     * @memberof DeployerId\n     * @instance\n     */\n    DeployerId.prototype.publicKey = $util.newBuffer([]);\n\n    /**\n     * Creates a new DeployerId instance using the specified properties.\n     * @function create\n     * @memberof DeployerId\n     * @static\n     * @param {IDeployerId=} [properties] Properties to set\n     * @returns {DeployerId} DeployerId instance\n     */\n    DeployerId.create = function create(properties) {\n        return new DeployerId(properties);\n    };\n\n    /**\n     * Encodes the specified DeployerId message. Does not implicitly {@link DeployerId.verify|verify} messages.\n     * @function encode\n     * @memberof DeployerId\n     * @static\n     * @param {IDeployerId} message DeployerId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DeployerId.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified DeployerId message, length delimited. Does not implicitly {@link DeployerId.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof DeployerId\n     * @static\n     * @param {IDeployerId} message DeployerId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    DeployerId.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a DeployerId message from the specified reader or buffer.\n     * @function decode\n     * @memberof DeployerId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {DeployerId} DeployerId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DeployerId.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.DeployerId();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.publicKey = reader.bytes();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a DeployerId message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof DeployerId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {DeployerId} DeployerId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    DeployerId.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a DeployerId message.\n     * @function verify\n     * @memberof DeployerId\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    DeployerId.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n            if (!(message.publicKey && typeof message.publicKey.length === \"number\" || $util.isString(message.publicKey)))\n                return \"publicKey: buffer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a DeployerId message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof DeployerId\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {DeployerId} DeployerId\n     */\n    DeployerId.fromObject = function fromObject(object) {\n        if (object instanceof $root.DeployerId)\n            return object;\n        var message = new $root.DeployerId();\n        if (object.publicKey != null)\n            if (typeof object.publicKey === \"string\")\n                $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);\n            else if (object.publicKey.length)\n                message.publicKey = object.publicKey;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a DeployerId message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof DeployerId\n     * @static\n     * @param {DeployerId} message DeployerId\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    DeployerId.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            if (options.bytes === String)\n                object.publicKey = \"\";\n            else {\n                object.publicKey = [];\n                if (options.bytes !== Array)\n                    object.publicKey = $util.newBuffer(object.publicKey);\n            }\n        if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n            object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;\n        return object;\n    };\n\n    /**\n     * Converts this DeployerId to JSON.\n     * @function toJSON\n     * @memberof DeployerId\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    DeployerId.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return DeployerId;\n})();\n\n$root.GUnforgeable = (function() {\n\n    /**\n     * Properties of a GUnforgeable.\n     * @exports IGUnforgeable\n     * @interface IGUnforgeable\n     * @property {IGPrivate|null} [g_private_body] GUnforgeable g_private_body\n     * @property {IGDeployId|null} [g_deploy_id_body] GUnforgeable g_deploy_id_body\n     * @property {IGDeployerId|null} [g_deployer_id_body] GUnforgeable g_deployer_id_body\n     * @property {IGSysAuthToken|null} [g_sys_auth_token_body] GUnforgeable g_sys_auth_token_body\n     */\n\n    /**\n     * Constructs a new GUnforgeable.\n     * @exports GUnforgeable\n     * @classdesc Represents a GUnforgeable.\n     * @implements IGUnforgeable\n     * @constructor\n     * @param {IGUnforgeable=} [properties] Properties to set\n     */\n    function GUnforgeable(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * GUnforgeable g_private_body.\n     * @member {IGPrivate|null|undefined} g_private_body\n     * @memberof GUnforgeable\n     * @instance\n     */\n    GUnforgeable.prototype.g_private_body = null;\n\n    /**\n     * GUnforgeable g_deploy_id_body.\n     * @member {IGDeployId|null|undefined} g_deploy_id_body\n     * @memberof GUnforgeable\n     * @instance\n     */\n    GUnforgeable.prototype.g_deploy_id_body = null;\n\n    /**\n     * GUnforgeable g_deployer_id_body.\n     * @member {IGDeployerId|null|undefined} g_deployer_id_body\n     * @memberof GUnforgeable\n     * @instance\n     */\n    GUnforgeable.prototype.g_deployer_id_body = null;\n\n    /**\n     * GUnforgeable g_sys_auth_token_body.\n     * @member {IGSysAuthToken|null|undefined} g_sys_auth_token_body\n     * @memberof GUnforgeable\n     * @instance\n     */\n    GUnforgeable.prototype.g_sys_auth_token_body = null;\n\n    // OneOf field names bound to virtual getters and setters\n    var $oneOfFields;\n\n    /**\n     * GUnforgeable unf_instance.\n     * @member {\"g_private_body\"|\"g_deploy_id_body\"|\"g_deployer_id_body\"|\"g_sys_auth_token_body\"|undefined} unf_instance\n     * @memberof GUnforgeable\n     * @instance\n     */\n    Object.defineProperty(GUnforgeable.prototype, \"unf_instance\", {\n        get: $util.oneOfGetter($oneOfFields = [\"g_private_body\", \"g_deploy_id_body\", \"g_deployer_id_body\", \"g_sys_auth_token_body\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Creates a new GUnforgeable instance using the specified properties.\n     * @function create\n     * @memberof GUnforgeable\n     * @static\n     * @param {IGUnforgeable=} [properties] Properties to set\n     * @returns {GUnforgeable} GUnforgeable instance\n     */\n    GUnforgeable.create = function create(properties) {\n        return new GUnforgeable(properties);\n    };\n\n    /**\n     * Encodes the specified GUnforgeable message. Does not implicitly {@link GUnforgeable.verify|verify} messages.\n     * @function encode\n     * @memberof GUnforgeable\n     * @static\n     * @param {IGUnforgeable} message GUnforgeable message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GUnforgeable.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.g_private_body != null && message.hasOwnProperty(\"g_private_body\"))\n            $root.GPrivate.encode(message.g_private_body, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.g_deploy_id_body != null && message.hasOwnProperty(\"g_deploy_id_body\"))\n            $root.GDeployId.encode(message.g_deploy_id_body, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.g_deployer_id_body != null && message.hasOwnProperty(\"g_deployer_id_body\"))\n            $root.GDeployerId.encode(message.g_deployer_id_body, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.g_sys_auth_token_body != null && message.hasOwnProperty(\"g_sys_auth_token_body\"))\n            $root.GSysAuthToken.encode(message.g_sys_auth_token_body, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified GUnforgeable message, length delimited. Does not implicitly {@link GUnforgeable.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof GUnforgeable\n     * @static\n     * @param {IGUnforgeable} message GUnforgeable message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GUnforgeable.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a GUnforgeable message from the specified reader or buffer.\n     * @function decode\n     * @memberof GUnforgeable\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {GUnforgeable} GUnforgeable\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GUnforgeable.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GUnforgeable();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.g_private_body = $root.GPrivate.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.g_deploy_id_body = $root.GDeployId.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.g_deployer_id_body = $root.GDeployerId.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.g_sys_auth_token_body = $root.GSysAuthToken.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a GUnforgeable message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof GUnforgeable\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {GUnforgeable} GUnforgeable\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GUnforgeable.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a GUnforgeable message.\n     * @function verify\n     * @memberof GUnforgeable\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    GUnforgeable.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        var properties = {};\n        if (message.g_private_body != null && message.hasOwnProperty(\"g_private_body\")) {\n            properties.unf_instance = 1;\n            {\n                var error = $root.GPrivate.verify(message.g_private_body);\n                if (error)\n                    return \"g_private_body.\" + error;\n            }\n        }\n        if (message.g_deploy_id_body != null && message.hasOwnProperty(\"g_deploy_id_body\")) {\n            if (properties.unf_instance === 1)\n                return \"unf_instance: multiple values\";\n            properties.unf_instance = 1;\n            {\n                var error = $root.GDeployId.verify(message.g_deploy_id_body);\n                if (error)\n                    return \"g_deploy_id_body.\" + error;\n            }\n        }\n        if (message.g_deployer_id_body != null && message.hasOwnProperty(\"g_deployer_id_body\")) {\n            if (properties.unf_instance === 1)\n                return \"unf_instance: multiple values\";\n            properties.unf_instance = 1;\n            {\n                var error = $root.GDeployerId.verify(message.g_deployer_id_body);\n                if (error)\n                    return \"g_deployer_id_body.\" + error;\n            }\n        }\n        if (message.g_sys_auth_token_body != null && message.hasOwnProperty(\"g_sys_auth_token_body\")) {\n            if (properties.unf_instance === 1)\n                return \"unf_instance: multiple values\";\n            properties.unf_instance = 1;\n            {\n                var error = $root.GSysAuthToken.verify(message.g_sys_auth_token_body);\n                if (error)\n                    return \"g_sys_auth_token_body.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a GUnforgeable message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof GUnforgeable\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {GUnforgeable} GUnforgeable\n     */\n    GUnforgeable.fromObject = function fromObject(object) {\n        if (object instanceof $root.GUnforgeable)\n            return object;\n        var message = new $root.GUnforgeable();\n        if (object.g_private_body != null) {\n            if (typeof object.g_private_body !== \"object\")\n                throw TypeError(\".GUnforgeable.g_private_body: object expected\");\n            message.g_private_body = $root.GPrivate.fromObject(object.g_private_body);\n        }\n        if (object.g_deploy_id_body != null) {\n            if (typeof object.g_deploy_id_body !== \"object\")\n                throw TypeError(\".GUnforgeable.g_deploy_id_body: object expected\");\n            message.g_deploy_id_body = $root.GDeployId.fromObject(object.g_deploy_id_body);\n        }\n        if (object.g_deployer_id_body != null) {\n            if (typeof object.g_deployer_id_body !== \"object\")\n                throw TypeError(\".GUnforgeable.g_deployer_id_body: object expected\");\n            message.g_deployer_id_body = $root.GDeployerId.fromObject(object.g_deployer_id_body);\n        }\n        if (object.g_sys_auth_token_body != null) {\n            if (typeof object.g_sys_auth_token_body !== \"object\")\n                throw TypeError(\".GUnforgeable.g_sys_auth_token_body: object expected\");\n            message.g_sys_auth_token_body = $root.GSysAuthToken.fromObject(object.g_sys_auth_token_body);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a GUnforgeable message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof GUnforgeable\n     * @static\n     * @param {GUnforgeable} message GUnforgeable\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    GUnforgeable.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (message.g_private_body != null && message.hasOwnProperty(\"g_private_body\")) {\n            object.g_private_body = $root.GPrivate.toObject(message.g_private_body, options);\n            if (options.oneofs)\n                object.unf_instance = \"g_private_body\";\n        }\n        if (message.g_deploy_id_body != null && message.hasOwnProperty(\"g_deploy_id_body\")) {\n            object.g_deploy_id_body = $root.GDeployId.toObject(message.g_deploy_id_body, options);\n            if (options.oneofs)\n                object.unf_instance = \"g_deploy_id_body\";\n        }\n        if (message.g_deployer_id_body != null && message.hasOwnProperty(\"g_deployer_id_body\")) {\n            object.g_deployer_id_body = $root.GDeployerId.toObject(message.g_deployer_id_body, options);\n            if (options.oneofs)\n                object.unf_instance = \"g_deployer_id_body\";\n        }\n        if (message.g_sys_auth_token_body != null && message.hasOwnProperty(\"g_sys_auth_token_body\")) {\n            object.g_sys_auth_token_body = $root.GSysAuthToken.toObject(message.g_sys_auth_token_body, options);\n            if (options.oneofs)\n                object.unf_instance = \"g_sys_auth_token_body\";\n        }\n        return object;\n    };\n\n    /**\n     * Converts this GUnforgeable to JSON.\n     * @function toJSON\n     * @memberof GUnforgeable\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    GUnforgeable.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return GUnforgeable;\n})();\n\n$root.GPrivate = (function() {\n\n    /**\n     * Properties of a GPrivate.\n     * @exports IGPrivate\n     * @interface IGPrivate\n     * @property {Uint8Array|null} [id] GPrivate id\n     */\n\n    /**\n     * Constructs a new GPrivate.\n     * @exports GPrivate\n     * @classdesc Represents a GPrivate.\n     * @implements IGPrivate\n     * @constructor\n     * @param {IGPrivate=} [properties] Properties to set\n     */\n    function GPrivate(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * GPrivate id.\n     * @member {Uint8Array} id\n     * @memberof GPrivate\n     * @instance\n     */\n    GPrivate.prototype.id = $util.newBuffer([]);\n\n    /**\n     * Creates a new GPrivate instance using the specified properties.\n     * @function create\n     * @memberof GPrivate\n     * @static\n     * @param {IGPrivate=} [properties] Properties to set\n     * @returns {GPrivate} GPrivate instance\n     */\n    GPrivate.create = function create(properties) {\n        return new GPrivate(properties);\n    };\n\n    /**\n     * Encodes the specified GPrivate message. Does not implicitly {@link GPrivate.verify|verify} messages.\n     * @function encode\n     * @memberof GPrivate\n     * @static\n     * @param {IGPrivate} message GPrivate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GPrivate.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.id);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified GPrivate message, length delimited. Does not implicitly {@link GPrivate.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof GPrivate\n     * @static\n     * @param {IGPrivate} message GPrivate message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GPrivate.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a GPrivate message from the specified reader or buffer.\n     * @function decode\n     * @memberof GPrivate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {GPrivate} GPrivate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GPrivate.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GPrivate();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.id = reader.bytes();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a GPrivate message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof GPrivate\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {GPrivate} GPrivate\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GPrivate.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a GPrivate message.\n     * @function verify\n     * @memberof GPrivate\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    GPrivate.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            if (!(message.id && typeof message.id.length === \"number\" || $util.isString(message.id)))\n                return \"id: buffer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a GPrivate message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof GPrivate\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {GPrivate} GPrivate\n     */\n    GPrivate.fromObject = function fromObject(object) {\n        if (object instanceof $root.GPrivate)\n            return object;\n        var message = new $root.GPrivate();\n        if (object.id != null)\n            if (typeof object.id === \"string\")\n                $util.base64.decode(object.id, message.id = $util.newBuffer($util.base64.length(object.id)), 0);\n            else if (object.id.length)\n                message.id = object.id;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a GPrivate message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof GPrivate\n     * @static\n     * @param {GPrivate} message GPrivate\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    GPrivate.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            if (options.bytes === String)\n                object.id = \"\";\n            else {\n                object.id = [];\n                if (options.bytes !== Array)\n                    object.id = $util.newBuffer(object.id);\n            }\n        if (message.id != null && message.hasOwnProperty(\"id\"))\n            object.id = options.bytes === String ? $util.base64.encode(message.id, 0, message.id.length) : options.bytes === Array ? Array.prototype.slice.call(message.id) : message.id;\n        return object;\n    };\n\n    /**\n     * Converts this GPrivate to JSON.\n     * @function toJSON\n     * @memberof GPrivate\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    GPrivate.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return GPrivate;\n})();\n\n$root.GDeployId = (function() {\n\n    /**\n     * Properties of a GDeployId.\n     * @exports IGDeployId\n     * @interface IGDeployId\n     * @property {Uint8Array|null} [sig] GDeployId sig\n     */\n\n    /**\n     * Constructs a new GDeployId.\n     * @exports GDeployId\n     * @classdesc Represents a GDeployId.\n     * @implements IGDeployId\n     * @constructor\n     * @param {IGDeployId=} [properties] Properties to set\n     */\n    function GDeployId(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * GDeployId sig.\n     * @member {Uint8Array} sig\n     * @memberof GDeployId\n     * @instance\n     */\n    GDeployId.prototype.sig = $util.newBuffer([]);\n\n    /**\n     * Creates a new GDeployId instance using the specified properties.\n     * @function create\n     * @memberof GDeployId\n     * @static\n     * @param {IGDeployId=} [properties] Properties to set\n     * @returns {GDeployId} GDeployId instance\n     */\n    GDeployId.create = function create(properties) {\n        return new GDeployId(properties);\n    };\n\n    /**\n     * Encodes the specified GDeployId message. Does not implicitly {@link GDeployId.verify|verify} messages.\n     * @function encode\n     * @memberof GDeployId\n     * @static\n     * @param {IGDeployId} message GDeployId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GDeployId.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.sig != null && message.hasOwnProperty(\"sig\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.sig);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified GDeployId message, length delimited. Does not implicitly {@link GDeployId.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof GDeployId\n     * @static\n     * @param {IGDeployId} message GDeployId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GDeployId.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a GDeployId message from the specified reader or buffer.\n     * @function decode\n     * @memberof GDeployId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {GDeployId} GDeployId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GDeployId.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GDeployId();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.sig = reader.bytes();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a GDeployId message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof GDeployId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {GDeployId} GDeployId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GDeployId.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a GDeployId message.\n     * @function verify\n     * @memberof GDeployId\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    GDeployId.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.sig != null && message.hasOwnProperty(\"sig\"))\n            if (!(message.sig && typeof message.sig.length === \"number\" || $util.isString(message.sig)))\n                return \"sig: buffer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a GDeployId message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof GDeployId\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {GDeployId} GDeployId\n     */\n    GDeployId.fromObject = function fromObject(object) {\n        if (object instanceof $root.GDeployId)\n            return object;\n        var message = new $root.GDeployId();\n        if (object.sig != null)\n            if (typeof object.sig === \"string\")\n                $util.base64.decode(object.sig, message.sig = $util.newBuffer($util.base64.length(object.sig)), 0);\n            else if (object.sig.length)\n                message.sig = object.sig;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a GDeployId message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof GDeployId\n     * @static\n     * @param {GDeployId} message GDeployId\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    GDeployId.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            if (options.bytes === String)\n                object.sig = \"\";\n            else {\n                object.sig = [];\n                if (options.bytes !== Array)\n                    object.sig = $util.newBuffer(object.sig);\n            }\n        if (message.sig != null && message.hasOwnProperty(\"sig\"))\n            object.sig = options.bytes === String ? $util.base64.encode(message.sig, 0, message.sig.length) : options.bytes === Array ? Array.prototype.slice.call(message.sig) : message.sig;\n        return object;\n    };\n\n    /**\n     * Converts this GDeployId to JSON.\n     * @function toJSON\n     * @memberof GDeployId\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    GDeployId.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return GDeployId;\n})();\n\n$root.GDeployerId = (function() {\n\n    /**\n     * Properties of a GDeployerId.\n     * @exports IGDeployerId\n     * @interface IGDeployerId\n     * @property {Uint8Array|null} [publicKey] GDeployerId publicKey\n     */\n\n    /**\n     * Constructs a new GDeployerId.\n     * @exports GDeployerId\n     * @classdesc Represents a GDeployerId.\n     * @implements IGDeployerId\n     * @constructor\n     * @param {IGDeployerId=} [properties] Properties to set\n     */\n    function GDeployerId(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * GDeployerId publicKey.\n     * @member {Uint8Array} publicKey\n     * @memberof GDeployerId\n     * @instance\n     */\n    GDeployerId.prototype.publicKey = $util.newBuffer([]);\n\n    /**\n     * Creates a new GDeployerId instance using the specified properties.\n     * @function create\n     * @memberof GDeployerId\n     * @static\n     * @param {IGDeployerId=} [properties] Properties to set\n     * @returns {GDeployerId} GDeployerId instance\n     */\n    GDeployerId.create = function create(properties) {\n        return new GDeployerId(properties);\n    };\n\n    /**\n     * Encodes the specified GDeployerId message. Does not implicitly {@link GDeployerId.verify|verify} messages.\n     * @function encode\n     * @memberof GDeployerId\n     * @static\n     * @param {IGDeployerId} message GDeployerId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GDeployerId.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.publicKey);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified GDeployerId message, length delimited. Does not implicitly {@link GDeployerId.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof GDeployerId\n     * @static\n     * @param {IGDeployerId} message GDeployerId message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GDeployerId.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a GDeployerId message from the specified reader or buffer.\n     * @function decode\n     * @memberof GDeployerId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {GDeployerId} GDeployerId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GDeployerId.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GDeployerId();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.publicKey = reader.bytes();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a GDeployerId message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof GDeployerId\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {GDeployerId} GDeployerId\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GDeployerId.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a GDeployerId message.\n     * @function verify\n     * @memberof GDeployerId\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    GDeployerId.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n            if (!(message.publicKey && typeof message.publicKey.length === \"number\" || $util.isString(message.publicKey)))\n                return \"publicKey: buffer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a GDeployerId message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof GDeployerId\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {GDeployerId} GDeployerId\n     */\n    GDeployerId.fromObject = function fromObject(object) {\n        if (object instanceof $root.GDeployerId)\n            return object;\n        var message = new $root.GDeployerId();\n        if (object.publicKey != null)\n            if (typeof object.publicKey === \"string\")\n                $util.base64.decode(object.publicKey, message.publicKey = $util.newBuffer($util.base64.length(object.publicKey)), 0);\n            else if (object.publicKey.length)\n                message.publicKey = object.publicKey;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a GDeployerId message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof GDeployerId\n     * @static\n     * @param {GDeployerId} message GDeployerId\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    GDeployerId.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults)\n            if (options.bytes === String)\n                object.publicKey = \"\";\n            else {\n                object.publicKey = [];\n                if (options.bytes !== Array)\n                    object.publicKey = $util.newBuffer(object.publicKey);\n            }\n        if (message.publicKey != null && message.hasOwnProperty(\"publicKey\"))\n            object.publicKey = options.bytes === String ? $util.base64.encode(message.publicKey, 0, message.publicKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.publicKey) : message.publicKey;\n        return object;\n    };\n\n    /**\n     * Converts this GDeployerId to JSON.\n     * @function toJSON\n     * @memberof GDeployerId\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    GDeployerId.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return GDeployerId;\n})();\n\n$root.GSysAuthToken = (function() {\n\n    /**\n     * Properties of a GSysAuthToken.\n     * @exports IGSysAuthToken\n     * @interface IGSysAuthToken\n     */\n\n    /**\n     * Constructs a new GSysAuthToken.\n     * @exports GSysAuthToken\n     * @classdesc Represents a GSysAuthToken.\n     * @implements IGSysAuthToken\n     * @constructor\n     * @param {IGSysAuthToken=} [properties] Properties to set\n     */\n    function GSysAuthToken(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new GSysAuthToken instance using the specified properties.\n     * @function create\n     * @memberof GSysAuthToken\n     * @static\n     * @param {IGSysAuthToken=} [properties] Properties to set\n     * @returns {GSysAuthToken} GSysAuthToken instance\n     */\n    GSysAuthToken.create = function create(properties) {\n        return new GSysAuthToken(properties);\n    };\n\n    /**\n     * Encodes the specified GSysAuthToken message. Does not implicitly {@link GSysAuthToken.verify|verify} messages.\n     * @function encode\n     * @memberof GSysAuthToken\n     * @static\n     * @param {IGSysAuthToken} message GSysAuthToken message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GSysAuthToken.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified GSysAuthToken message, length delimited. Does not implicitly {@link GSysAuthToken.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof GSysAuthToken\n     * @static\n     * @param {IGSysAuthToken} message GSysAuthToken message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GSysAuthToken.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a GSysAuthToken message from the specified reader or buffer.\n     * @function decode\n     * @memberof GSysAuthToken\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {GSysAuthToken} GSysAuthToken\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GSysAuthToken.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GSysAuthToken();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a GSysAuthToken message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof GSysAuthToken\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {GSysAuthToken} GSysAuthToken\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GSysAuthToken.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a GSysAuthToken message.\n     * @function verify\n     * @memberof GSysAuthToken\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    GSysAuthToken.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a GSysAuthToken message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof GSysAuthToken\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {GSysAuthToken} GSysAuthToken\n     */\n    GSysAuthToken.fromObject = function fromObject(object) {\n        if (object instanceof $root.GSysAuthToken)\n            return object;\n        return new $root.GSysAuthToken();\n    };\n\n    /**\n     * Creates a plain object from a GSysAuthToken message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof GSysAuthToken\n     * @static\n     * @param {GSysAuthToken} message GSysAuthToken\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    GSysAuthToken.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this GSysAuthToken to JSON.\n     * @function toJSON\n     * @memberof GSysAuthToken\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    GSysAuthToken.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return GSysAuthToken;\n})();\n\n$root.ServiceError = (function() {\n\n    /**\n     * Properties of a ServiceError.\n     * @exports IServiceError\n     * @interface IServiceError\n     * @property {Array.<string>|null} [messages] ServiceError messages\n     */\n\n    /**\n     * Constructs a new ServiceError.\n     * @exports ServiceError\n     * @classdesc Represents a ServiceError.\n     * @implements IServiceError\n     * @constructor\n     * @param {IServiceError=} [properties] Properties to set\n     */\n    function ServiceError(properties) {\n        this.messages = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ServiceError messages.\n     * @member {Array.<string>} messages\n     * @memberof ServiceError\n     * @instance\n     */\n    ServiceError.prototype.messages = $util.emptyArray;\n\n    /**\n     * Creates a new ServiceError instance using the specified properties.\n     * @function create\n     * @memberof ServiceError\n     * @static\n     * @param {IServiceError=} [properties] Properties to set\n     * @returns {ServiceError} ServiceError instance\n     */\n    ServiceError.create = function create(properties) {\n        return new ServiceError(properties);\n    };\n\n    /**\n     * Encodes the specified ServiceError message. Does not implicitly {@link ServiceError.verify|verify} messages.\n     * @function encode\n     * @memberof ServiceError\n     * @static\n     * @param {IServiceError} message ServiceError message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ServiceError.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.messages != null && message.messages.length)\n            for (var i = 0; i < message.messages.length; ++i)\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.messages[i]);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ServiceError message, length delimited. Does not implicitly {@link ServiceError.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ServiceError\n     * @static\n     * @param {IServiceError} message ServiceError message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ServiceError.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ServiceError message from the specified reader or buffer.\n     * @function decode\n     * @memberof ServiceError\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ServiceError} ServiceError\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ServiceError.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ServiceError();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.messages && message.messages.length))\n                    message.messages = [];\n                message.messages.push(reader.string());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ServiceError message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ServiceError\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ServiceError} ServiceError\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ServiceError.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ServiceError message.\n     * @function verify\n     * @memberof ServiceError\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ServiceError.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.messages != null && message.hasOwnProperty(\"messages\")) {\n            if (!Array.isArray(message.messages))\n                return \"messages: array expected\";\n            for (var i = 0; i < message.messages.length; ++i)\n                if (!$util.isString(message.messages[i]))\n                    return \"messages: string[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ServiceError message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ServiceError\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ServiceError} ServiceError\n     */\n    ServiceError.fromObject = function fromObject(object) {\n        if (object instanceof $root.ServiceError)\n            return object;\n        var message = new $root.ServiceError();\n        if (object.messages) {\n            if (!Array.isArray(object.messages))\n                throw TypeError(\".ServiceError.messages: array expected\");\n            message.messages = [];\n            for (var i = 0; i < object.messages.length; ++i)\n                message.messages[i] = String(object.messages[i]);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ServiceError message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ServiceError\n     * @static\n     * @param {ServiceError} message ServiceError\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ServiceError.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.messages = [];\n        if (message.messages && message.messages.length) {\n            object.messages = [];\n            for (var j = 0; j < message.messages.length; ++j)\n                object.messages[j] = message.messages[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ServiceError to JSON.\n     * @function toJSON\n     * @memberof ServiceError\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ServiceError.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ServiceError;\n})();\n\n$root.routing = (function() {\n\n    /**\n     * Namespace routing.\n     * @exports routing\n     * @namespace\n     */\n    var routing = {};\n\n    routing.Node = (function() {\n\n        /**\n         * Properties of a Node.\n         * @memberof routing\n         * @interface INode\n         * @property {Uint8Array|null} [id] Node id\n         * @property {Uint8Array|null} [host] Node host\n         * @property {number|null} [tcp_port] Node tcp_port\n         * @property {number|null} [udp_port] Node udp_port\n         */\n\n        /**\n         * Constructs a new Node.\n         * @memberof routing\n         * @classdesc Represents a Node.\n         * @implements INode\n         * @constructor\n         * @param {routing.INode=} [properties] Properties to set\n         */\n        function Node(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Node id.\n         * @member {Uint8Array} id\n         * @memberof routing.Node\n         * @instance\n         */\n        Node.prototype.id = $util.newBuffer([]);\n\n        /**\n         * Node host.\n         * @member {Uint8Array} host\n         * @memberof routing.Node\n         * @instance\n         */\n        Node.prototype.host = $util.newBuffer([]);\n\n        /**\n         * Node tcp_port.\n         * @member {number} tcp_port\n         * @memberof routing.Node\n         * @instance\n         */\n        Node.prototype.tcp_port = 0;\n\n        /**\n         * Node udp_port.\n         * @member {number} udp_port\n         * @memberof routing.Node\n         * @instance\n         */\n        Node.prototype.udp_port = 0;\n\n        /**\n         * Creates a new Node instance using the specified properties.\n         * @function create\n         * @memberof routing.Node\n         * @static\n         * @param {routing.INode=} [properties] Properties to set\n         * @returns {routing.Node} Node instance\n         */\n        Node.create = function create(properties) {\n            return new Node(properties);\n        };\n\n        /**\n         * Encodes the specified Node message. Does not implicitly {@link routing.Node.verify|verify} messages.\n         * @function encode\n         * @memberof routing.Node\n         * @static\n         * @param {routing.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.id);\n            if (message.host != null && message.hasOwnProperty(\"host\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.host);\n            if (message.tcp_port != null && message.hasOwnProperty(\"tcp_port\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.tcp_port);\n            if (message.udp_port != null && message.hasOwnProperty(\"udp_port\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.udp_port);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Node message, length delimited. Does not implicitly {@link routing.Node.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.Node\n         * @static\n         * @param {routing.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Node();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.bytes();\n                    break;\n                case 2:\n                    message.host = reader.bytes();\n                    break;\n                case 3:\n                    message.tcp_port = reader.uint32();\n                    break;\n                case 4:\n                    message.udp_port = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Node message.\n         * @function verify\n         * @memberof routing.Node\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Node.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!(message.id && typeof message.id.length === \"number\" || $util.isString(message.id)))\n                    return \"id: buffer expected\";\n            if (message.host != null && message.hasOwnProperty(\"host\"))\n                if (!(message.host && typeof message.host.length === \"number\" || $util.isString(message.host)))\n                    return \"host: buffer expected\";\n            if (message.tcp_port != null && message.hasOwnProperty(\"tcp_port\"))\n                if (!$util.isInteger(message.tcp_port))\n                    return \"tcp_port: integer expected\";\n            if (message.udp_port != null && message.hasOwnProperty(\"udp_port\"))\n                if (!$util.isInteger(message.udp_port))\n                    return \"udp_port: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Node message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.Node\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.Node} Node\n         */\n        Node.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.Node)\n                return object;\n            var message = new $root.routing.Node();\n            if (object.id != null)\n                if (typeof object.id === \"string\")\n                    $util.base64.decode(object.id, message.id = $util.newBuffer($util.base64.length(object.id)), 0);\n                else if (object.id.length)\n                    message.id = object.id;\n            if (object.host != null)\n                if (typeof object.host === \"string\")\n                    $util.base64.decode(object.host, message.host = $util.newBuffer($util.base64.length(object.host)), 0);\n                else if (object.host.length)\n                    message.host = object.host;\n            if (object.tcp_port != null)\n                message.tcp_port = object.tcp_port >>> 0;\n            if (object.udp_port != null)\n                message.udp_port = object.udp_port >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Node message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.Node\n         * @static\n         * @param {routing.Node} message Node\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Node.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if (options.bytes === String)\n                    object.id = \"\";\n                else {\n                    object.id = [];\n                    if (options.bytes !== Array)\n                        object.id = $util.newBuffer(object.id);\n                }\n                if (options.bytes === String)\n                    object.host = \"\";\n                else {\n                    object.host = [];\n                    if (options.bytes !== Array)\n                        object.host = $util.newBuffer(object.host);\n                }\n                object.tcp_port = 0;\n                object.udp_port = 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = options.bytes === String ? $util.base64.encode(message.id, 0, message.id.length) : options.bytes === Array ? Array.prototype.slice.call(message.id) : message.id;\n            if (message.host != null && message.hasOwnProperty(\"host\"))\n                object.host = options.bytes === String ? $util.base64.encode(message.host, 0, message.host.length) : options.bytes === Array ? Array.prototype.slice.call(message.host) : message.host;\n            if (message.tcp_port != null && message.hasOwnProperty(\"tcp_port\"))\n                object.tcp_port = message.tcp_port;\n            if (message.udp_port != null && message.hasOwnProperty(\"udp_port\"))\n                object.udp_port = message.udp_port;\n            return object;\n        };\n\n        /**\n         * Converts this Node to JSON.\n         * @function toJSON\n         * @memberof routing.Node\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Node.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Node;\n    })();\n\n    routing.Header = (function() {\n\n        /**\n         * Properties of a Header.\n         * @memberof routing\n         * @interface IHeader\n         * @property {routing.INode|null} [sender] Header sender\n         * @property {string|null} [networkId] Header networkId\n         */\n\n        /**\n         * Constructs a new Header.\n         * @memberof routing\n         * @classdesc Represents a Header.\n         * @implements IHeader\n         * @constructor\n         * @param {routing.IHeader=} [properties] Properties to set\n         */\n        function Header(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Header sender.\n         * @member {routing.INode|null|undefined} sender\n         * @memberof routing.Header\n         * @instance\n         */\n        Header.prototype.sender = null;\n\n        /**\n         * Header networkId.\n         * @member {string} networkId\n         * @memberof routing.Header\n         * @instance\n         */\n        Header.prototype.networkId = \"\";\n\n        /**\n         * Creates a new Header instance using the specified properties.\n         * @function create\n         * @memberof routing.Header\n         * @static\n         * @param {routing.IHeader=} [properties] Properties to set\n         * @returns {routing.Header} Header instance\n         */\n        Header.create = function create(properties) {\n            return new Header(properties);\n        };\n\n        /**\n         * Encodes the specified Header message. Does not implicitly {@link routing.Header.verify|verify} messages.\n         * @function encode\n         * @memberof routing.Header\n         * @static\n         * @param {routing.IHeader} message Header message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Header.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                $root.routing.Node.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.networkId != null && message.hasOwnProperty(\"networkId\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.networkId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Header message, length delimited. Does not implicitly {@link routing.Header.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.Header\n         * @static\n         * @param {routing.IHeader} message Header message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Header.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Header message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.Header\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.Header} Header\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Header.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Header();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.sender = $root.routing.Node.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.networkId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Header message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.Header\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.Header} Header\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Header.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Header message.\n         * @function verify\n         * @memberof routing.Header\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Header.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.sender != null && message.hasOwnProperty(\"sender\")) {\n                var error = $root.routing.Node.verify(message.sender);\n                if (error)\n                    return \"sender.\" + error;\n            }\n            if (message.networkId != null && message.hasOwnProperty(\"networkId\"))\n                if (!$util.isString(message.networkId))\n                    return \"networkId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Header message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.Header\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.Header} Header\n         */\n        Header.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.Header)\n                return object;\n            var message = new $root.routing.Header();\n            if (object.sender != null) {\n                if (typeof object.sender !== \"object\")\n                    throw TypeError(\".routing.Header.sender: object expected\");\n                message.sender = $root.routing.Node.fromObject(object.sender);\n            }\n            if (object.networkId != null)\n                message.networkId = String(object.networkId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Header message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.Header\n         * @static\n         * @param {routing.Header} message Header\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Header.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.sender = null;\n                object.networkId = \"\";\n            }\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                object.sender = $root.routing.Node.toObject(message.sender, options);\n            if (message.networkId != null && message.hasOwnProperty(\"networkId\"))\n                object.networkId = message.networkId;\n            return object;\n        };\n\n        /**\n         * Converts this Header to JSON.\n         * @function toJSON\n         * @memberof routing.Header\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Header.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Header;\n    })();\n\n    routing.Heartbeat = (function() {\n\n        /**\n         * Properties of a Heartbeat.\n         * @memberof routing\n         * @interface IHeartbeat\n         */\n\n        /**\n         * Constructs a new Heartbeat.\n         * @memberof routing\n         * @classdesc Represents a Heartbeat.\n         * @implements IHeartbeat\n         * @constructor\n         * @param {routing.IHeartbeat=} [properties] Properties to set\n         */\n        function Heartbeat(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new Heartbeat instance using the specified properties.\n         * @function create\n         * @memberof routing.Heartbeat\n         * @static\n         * @param {routing.IHeartbeat=} [properties] Properties to set\n         * @returns {routing.Heartbeat} Heartbeat instance\n         */\n        Heartbeat.create = function create(properties) {\n            return new Heartbeat(properties);\n        };\n\n        /**\n         * Encodes the specified Heartbeat message. Does not implicitly {@link routing.Heartbeat.verify|verify} messages.\n         * @function encode\n         * @memberof routing.Heartbeat\n         * @static\n         * @param {routing.IHeartbeat} message Heartbeat message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Heartbeat.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Heartbeat message, length delimited. Does not implicitly {@link routing.Heartbeat.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.Heartbeat\n         * @static\n         * @param {routing.IHeartbeat} message Heartbeat message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Heartbeat.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Heartbeat message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.Heartbeat\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.Heartbeat} Heartbeat\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Heartbeat.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Heartbeat();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Heartbeat message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.Heartbeat\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.Heartbeat} Heartbeat\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Heartbeat.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Heartbeat message.\n         * @function verify\n         * @memberof routing.Heartbeat\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Heartbeat.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Heartbeat message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.Heartbeat\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.Heartbeat} Heartbeat\n         */\n        Heartbeat.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.Heartbeat)\n                return object;\n            return new $root.routing.Heartbeat();\n        };\n\n        /**\n         * Creates a plain object from a Heartbeat message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.Heartbeat\n         * @static\n         * @param {routing.Heartbeat} message Heartbeat\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Heartbeat.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this Heartbeat to JSON.\n         * @function toJSON\n         * @memberof routing.Heartbeat\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Heartbeat.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Heartbeat;\n    })();\n\n    routing.HeartbeatResponse = (function() {\n\n        /**\n         * Properties of a HeartbeatResponse.\n         * @memberof routing\n         * @interface IHeartbeatResponse\n         */\n\n        /**\n         * Constructs a new HeartbeatResponse.\n         * @memberof routing\n         * @classdesc Represents a HeartbeatResponse.\n         * @implements IHeartbeatResponse\n         * @constructor\n         * @param {routing.IHeartbeatResponse=} [properties] Properties to set\n         */\n        function HeartbeatResponse(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new HeartbeatResponse instance using the specified properties.\n         * @function create\n         * @memberof routing.HeartbeatResponse\n         * @static\n         * @param {routing.IHeartbeatResponse=} [properties] Properties to set\n         * @returns {routing.HeartbeatResponse} HeartbeatResponse instance\n         */\n        HeartbeatResponse.create = function create(properties) {\n            return new HeartbeatResponse(properties);\n        };\n\n        /**\n         * Encodes the specified HeartbeatResponse message. Does not implicitly {@link routing.HeartbeatResponse.verify|verify} messages.\n         * @function encode\n         * @memberof routing.HeartbeatResponse\n         * @static\n         * @param {routing.IHeartbeatResponse} message HeartbeatResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HeartbeatResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HeartbeatResponse message, length delimited. Does not implicitly {@link routing.HeartbeatResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.HeartbeatResponse\n         * @static\n         * @param {routing.IHeartbeatResponse} message HeartbeatResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HeartbeatResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HeartbeatResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.HeartbeatResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.HeartbeatResponse} HeartbeatResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HeartbeatResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.HeartbeatResponse();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HeartbeatResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.HeartbeatResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.HeartbeatResponse} HeartbeatResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HeartbeatResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HeartbeatResponse message.\n         * @function verify\n         * @memberof routing.HeartbeatResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HeartbeatResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a HeartbeatResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.HeartbeatResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.HeartbeatResponse} HeartbeatResponse\n         */\n        HeartbeatResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.HeartbeatResponse)\n                return object;\n            return new $root.routing.HeartbeatResponse();\n        };\n\n        /**\n         * Creates a plain object from a HeartbeatResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.HeartbeatResponse\n         * @static\n         * @param {routing.HeartbeatResponse} message HeartbeatResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HeartbeatResponse.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this HeartbeatResponse to JSON.\n         * @function toJSON\n         * @memberof routing.HeartbeatResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HeartbeatResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return HeartbeatResponse;\n    })();\n\n    routing.ProtocolHandshake = (function() {\n\n        /**\n         * Properties of a ProtocolHandshake.\n         * @memberof routing\n         * @interface IProtocolHandshake\n         * @property {Uint8Array|null} [nonce] ProtocolHandshake nonce\n         */\n\n        /**\n         * Constructs a new ProtocolHandshake.\n         * @memberof routing\n         * @classdesc Represents a ProtocolHandshake.\n         * @implements IProtocolHandshake\n         * @constructor\n         * @param {routing.IProtocolHandshake=} [properties] Properties to set\n         */\n        function ProtocolHandshake(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ProtocolHandshake nonce.\n         * @member {Uint8Array} nonce\n         * @memberof routing.ProtocolHandshake\n         * @instance\n         */\n        ProtocolHandshake.prototype.nonce = $util.newBuffer([]);\n\n        /**\n         * Creates a new ProtocolHandshake instance using the specified properties.\n         * @function create\n         * @memberof routing.ProtocolHandshake\n         * @static\n         * @param {routing.IProtocolHandshake=} [properties] Properties to set\n         * @returns {routing.ProtocolHandshake} ProtocolHandshake instance\n         */\n        ProtocolHandshake.create = function create(properties) {\n            return new ProtocolHandshake(properties);\n        };\n\n        /**\n         * Encodes the specified ProtocolHandshake message. Does not implicitly {@link routing.ProtocolHandshake.verify|verify} messages.\n         * @function encode\n         * @memberof routing.ProtocolHandshake\n         * @static\n         * @param {routing.IProtocolHandshake} message ProtocolHandshake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProtocolHandshake.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.nonce != null && message.hasOwnProperty(\"nonce\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.nonce);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ProtocolHandshake message, length delimited. Does not implicitly {@link routing.ProtocolHandshake.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.ProtocolHandshake\n         * @static\n         * @param {routing.IProtocolHandshake} message ProtocolHandshake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProtocolHandshake.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ProtocolHandshake message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.ProtocolHandshake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.ProtocolHandshake} ProtocolHandshake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProtocolHandshake.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.ProtocolHandshake();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.nonce = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ProtocolHandshake message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.ProtocolHandshake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.ProtocolHandshake} ProtocolHandshake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProtocolHandshake.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ProtocolHandshake message.\n         * @function verify\n         * @memberof routing.ProtocolHandshake\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ProtocolHandshake.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.nonce != null && message.hasOwnProperty(\"nonce\"))\n                if (!(message.nonce && typeof message.nonce.length === \"number\" || $util.isString(message.nonce)))\n                    return \"nonce: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ProtocolHandshake message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.ProtocolHandshake\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.ProtocolHandshake} ProtocolHandshake\n         */\n        ProtocolHandshake.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.ProtocolHandshake)\n                return object;\n            var message = new $root.routing.ProtocolHandshake();\n            if (object.nonce != null)\n                if (typeof object.nonce === \"string\")\n                    $util.base64.decode(object.nonce, message.nonce = $util.newBuffer($util.base64.length(object.nonce)), 0);\n                else if (object.nonce.length)\n                    message.nonce = object.nonce;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ProtocolHandshake message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.ProtocolHandshake\n         * @static\n         * @param {routing.ProtocolHandshake} message ProtocolHandshake\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ProtocolHandshake.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.nonce = \"\";\n                else {\n                    object.nonce = [];\n                    if (options.bytes !== Array)\n                        object.nonce = $util.newBuffer(object.nonce);\n                }\n            if (message.nonce != null && message.hasOwnProperty(\"nonce\"))\n                object.nonce = options.bytes === String ? $util.base64.encode(message.nonce, 0, message.nonce.length) : options.bytes === Array ? Array.prototype.slice.call(message.nonce) : message.nonce;\n            return object;\n        };\n\n        /**\n         * Converts this ProtocolHandshake to JSON.\n         * @function toJSON\n         * @memberof routing.ProtocolHandshake\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ProtocolHandshake.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ProtocolHandshake;\n    })();\n\n    routing.ProtocolHandshakeResponse = (function() {\n\n        /**\n         * Properties of a ProtocolHandshakeResponse.\n         * @memberof routing\n         * @interface IProtocolHandshakeResponse\n         * @property {Uint8Array|null} [nonce] ProtocolHandshakeResponse nonce\n         */\n\n        /**\n         * Constructs a new ProtocolHandshakeResponse.\n         * @memberof routing\n         * @classdesc Represents a ProtocolHandshakeResponse.\n         * @implements IProtocolHandshakeResponse\n         * @constructor\n         * @param {routing.IProtocolHandshakeResponse=} [properties] Properties to set\n         */\n        function ProtocolHandshakeResponse(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ProtocolHandshakeResponse nonce.\n         * @member {Uint8Array} nonce\n         * @memberof routing.ProtocolHandshakeResponse\n         * @instance\n         */\n        ProtocolHandshakeResponse.prototype.nonce = $util.newBuffer([]);\n\n        /**\n         * Creates a new ProtocolHandshakeResponse instance using the specified properties.\n         * @function create\n         * @memberof routing.ProtocolHandshakeResponse\n         * @static\n         * @param {routing.IProtocolHandshakeResponse=} [properties] Properties to set\n         * @returns {routing.ProtocolHandshakeResponse} ProtocolHandshakeResponse instance\n         */\n        ProtocolHandshakeResponse.create = function create(properties) {\n            return new ProtocolHandshakeResponse(properties);\n        };\n\n        /**\n         * Encodes the specified ProtocolHandshakeResponse message. Does not implicitly {@link routing.ProtocolHandshakeResponse.verify|verify} messages.\n         * @function encode\n         * @memberof routing.ProtocolHandshakeResponse\n         * @static\n         * @param {routing.IProtocolHandshakeResponse} message ProtocolHandshakeResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProtocolHandshakeResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.nonce != null && message.hasOwnProperty(\"nonce\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.nonce);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ProtocolHandshakeResponse message, length delimited. Does not implicitly {@link routing.ProtocolHandshakeResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.ProtocolHandshakeResponse\n         * @static\n         * @param {routing.IProtocolHandshakeResponse} message ProtocolHandshakeResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ProtocolHandshakeResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ProtocolHandshakeResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.ProtocolHandshakeResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.ProtocolHandshakeResponse} ProtocolHandshakeResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProtocolHandshakeResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.ProtocolHandshakeResponse();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.nonce = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ProtocolHandshakeResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.ProtocolHandshakeResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.ProtocolHandshakeResponse} ProtocolHandshakeResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ProtocolHandshakeResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ProtocolHandshakeResponse message.\n         * @function verify\n         * @memberof routing.ProtocolHandshakeResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ProtocolHandshakeResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.nonce != null && message.hasOwnProperty(\"nonce\"))\n                if (!(message.nonce && typeof message.nonce.length === \"number\" || $util.isString(message.nonce)))\n                    return \"nonce: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ProtocolHandshakeResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.ProtocolHandshakeResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.ProtocolHandshakeResponse} ProtocolHandshakeResponse\n         */\n        ProtocolHandshakeResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.ProtocolHandshakeResponse)\n                return object;\n            var message = new $root.routing.ProtocolHandshakeResponse();\n            if (object.nonce != null)\n                if (typeof object.nonce === \"string\")\n                    $util.base64.decode(object.nonce, message.nonce = $util.newBuffer($util.base64.length(object.nonce)), 0);\n                else if (object.nonce.length)\n                    message.nonce = object.nonce;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ProtocolHandshakeResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.ProtocolHandshakeResponse\n         * @static\n         * @param {routing.ProtocolHandshakeResponse} message ProtocolHandshakeResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ProtocolHandshakeResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.nonce = \"\";\n                else {\n                    object.nonce = [];\n                    if (options.bytes !== Array)\n                        object.nonce = $util.newBuffer(object.nonce);\n                }\n            if (message.nonce != null && message.hasOwnProperty(\"nonce\"))\n                object.nonce = options.bytes === String ? $util.base64.encode(message.nonce, 0, message.nonce.length) : options.bytes === Array ? Array.prototype.slice.call(message.nonce) : message.nonce;\n            return object;\n        };\n\n        /**\n         * Converts this ProtocolHandshakeResponse to JSON.\n         * @function toJSON\n         * @memberof routing.ProtocolHandshakeResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ProtocolHandshakeResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ProtocolHandshakeResponse;\n    })();\n\n    routing.Packet = (function() {\n\n        /**\n         * Properties of a Packet.\n         * @memberof routing\n         * @interface IPacket\n         * @property {string|null} [typeId] Packet typeId\n         * @property {Uint8Array|null} [content] Packet content\n         */\n\n        /**\n         * Constructs a new Packet.\n         * @memberof routing\n         * @classdesc Represents a Packet.\n         * @implements IPacket\n         * @constructor\n         * @param {routing.IPacket=} [properties] Properties to set\n         */\n        function Packet(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Packet typeId.\n         * @member {string} typeId\n         * @memberof routing.Packet\n         * @instance\n         */\n        Packet.prototype.typeId = \"\";\n\n        /**\n         * Packet content.\n         * @member {Uint8Array} content\n         * @memberof routing.Packet\n         * @instance\n         */\n        Packet.prototype.content = $util.newBuffer([]);\n\n        /**\n         * Creates a new Packet instance using the specified properties.\n         * @function create\n         * @memberof routing.Packet\n         * @static\n         * @param {routing.IPacket=} [properties] Properties to set\n         * @returns {routing.Packet} Packet instance\n         */\n        Packet.create = function create(properties) {\n            return new Packet(properties);\n        };\n\n        /**\n         * Encodes the specified Packet message. Does not implicitly {@link routing.Packet.verify|verify} messages.\n         * @function encode\n         * @memberof routing.Packet\n         * @static\n         * @param {routing.IPacket} message Packet message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Packet.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.typeId != null && message.hasOwnProperty(\"typeId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.typeId);\n            if (message.content != null && message.hasOwnProperty(\"content\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.content);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Packet message, length delimited. Does not implicitly {@link routing.Packet.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.Packet\n         * @static\n         * @param {routing.IPacket} message Packet message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Packet.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Packet message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.Packet\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.Packet} Packet\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Packet.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Packet();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.typeId = reader.string();\n                    break;\n                case 2:\n                    message.content = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Packet message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.Packet\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.Packet} Packet\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Packet.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Packet message.\n         * @function verify\n         * @memberof routing.Packet\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Packet.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.typeId != null && message.hasOwnProperty(\"typeId\"))\n                if (!$util.isString(message.typeId))\n                    return \"typeId: string expected\";\n            if (message.content != null && message.hasOwnProperty(\"content\"))\n                if (!(message.content && typeof message.content.length === \"number\" || $util.isString(message.content)))\n                    return \"content: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Packet message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.Packet\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.Packet} Packet\n         */\n        Packet.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.Packet)\n                return object;\n            var message = new $root.routing.Packet();\n            if (object.typeId != null)\n                message.typeId = String(object.typeId);\n            if (object.content != null)\n                if (typeof object.content === \"string\")\n                    $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);\n                else if (object.content.length)\n                    message.content = object.content;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Packet message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.Packet\n         * @static\n         * @param {routing.Packet} message Packet\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Packet.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.typeId = \"\";\n                if (options.bytes === String)\n                    object.content = \"\";\n                else {\n                    object.content = [];\n                    if (options.bytes !== Array)\n                        object.content = $util.newBuffer(object.content);\n                }\n            }\n            if (message.typeId != null && message.hasOwnProperty(\"typeId\"))\n                object.typeId = message.typeId;\n            if (message.content != null && message.hasOwnProperty(\"content\"))\n                object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;\n            return object;\n        };\n\n        /**\n         * Converts this Packet to JSON.\n         * @function toJSON\n         * @memberof routing.Packet\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Packet.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Packet;\n    })();\n\n    routing.Disconnect = (function() {\n\n        /**\n         * Properties of a Disconnect.\n         * @memberof routing\n         * @interface IDisconnect\n         */\n\n        /**\n         * Constructs a new Disconnect.\n         * @memberof routing\n         * @classdesc Represents a Disconnect.\n         * @implements IDisconnect\n         * @constructor\n         * @param {routing.IDisconnect=} [properties] Properties to set\n         */\n        function Disconnect(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Creates a new Disconnect instance using the specified properties.\n         * @function create\n         * @memberof routing.Disconnect\n         * @static\n         * @param {routing.IDisconnect=} [properties] Properties to set\n         * @returns {routing.Disconnect} Disconnect instance\n         */\n        Disconnect.create = function create(properties) {\n            return new Disconnect(properties);\n        };\n\n        /**\n         * Encodes the specified Disconnect message. Does not implicitly {@link routing.Disconnect.verify|verify} messages.\n         * @function encode\n         * @memberof routing.Disconnect\n         * @static\n         * @param {routing.IDisconnect} message Disconnect message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Disconnect.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Disconnect message, length delimited. Does not implicitly {@link routing.Disconnect.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.Disconnect\n         * @static\n         * @param {routing.IDisconnect} message Disconnect message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Disconnect.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Disconnect message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.Disconnect\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.Disconnect} Disconnect\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Disconnect.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Disconnect();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Disconnect message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.Disconnect\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.Disconnect} Disconnect\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Disconnect.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Disconnect message.\n         * @function verify\n         * @memberof routing.Disconnect\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Disconnect.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Disconnect message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.Disconnect\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.Disconnect} Disconnect\n         */\n        Disconnect.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.Disconnect)\n                return object;\n            return new $root.routing.Disconnect();\n        };\n\n        /**\n         * Creates a plain object from a Disconnect message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.Disconnect\n         * @static\n         * @param {routing.Disconnect} message Disconnect\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Disconnect.toObject = function toObject() {\n            return {};\n        };\n\n        /**\n         * Converts this Disconnect to JSON.\n         * @function toJSON\n         * @memberof routing.Disconnect\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Disconnect.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Disconnect;\n    })();\n\n    routing.Protocol = (function() {\n\n        /**\n         * Properties of a Protocol.\n         * @memberof routing\n         * @interface IProtocol\n         * @property {routing.IHeader|null} [header] Protocol header\n         * @property {routing.IHeartbeat|null} [heartbeat] Protocol heartbeat\n         * @property {routing.IProtocolHandshake|null} [protocol_handshake] Protocol protocol_handshake\n         * @property {routing.IProtocolHandshakeResponse|null} [protocol_handshake_response] Protocol protocol_handshake_response\n         * @property {routing.IPacket|null} [packet] Protocol packet\n         * @property {routing.IDisconnect|null} [disconnect] Protocol disconnect\n         */\n\n        /**\n         * Constructs a new Protocol.\n         * @memberof routing\n         * @classdesc Represents a Protocol.\n         * @implements IProtocol\n         * @constructor\n         * @param {routing.IProtocol=} [properties] Properties to set\n         */\n        function Protocol(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Protocol header.\n         * @member {routing.IHeader|null|undefined} header\n         * @memberof routing.Protocol\n         * @instance\n         */\n        Protocol.prototype.header = null;\n\n        /**\n         * Protocol heartbeat.\n         * @member {routing.IHeartbeat|null|undefined} heartbeat\n         * @memberof routing.Protocol\n         * @instance\n         */\n        Protocol.prototype.heartbeat = null;\n\n        /**\n         * Protocol protocol_handshake.\n         * @member {routing.IProtocolHandshake|null|undefined} protocol_handshake\n         * @memberof routing.Protocol\n         * @instance\n         */\n        Protocol.prototype.protocol_handshake = null;\n\n        /**\n         * Protocol protocol_handshake_response.\n         * @member {routing.IProtocolHandshakeResponse|null|undefined} protocol_handshake_response\n         * @memberof routing.Protocol\n         * @instance\n         */\n        Protocol.prototype.protocol_handshake_response = null;\n\n        /**\n         * Protocol packet.\n         * @member {routing.IPacket|null|undefined} packet\n         * @memberof routing.Protocol\n         * @instance\n         */\n        Protocol.prototype.packet = null;\n\n        /**\n         * Protocol disconnect.\n         * @member {routing.IDisconnect|null|undefined} disconnect\n         * @memberof routing.Protocol\n         * @instance\n         */\n        Protocol.prototype.disconnect = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Protocol message.\n         * @member {\"heartbeat\"|\"protocol_handshake\"|\"protocol_handshake_response\"|\"packet\"|\"disconnect\"|undefined} message\n         * @memberof routing.Protocol\n         * @instance\n         */\n        Object.defineProperty(Protocol.prototype, \"message\", {\n            get: $util.oneOfGetter($oneOfFields = [\"heartbeat\", \"protocol_handshake\", \"protocol_handshake_response\", \"packet\", \"disconnect\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Protocol instance using the specified properties.\n         * @function create\n         * @memberof routing.Protocol\n         * @static\n         * @param {routing.IProtocol=} [properties] Properties to set\n         * @returns {routing.Protocol} Protocol instance\n         */\n        Protocol.create = function create(properties) {\n            return new Protocol(properties);\n        };\n\n        /**\n         * Encodes the specified Protocol message. Does not implicitly {@link routing.Protocol.verify|verify} messages.\n         * @function encode\n         * @memberof routing.Protocol\n         * @static\n         * @param {routing.IProtocol} message Protocol message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Protocol.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.header != null && message.hasOwnProperty(\"header\"))\n                $root.routing.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.heartbeat != null && message.hasOwnProperty(\"heartbeat\"))\n                $root.routing.Heartbeat.encode(message.heartbeat, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.protocol_handshake != null && message.hasOwnProperty(\"protocol_handshake\"))\n                $root.routing.ProtocolHandshake.encode(message.protocol_handshake, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.protocol_handshake_response != null && message.hasOwnProperty(\"protocol_handshake_response\"))\n                $root.routing.ProtocolHandshakeResponse.encode(message.protocol_handshake_response, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.packet != null && message.hasOwnProperty(\"packet\"))\n                $root.routing.Packet.encode(message.packet, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.disconnect != null && message.hasOwnProperty(\"disconnect\"))\n                $root.routing.Disconnect.encode(message.disconnect, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Protocol message, length delimited. Does not implicitly {@link routing.Protocol.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.Protocol\n         * @static\n         * @param {routing.IProtocol} message Protocol message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Protocol.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Protocol message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.Protocol\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.Protocol} Protocol\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Protocol.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Protocol();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.header = $root.routing.Header.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.heartbeat = $root.routing.Heartbeat.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.protocol_handshake = $root.routing.ProtocolHandshake.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.protocol_handshake_response = $root.routing.ProtocolHandshakeResponse.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.packet = $root.routing.Packet.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.disconnect = $root.routing.Disconnect.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Protocol message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.Protocol\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.Protocol} Protocol\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Protocol.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Protocol message.\n         * @function verify\n         * @memberof routing.Protocol\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Protocol.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.header != null && message.hasOwnProperty(\"header\")) {\n                var error = $root.routing.Header.verify(message.header);\n                if (error)\n                    return \"header.\" + error;\n            }\n            if (message.heartbeat != null && message.hasOwnProperty(\"heartbeat\")) {\n                properties.message = 1;\n                {\n                    var error = $root.routing.Heartbeat.verify(message.heartbeat);\n                    if (error)\n                        return \"heartbeat.\" + error;\n                }\n            }\n            if (message.protocol_handshake != null && message.hasOwnProperty(\"protocol_handshake\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.routing.ProtocolHandshake.verify(message.protocol_handshake);\n                    if (error)\n                        return \"protocol_handshake.\" + error;\n                }\n            }\n            if (message.protocol_handshake_response != null && message.hasOwnProperty(\"protocol_handshake_response\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.routing.ProtocolHandshakeResponse.verify(message.protocol_handshake_response);\n                    if (error)\n                        return \"protocol_handshake_response.\" + error;\n                }\n            }\n            if (message.packet != null && message.hasOwnProperty(\"packet\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.routing.Packet.verify(message.packet);\n                    if (error)\n                        return \"packet.\" + error;\n                }\n            }\n            if (message.disconnect != null && message.hasOwnProperty(\"disconnect\")) {\n                if (properties.message === 1)\n                    return \"message: multiple values\";\n                properties.message = 1;\n                {\n                    var error = $root.routing.Disconnect.verify(message.disconnect);\n                    if (error)\n                        return \"disconnect.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Protocol message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.Protocol\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.Protocol} Protocol\n         */\n        Protocol.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.Protocol)\n                return object;\n            var message = new $root.routing.Protocol();\n            if (object.header != null) {\n                if (typeof object.header !== \"object\")\n                    throw TypeError(\".routing.Protocol.header: object expected\");\n                message.header = $root.routing.Header.fromObject(object.header);\n            }\n            if (object.heartbeat != null) {\n                if (typeof object.heartbeat !== \"object\")\n                    throw TypeError(\".routing.Protocol.heartbeat: object expected\");\n                message.heartbeat = $root.routing.Heartbeat.fromObject(object.heartbeat);\n            }\n            if (object.protocol_handshake != null) {\n                if (typeof object.protocol_handshake !== \"object\")\n                    throw TypeError(\".routing.Protocol.protocol_handshake: object expected\");\n                message.protocol_handshake = $root.routing.ProtocolHandshake.fromObject(object.protocol_handshake);\n            }\n            if (object.protocol_handshake_response != null) {\n                if (typeof object.protocol_handshake_response !== \"object\")\n                    throw TypeError(\".routing.Protocol.protocol_handshake_response: object expected\");\n                message.protocol_handshake_response = $root.routing.ProtocolHandshakeResponse.fromObject(object.protocol_handshake_response);\n            }\n            if (object.packet != null) {\n                if (typeof object.packet !== \"object\")\n                    throw TypeError(\".routing.Protocol.packet: object expected\");\n                message.packet = $root.routing.Packet.fromObject(object.packet);\n            }\n            if (object.disconnect != null) {\n                if (typeof object.disconnect !== \"object\")\n                    throw TypeError(\".routing.Protocol.disconnect: object expected\");\n                message.disconnect = $root.routing.Disconnect.fromObject(object.disconnect);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Protocol message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.Protocol\n         * @static\n         * @param {routing.Protocol} message Protocol\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Protocol.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.header = null;\n            if (message.header != null && message.hasOwnProperty(\"header\"))\n                object.header = $root.routing.Header.toObject(message.header, options);\n            if (message.heartbeat != null && message.hasOwnProperty(\"heartbeat\")) {\n                object.heartbeat = $root.routing.Heartbeat.toObject(message.heartbeat, options);\n                if (options.oneofs)\n                    object.message = \"heartbeat\";\n            }\n            if (message.protocol_handshake != null && message.hasOwnProperty(\"protocol_handshake\")) {\n                object.protocol_handshake = $root.routing.ProtocolHandshake.toObject(message.protocol_handshake, options);\n                if (options.oneofs)\n                    object.message = \"protocol_handshake\";\n            }\n            if (message.protocol_handshake_response != null && message.hasOwnProperty(\"protocol_handshake_response\")) {\n                object.protocol_handshake_response = $root.routing.ProtocolHandshakeResponse.toObject(message.protocol_handshake_response, options);\n                if (options.oneofs)\n                    object.message = \"protocol_handshake_response\";\n            }\n            if (message.packet != null && message.hasOwnProperty(\"packet\")) {\n                object.packet = $root.routing.Packet.toObject(message.packet, options);\n                if (options.oneofs)\n                    object.message = \"packet\";\n            }\n            if (message.disconnect != null && message.hasOwnProperty(\"disconnect\")) {\n                object.disconnect = $root.routing.Disconnect.toObject(message.disconnect, options);\n                if (options.oneofs)\n                    object.message = \"disconnect\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Protocol to JSON.\n         * @function toJSON\n         * @memberof routing.Protocol\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Protocol.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Protocol;\n    })();\n\n    routing.TransportLayer = (function() {\n\n        /**\n         * Constructs a new TransportLayer service.\n         * @memberof routing\n         * @classdesc Represents a TransportLayer\n         * @extends $protobuf.rpc.Service\n         * @constructor\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         */\n        function TransportLayer(rpcImpl, requestDelimited, responseDelimited) {\n            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n        }\n\n        (TransportLayer.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TransportLayer;\n\n        /**\n         * Creates new TransportLayer service using the specified rpc implementation.\n         * @function create\n         * @memberof routing.TransportLayer\n         * @static\n         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n         * @returns {TransportLayer} RPC service. Useful where requests and/or responses are streamed.\n         */\n        TransportLayer.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n            return new this(rpcImpl, requestDelimited, responseDelimited);\n        };\n\n        /**\n         * Callback as used by {@link routing.TransportLayer#send}.\n         * @memberof routing.TransportLayer\n         * @typedef SendCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {routing.TLResponse} [response] TLResponse\n         */\n\n        /**\n         * Calls Send.\n         * @function send\n         * @memberof routing.TransportLayer\n         * @instance\n         * @param {routing.ITLRequest} request TLRequest message or plain object\n         * @param {routing.TransportLayer.SendCallback} callback Node-style callback called with the error, if any, and TLResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TransportLayer.prototype.send = function send(request, callback) {\n            return this.rpcCall(send, $root.routing.TLRequest, $root.routing.TLResponse, request, callback);\n        }, \"name\", { value: \"Send\" });\n\n        /**\n         * Calls Send.\n         * @function send\n         * @memberof routing.TransportLayer\n         * @instance\n         * @param {routing.ITLRequest} request TLRequest message or plain object\n         * @returns {Promise<routing.TLResponse>} Promise\n         * @variation 2\n         */\n\n        /**\n         * Callback as used by {@link routing.TransportLayer#stream}.\n         * @memberof routing.TransportLayer\n         * @typedef StreamCallback\n         * @type {function}\n         * @param {Error|null} error Error, if any\n         * @param {routing.TLResponse} [response] TLResponse\n         */\n\n        /**\n         * Calls Stream.\n         * @function stream\n         * @memberof routing.TransportLayer\n         * @instance\n         * @param {routing.IChunk} request Chunk message or plain object\n         * @param {routing.TransportLayer.StreamCallback} callback Node-style callback called with the error, if any, and TLResponse\n         * @returns {undefined}\n         * @variation 1\n         */\n        Object.defineProperty(TransportLayer.prototype.stream = function stream(request, callback) {\n            return this.rpcCall(stream, $root.routing.Chunk, $root.routing.TLResponse, request, callback);\n        }, \"name\", { value: \"Stream\" });\n\n        /**\n         * Calls Stream.\n         * @function stream\n         * @memberof routing.TransportLayer\n         * @instance\n         * @param {routing.IChunk} request Chunk message or plain object\n         * @returns {Promise<routing.TLResponse>} Promise\n         * @variation 2\n         */\n\n        return TransportLayer;\n    })();\n\n    routing.TLRequest = (function() {\n\n        /**\n         * Properties of a TLRequest.\n         * @memberof routing\n         * @interface ITLRequest\n         * @property {routing.IProtocol|null} [protocol] TLRequest protocol\n         */\n\n        /**\n         * Constructs a new TLRequest.\n         * @memberof routing\n         * @classdesc Represents a TLRequest.\n         * @implements ITLRequest\n         * @constructor\n         * @param {routing.ITLRequest=} [properties] Properties to set\n         */\n        function TLRequest(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TLRequest protocol.\n         * @member {routing.IProtocol|null|undefined} protocol\n         * @memberof routing.TLRequest\n         * @instance\n         */\n        TLRequest.prototype.protocol = null;\n\n        /**\n         * Creates a new TLRequest instance using the specified properties.\n         * @function create\n         * @memberof routing.TLRequest\n         * @static\n         * @param {routing.ITLRequest=} [properties] Properties to set\n         * @returns {routing.TLRequest} TLRequest instance\n         */\n        TLRequest.create = function create(properties) {\n            return new TLRequest(properties);\n        };\n\n        /**\n         * Encodes the specified TLRequest message. Does not implicitly {@link routing.TLRequest.verify|verify} messages.\n         * @function encode\n         * @memberof routing.TLRequest\n         * @static\n         * @param {routing.ITLRequest} message TLRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TLRequest.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.protocol != null && message.hasOwnProperty(\"protocol\"))\n                $root.routing.Protocol.encode(message.protocol, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TLRequest message, length delimited. Does not implicitly {@link routing.TLRequest.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.TLRequest\n         * @static\n         * @param {routing.ITLRequest} message TLRequest message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TLRequest.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TLRequest message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.TLRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.TLRequest} TLRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TLRequest.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.TLRequest();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.protocol = $root.routing.Protocol.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TLRequest message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.TLRequest\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.TLRequest} TLRequest\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TLRequest.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TLRequest message.\n         * @function verify\n         * @memberof routing.TLRequest\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TLRequest.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.protocol != null && message.hasOwnProperty(\"protocol\")) {\n                var error = $root.routing.Protocol.verify(message.protocol);\n                if (error)\n                    return \"protocol.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TLRequest message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.TLRequest\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.TLRequest} TLRequest\n         */\n        TLRequest.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.TLRequest)\n                return object;\n            var message = new $root.routing.TLRequest();\n            if (object.protocol != null) {\n                if (typeof object.protocol !== \"object\")\n                    throw TypeError(\".routing.TLRequest.protocol: object expected\");\n                message.protocol = $root.routing.Protocol.fromObject(object.protocol);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TLRequest message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.TLRequest\n         * @static\n         * @param {routing.TLRequest} message TLRequest\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TLRequest.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.protocol = null;\n            if (message.protocol != null && message.hasOwnProperty(\"protocol\"))\n                object.protocol = $root.routing.Protocol.toObject(message.protocol, options);\n            return object;\n        };\n\n        /**\n         * Converts this TLRequest to JSON.\n         * @function toJSON\n         * @memberof routing.TLRequest\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TLRequest.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TLRequest;\n    })();\n\n    routing.InternalServerError = (function() {\n\n        /**\n         * Properties of an InternalServerError.\n         * @memberof routing\n         * @interface IInternalServerError\n         * @property {Uint8Array|null} [error] InternalServerError error\n         */\n\n        /**\n         * Constructs a new InternalServerError.\n         * @memberof routing\n         * @classdesc Represents an InternalServerError.\n         * @implements IInternalServerError\n         * @constructor\n         * @param {routing.IInternalServerError=} [properties] Properties to set\n         */\n        function InternalServerError(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * InternalServerError error.\n         * @member {Uint8Array} error\n         * @memberof routing.InternalServerError\n         * @instance\n         */\n        InternalServerError.prototype.error = $util.newBuffer([]);\n\n        /**\n         * Creates a new InternalServerError instance using the specified properties.\n         * @function create\n         * @memberof routing.InternalServerError\n         * @static\n         * @param {routing.IInternalServerError=} [properties] Properties to set\n         * @returns {routing.InternalServerError} InternalServerError instance\n         */\n        InternalServerError.create = function create(properties) {\n            return new InternalServerError(properties);\n        };\n\n        /**\n         * Encodes the specified InternalServerError message. Does not implicitly {@link routing.InternalServerError.verify|verify} messages.\n         * @function encode\n         * @memberof routing.InternalServerError\n         * @static\n         * @param {routing.IInternalServerError} message InternalServerError message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InternalServerError.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.error != null && message.hasOwnProperty(\"error\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.error);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified InternalServerError message, length delimited. Does not implicitly {@link routing.InternalServerError.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.InternalServerError\n         * @static\n         * @param {routing.IInternalServerError} message InternalServerError message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        InternalServerError.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an InternalServerError message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.InternalServerError\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.InternalServerError} InternalServerError\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InternalServerError.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.InternalServerError();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.error = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an InternalServerError message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.InternalServerError\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.InternalServerError} InternalServerError\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        InternalServerError.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an InternalServerError message.\n         * @function verify\n         * @memberof routing.InternalServerError\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        InternalServerError.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.error != null && message.hasOwnProperty(\"error\"))\n                if (!(message.error && typeof message.error.length === \"number\" || $util.isString(message.error)))\n                    return \"error: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates an InternalServerError message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.InternalServerError\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.InternalServerError} InternalServerError\n         */\n        InternalServerError.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.InternalServerError)\n                return object;\n            var message = new $root.routing.InternalServerError();\n            if (object.error != null)\n                if (typeof object.error === \"string\")\n                    $util.base64.decode(object.error, message.error = $util.newBuffer($util.base64.length(object.error)), 0);\n                else if (object.error.length)\n                    message.error = object.error;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an InternalServerError message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.InternalServerError\n         * @static\n         * @param {routing.InternalServerError} message InternalServerError\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        InternalServerError.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.error = \"\";\n                else {\n                    object.error = [];\n                    if (options.bytes !== Array)\n                        object.error = $util.newBuffer(object.error);\n                }\n            if (message.error != null && message.hasOwnProperty(\"error\"))\n                object.error = options.bytes === String ? $util.base64.encode(message.error, 0, message.error.length) : options.bytes === Array ? Array.prototype.slice.call(message.error) : message.error;\n            return object;\n        };\n\n        /**\n         * Converts this InternalServerError to JSON.\n         * @function toJSON\n         * @memberof routing.InternalServerError\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        InternalServerError.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return InternalServerError;\n    })();\n\n    routing.Ack = (function() {\n\n        /**\n         * Properties of an Ack.\n         * @memberof routing\n         * @interface IAck\n         * @property {routing.IHeader|null} [header] Ack header\n         */\n\n        /**\n         * Constructs a new Ack.\n         * @memberof routing\n         * @classdesc Represents an Ack.\n         * @implements IAck\n         * @constructor\n         * @param {routing.IAck=} [properties] Properties to set\n         */\n        function Ack(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Ack header.\n         * @member {routing.IHeader|null|undefined} header\n         * @memberof routing.Ack\n         * @instance\n         */\n        Ack.prototype.header = null;\n\n        /**\n         * Creates a new Ack instance using the specified properties.\n         * @function create\n         * @memberof routing.Ack\n         * @static\n         * @param {routing.IAck=} [properties] Properties to set\n         * @returns {routing.Ack} Ack instance\n         */\n        Ack.create = function create(properties) {\n            return new Ack(properties);\n        };\n\n        /**\n         * Encodes the specified Ack message. Does not implicitly {@link routing.Ack.verify|verify} messages.\n         * @function encode\n         * @memberof routing.Ack\n         * @static\n         * @param {routing.IAck} message Ack message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Ack.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.header != null && message.hasOwnProperty(\"header\"))\n                $root.routing.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Ack message, length delimited. Does not implicitly {@link routing.Ack.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.Ack\n         * @static\n         * @param {routing.IAck} message Ack message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Ack.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Ack message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.Ack\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.Ack} Ack\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Ack.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Ack();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.header = $root.routing.Header.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Ack message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.Ack\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.Ack} Ack\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Ack.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Ack message.\n         * @function verify\n         * @memberof routing.Ack\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Ack.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.header != null && message.hasOwnProperty(\"header\")) {\n                var error = $root.routing.Header.verify(message.header);\n                if (error)\n                    return \"header.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates an Ack message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.Ack\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.Ack} Ack\n         */\n        Ack.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.Ack)\n                return object;\n            var message = new $root.routing.Ack();\n            if (object.header != null) {\n                if (typeof object.header !== \"object\")\n                    throw TypeError(\".routing.Ack.header: object expected\");\n                message.header = $root.routing.Header.fromObject(object.header);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Ack message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.Ack\n         * @static\n         * @param {routing.Ack} message Ack\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Ack.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.header = null;\n            if (message.header != null && message.hasOwnProperty(\"header\"))\n                object.header = $root.routing.Header.toObject(message.header, options);\n            return object;\n        };\n\n        /**\n         * Converts this Ack to JSON.\n         * @function toJSON\n         * @memberof routing.Ack\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Ack.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Ack;\n    })();\n\n    routing.TLResponse = (function() {\n\n        /**\n         * Properties of a TLResponse.\n         * @memberof routing\n         * @interface ITLResponse\n         * @property {routing.IAck|null} [ack] TLResponse ack\n         * @property {routing.IInternalServerError|null} [internalServerError] TLResponse internalServerError\n         */\n\n        /**\n         * Constructs a new TLResponse.\n         * @memberof routing\n         * @classdesc Represents a TLResponse.\n         * @implements ITLResponse\n         * @constructor\n         * @param {routing.ITLResponse=} [properties] Properties to set\n         */\n        function TLResponse(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TLResponse ack.\n         * @member {routing.IAck|null|undefined} ack\n         * @memberof routing.TLResponse\n         * @instance\n         */\n        TLResponse.prototype.ack = null;\n\n        /**\n         * TLResponse internalServerError.\n         * @member {routing.IInternalServerError|null|undefined} internalServerError\n         * @memberof routing.TLResponse\n         * @instance\n         */\n        TLResponse.prototype.internalServerError = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TLResponse payload.\n         * @member {\"ack\"|\"internalServerError\"|undefined} payload\n         * @memberof routing.TLResponse\n         * @instance\n         */\n        Object.defineProperty(TLResponse.prototype, \"payload\", {\n            get: $util.oneOfGetter($oneOfFields = [\"ack\", \"internalServerError\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TLResponse instance using the specified properties.\n         * @function create\n         * @memberof routing.TLResponse\n         * @static\n         * @param {routing.ITLResponse=} [properties] Properties to set\n         * @returns {routing.TLResponse} TLResponse instance\n         */\n        TLResponse.create = function create(properties) {\n            return new TLResponse(properties);\n        };\n\n        /**\n         * Encodes the specified TLResponse message. Does not implicitly {@link routing.TLResponse.verify|verify} messages.\n         * @function encode\n         * @memberof routing.TLResponse\n         * @static\n         * @param {routing.ITLResponse} message TLResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TLResponse.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.ack != null && message.hasOwnProperty(\"ack\"))\n                $root.routing.Ack.encode(message.ack, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.internalServerError != null && message.hasOwnProperty(\"internalServerError\"))\n                $root.routing.InternalServerError.encode(message.internalServerError, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TLResponse message, length delimited. Does not implicitly {@link routing.TLResponse.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.TLResponse\n         * @static\n         * @param {routing.ITLResponse} message TLResponse message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TLResponse.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TLResponse message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.TLResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.TLResponse} TLResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TLResponse.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.TLResponse();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.ack = $root.routing.Ack.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.internalServerError = $root.routing.InternalServerError.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TLResponse message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.TLResponse\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.TLResponse} TLResponse\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TLResponse.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TLResponse message.\n         * @function verify\n         * @memberof routing.TLResponse\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TLResponse.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.ack != null && message.hasOwnProperty(\"ack\")) {\n                properties.payload = 1;\n                {\n                    var error = $root.routing.Ack.verify(message.ack);\n                    if (error)\n                        return \"ack.\" + error;\n                }\n            }\n            if (message.internalServerError != null && message.hasOwnProperty(\"internalServerError\")) {\n                if (properties.payload === 1)\n                    return \"payload: multiple values\";\n                properties.payload = 1;\n                {\n                    var error = $root.routing.InternalServerError.verify(message.internalServerError);\n                    if (error)\n                        return \"internalServerError.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TLResponse message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.TLResponse\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.TLResponse} TLResponse\n         */\n        TLResponse.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.TLResponse)\n                return object;\n            var message = new $root.routing.TLResponse();\n            if (object.ack != null) {\n                if (typeof object.ack !== \"object\")\n                    throw TypeError(\".routing.TLResponse.ack: object expected\");\n                message.ack = $root.routing.Ack.fromObject(object.ack);\n            }\n            if (object.internalServerError != null) {\n                if (typeof object.internalServerError !== \"object\")\n                    throw TypeError(\".routing.TLResponse.internalServerError: object expected\");\n                message.internalServerError = $root.routing.InternalServerError.fromObject(object.internalServerError);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TLResponse message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.TLResponse\n         * @static\n         * @param {routing.TLResponse} message TLResponse\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TLResponse.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.ack != null && message.hasOwnProperty(\"ack\")) {\n                object.ack = $root.routing.Ack.toObject(message.ack, options);\n                if (options.oneofs)\n                    object.payload = \"ack\";\n            }\n            if (message.internalServerError != null && message.hasOwnProperty(\"internalServerError\")) {\n                object.internalServerError = $root.routing.InternalServerError.toObject(message.internalServerError, options);\n                if (options.oneofs)\n                    object.payload = \"internalServerError\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TLResponse to JSON.\n         * @function toJSON\n         * @memberof routing.TLResponse\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TLResponse.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TLResponse;\n    })();\n\n    routing.ChunkHeader = (function() {\n\n        /**\n         * Properties of a ChunkHeader.\n         * @memberof routing\n         * @interface IChunkHeader\n         * @property {routing.INode|null} [sender] ChunkHeader sender\n         * @property {string|null} [typeId] ChunkHeader typeId\n         * @property {boolean|null} [compressed] ChunkHeader compressed\n         * @property {number|null} [contentLength] ChunkHeader contentLength\n         * @property {string|null} [networkId] ChunkHeader networkId\n         */\n\n        /**\n         * Constructs a new ChunkHeader.\n         * @memberof routing\n         * @classdesc Represents a ChunkHeader.\n         * @implements IChunkHeader\n         * @constructor\n         * @param {routing.IChunkHeader=} [properties] Properties to set\n         */\n        function ChunkHeader(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ChunkHeader sender.\n         * @member {routing.INode|null|undefined} sender\n         * @memberof routing.ChunkHeader\n         * @instance\n         */\n        ChunkHeader.prototype.sender = null;\n\n        /**\n         * ChunkHeader typeId.\n         * @member {string} typeId\n         * @memberof routing.ChunkHeader\n         * @instance\n         */\n        ChunkHeader.prototype.typeId = \"\";\n\n        /**\n         * ChunkHeader compressed.\n         * @member {boolean} compressed\n         * @memberof routing.ChunkHeader\n         * @instance\n         */\n        ChunkHeader.prototype.compressed = false;\n\n        /**\n         * ChunkHeader contentLength.\n         * @member {number} contentLength\n         * @memberof routing.ChunkHeader\n         * @instance\n         */\n        ChunkHeader.prototype.contentLength = 0;\n\n        /**\n         * ChunkHeader networkId.\n         * @member {string} networkId\n         * @memberof routing.ChunkHeader\n         * @instance\n         */\n        ChunkHeader.prototype.networkId = \"\";\n\n        /**\n         * Creates a new ChunkHeader instance using the specified properties.\n         * @function create\n         * @memberof routing.ChunkHeader\n         * @static\n         * @param {routing.IChunkHeader=} [properties] Properties to set\n         * @returns {routing.ChunkHeader} ChunkHeader instance\n         */\n        ChunkHeader.create = function create(properties) {\n            return new ChunkHeader(properties);\n        };\n\n        /**\n         * Encodes the specified ChunkHeader message. Does not implicitly {@link routing.ChunkHeader.verify|verify} messages.\n         * @function encode\n         * @memberof routing.ChunkHeader\n         * @static\n         * @param {routing.IChunkHeader} message ChunkHeader message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ChunkHeader.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                $root.routing.Node.encode(message.sender, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.typeId != null && message.hasOwnProperty(\"typeId\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.typeId);\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.compressed);\n            if (message.contentLength != null && message.hasOwnProperty(\"contentLength\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.contentLength);\n            if (message.networkId != null && message.hasOwnProperty(\"networkId\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.networkId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ChunkHeader message, length delimited. Does not implicitly {@link routing.ChunkHeader.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.ChunkHeader\n         * @static\n         * @param {routing.IChunkHeader} message ChunkHeader message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ChunkHeader.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ChunkHeader message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.ChunkHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.ChunkHeader} ChunkHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ChunkHeader.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.ChunkHeader();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.sender = $root.routing.Node.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.typeId = reader.string();\n                    break;\n                case 3:\n                    message.compressed = reader.bool();\n                    break;\n                case 4:\n                    message.contentLength = reader.int32();\n                    break;\n                case 5:\n                    message.networkId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ChunkHeader message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.ChunkHeader\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.ChunkHeader} ChunkHeader\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ChunkHeader.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ChunkHeader message.\n         * @function verify\n         * @memberof routing.ChunkHeader\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ChunkHeader.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.sender != null && message.hasOwnProperty(\"sender\")) {\n                var error = $root.routing.Node.verify(message.sender);\n                if (error)\n                    return \"sender.\" + error;\n            }\n            if (message.typeId != null && message.hasOwnProperty(\"typeId\"))\n                if (!$util.isString(message.typeId))\n                    return \"typeId: string expected\";\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\"))\n                if (typeof message.compressed !== \"boolean\")\n                    return \"compressed: boolean expected\";\n            if (message.contentLength != null && message.hasOwnProperty(\"contentLength\"))\n                if (!$util.isInteger(message.contentLength))\n                    return \"contentLength: integer expected\";\n            if (message.networkId != null && message.hasOwnProperty(\"networkId\"))\n                if (!$util.isString(message.networkId))\n                    return \"networkId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ChunkHeader message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.ChunkHeader\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.ChunkHeader} ChunkHeader\n         */\n        ChunkHeader.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.ChunkHeader)\n                return object;\n            var message = new $root.routing.ChunkHeader();\n            if (object.sender != null) {\n                if (typeof object.sender !== \"object\")\n                    throw TypeError(\".routing.ChunkHeader.sender: object expected\");\n                message.sender = $root.routing.Node.fromObject(object.sender);\n            }\n            if (object.typeId != null)\n                message.typeId = String(object.typeId);\n            if (object.compressed != null)\n                message.compressed = Boolean(object.compressed);\n            if (object.contentLength != null)\n                message.contentLength = object.contentLength | 0;\n            if (object.networkId != null)\n                message.networkId = String(object.networkId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ChunkHeader message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.ChunkHeader\n         * @static\n         * @param {routing.ChunkHeader} message ChunkHeader\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ChunkHeader.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.sender = null;\n                object.typeId = \"\";\n                object.compressed = false;\n                object.contentLength = 0;\n                object.networkId = \"\";\n            }\n            if (message.sender != null && message.hasOwnProperty(\"sender\"))\n                object.sender = $root.routing.Node.toObject(message.sender, options);\n            if (message.typeId != null && message.hasOwnProperty(\"typeId\"))\n                object.typeId = message.typeId;\n            if (message.compressed != null && message.hasOwnProperty(\"compressed\"))\n                object.compressed = message.compressed;\n            if (message.contentLength != null && message.hasOwnProperty(\"contentLength\"))\n                object.contentLength = message.contentLength;\n            if (message.networkId != null && message.hasOwnProperty(\"networkId\"))\n                object.networkId = message.networkId;\n            return object;\n        };\n\n        /**\n         * Converts this ChunkHeader to JSON.\n         * @function toJSON\n         * @memberof routing.ChunkHeader\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ChunkHeader.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ChunkHeader;\n    })();\n\n    routing.ChunkData = (function() {\n\n        /**\n         * Properties of a ChunkData.\n         * @memberof routing\n         * @interface IChunkData\n         * @property {Uint8Array|null} [contentData] ChunkData contentData\n         */\n\n        /**\n         * Constructs a new ChunkData.\n         * @memberof routing\n         * @classdesc Represents a ChunkData.\n         * @implements IChunkData\n         * @constructor\n         * @param {routing.IChunkData=} [properties] Properties to set\n         */\n        function ChunkData(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ChunkData contentData.\n         * @member {Uint8Array} contentData\n         * @memberof routing.ChunkData\n         * @instance\n         */\n        ChunkData.prototype.contentData = $util.newBuffer([]);\n\n        /**\n         * Creates a new ChunkData instance using the specified properties.\n         * @function create\n         * @memberof routing.ChunkData\n         * @static\n         * @param {routing.IChunkData=} [properties] Properties to set\n         * @returns {routing.ChunkData} ChunkData instance\n         */\n        ChunkData.create = function create(properties) {\n            return new ChunkData(properties);\n        };\n\n        /**\n         * Encodes the specified ChunkData message. Does not implicitly {@link routing.ChunkData.verify|verify} messages.\n         * @function encode\n         * @memberof routing.ChunkData\n         * @static\n         * @param {routing.IChunkData} message ChunkData message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ChunkData.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.contentData != null && message.hasOwnProperty(\"contentData\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.contentData);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ChunkData message, length delimited. Does not implicitly {@link routing.ChunkData.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.ChunkData\n         * @static\n         * @param {routing.IChunkData} message ChunkData message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ChunkData.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ChunkData message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.ChunkData\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.ChunkData} ChunkData\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ChunkData.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.ChunkData();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.contentData = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ChunkData message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.ChunkData\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.ChunkData} ChunkData\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ChunkData.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ChunkData message.\n         * @function verify\n         * @memberof routing.ChunkData\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ChunkData.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.contentData != null && message.hasOwnProperty(\"contentData\"))\n                if (!(message.contentData && typeof message.contentData.length === \"number\" || $util.isString(message.contentData)))\n                    return \"contentData: buffer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ChunkData message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.ChunkData\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.ChunkData} ChunkData\n         */\n        ChunkData.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.ChunkData)\n                return object;\n            var message = new $root.routing.ChunkData();\n            if (object.contentData != null)\n                if (typeof object.contentData === \"string\")\n                    $util.base64.decode(object.contentData, message.contentData = $util.newBuffer($util.base64.length(object.contentData)), 0);\n                else if (object.contentData.length)\n                    message.contentData = object.contentData;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ChunkData message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.ChunkData\n         * @static\n         * @param {routing.ChunkData} message ChunkData\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ChunkData.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                if (options.bytes === String)\n                    object.contentData = \"\";\n                else {\n                    object.contentData = [];\n                    if (options.bytes !== Array)\n                        object.contentData = $util.newBuffer(object.contentData);\n                }\n            if (message.contentData != null && message.hasOwnProperty(\"contentData\"))\n                object.contentData = options.bytes === String ? $util.base64.encode(message.contentData, 0, message.contentData.length) : options.bytes === Array ? Array.prototype.slice.call(message.contentData) : message.contentData;\n            return object;\n        };\n\n        /**\n         * Converts this ChunkData to JSON.\n         * @function toJSON\n         * @memberof routing.ChunkData\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ChunkData.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ChunkData;\n    })();\n\n    routing.Chunk = (function() {\n\n        /**\n         * Properties of a Chunk.\n         * @memberof routing\n         * @interface IChunk\n         * @property {routing.IChunkHeader|null} [header] Chunk header\n         * @property {routing.IChunkData|null} [data] Chunk data\n         */\n\n        /**\n         * Constructs a new Chunk.\n         * @memberof routing\n         * @classdesc Represents a Chunk.\n         * @implements IChunk\n         * @constructor\n         * @param {routing.IChunk=} [properties] Properties to set\n         */\n        function Chunk(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Chunk header.\n         * @member {routing.IChunkHeader|null|undefined} header\n         * @memberof routing.Chunk\n         * @instance\n         */\n        Chunk.prototype.header = null;\n\n        /**\n         * Chunk data.\n         * @member {routing.IChunkData|null|undefined} data\n         * @memberof routing.Chunk\n         * @instance\n         */\n        Chunk.prototype.data = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Chunk content.\n         * @member {\"header\"|\"data\"|undefined} content\n         * @memberof routing.Chunk\n         * @instance\n         */\n        Object.defineProperty(Chunk.prototype, \"content\", {\n            get: $util.oneOfGetter($oneOfFields = [\"header\", \"data\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Chunk instance using the specified properties.\n         * @function create\n         * @memberof routing.Chunk\n         * @static\n         * @param {routing.IChunk=} [properties] Properties to set\n         * @returns {routing.Chunk} Chunk instance\n         */\n        Chunk.create = function create(properties) {\n            return new Chunk(properties);\n        };\n\n        /**\n         * Encodes the specified Chunk message. Does not implicitly {@link routing.Chunk.verify|verify} messages.\n         * @function encode\n         * @memberof routing.Chunk\n         * @static\n         * @param {routing.IChunk} message Chunk message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Chunk.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.header != null && message.hasOwnProperty(\"header\"))\n                $root.routing.ChunkHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                $root.routing.ChunkData.encode(message.data, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Chunk message, length delimited. Does not implicitly {@link routing.Chunk.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof routing.Chunk\n         * @static\n         * @param {routing.IChunk} message Chunk message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Chunk.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Chunk message from the specified reader or buffer.\n         * @function decode\n         * @memberof routing.Chunk\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {routing.Chunk} Chunk\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Chunk.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.routing.Chunk();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.header = $root.routing.ChunkHeader.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.data = $root.routing.ChunkData.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Chunk message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof routing.Chunk\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {routing.Chunk} Chunk\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Chunk.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Chunk message.\n         * @function verify\n         * @memberof routing.Chunk\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Chunk.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.header != null && message.hasOwnProperty(\"header\")) {\n                properties.content = 1;\n                {\n                    var error = $root.routing.ChunkHeader.verify(message.header);\n                    if (error)\n                        return \"header.\" + error;\n                }\n            }\n            if (message.data != null && message.hasOwnProperty(\"data\")) {\n                if (properties.content === 1)\n                    return \"content: multiple values\";\n                properties.content = 1;\n                {\n                    var error = $root.routing.ChunkData.verify(message.data);\n                    if (error)\n                        return \"data.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Chunk message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof routing.Chunk\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {routing.Chunk} Chunk\n         */\n        Chunk.fromObject = function fromObject(object) {\n            if (object instanceof $root.routing.Chunk)\n                return object;\n            var message = new $root.routing.Chunk();\n            if (object.header != null) {\n                if (typeof object.header !== \"object\")\n                    throw TypeError(\".routing.Chunk.header: object expected\");\n                message.header = $root.routing.ChunkHeader.fromObject(object.header);\n            }\n            if (object.data != null) {\n                if (typeof object.data !== \"object\")\n                    throw TypeError(\".routing.Chunk.data: object expected\");\n                message.data = $root.routing.ChunkData.fromObject(object.data);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Chunk message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof routing.Chunk\n         * @static\n         * @param {routing.Chunk} message Chunk\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Chunk.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.header != null && message.hasOwnProperty(\"header\")) {\n                object.header = $root.routing.ChunkHeader.toObject(message.header, options);\n                if (options.oneofs)\n                    object.content = \"header\";\n            }\n            if (message.data != null && message.hasOwnProperty(\"data\")) {\n                object.data = $root.routing.ChunkData.toObject(message.data, options);\n                if (options.oneofs)\n                    object.content = \"data\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Chunk to JSON.\n         * @function toJSON\n         * @memberof routing.Chunk\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Chunk.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Chunk;\n    })();\n\n    return routing;\n})();\n\nmodule.exports = $root;\n","\"use strict\";\n// https://github.com/45678/Base58/blob/master/Base58.js\nexports.__esModule = true;\nvar ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nexports.encode = function (buffer) {\n    var carry, digits, j;\n    if (buffer.length === 0) {\n        return \"\";\n    }\n    digits = [0];\n    var i = 0;\n    while (i < buffer.length) {\n        var j_1 = 0;\n        while (j_1 < digits.length) {\n            digits[j_1] <<= 8;\n            j_1++;\n        }\n        digits[0] += buffer[i];\n        carry = 0;\n        j_1 = 0;\n        while (j_1 < digits.length) {\n            digits[j_1] += carry;\n            carry = (digits[j_1] / 58) | 0;\n            digits[j_1] %= 58;\n            ++j_1;\n        }\n        while (carry) {\n            digits.push(carry % 58);\n            carry = (carry / 58) | 0;\n        }\n        i++;\n    }\n    i = 0;\n    while (buffer[i] === 0 && i < buffer.length - 1) {\n        digits.push(0);\n        i++;\n    }\n    return digits\n        .reverse()\n        .map(function (digit) {\n        return ALPHABET[digit];\n    })\n        .join(\"\");\n};\n","\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nexports.__esModule = true;\nvar blakejs_1 = require(\"blakejs\");\nvar elliptic = require(\"elliptic\");\nvar js_sha3_1 = require(\"js-sha3\");\nvar rnodeProtos = require(\"./rnode-protos\");\nvar base58 = require(\"./base58\");\nvar ec = new elliptic.ec(\"secp256k1\");\nexports.getFirstBlock = function (blockInfo) {\n    return blockInfo[0];\n};\nexports.getValueFromBlocks = function (blockInfo) {\n    for (var i = 0; i < blockInfo.length; i += 1) {\n        var block = blockInfo[i];\n        if (block.postBlockData) {\n            for (var j = 0; j < block.postBlockData.length; j += 1) {\n                var data = block.postBlockData[j];\n                if (data) {\n                    return data;\n                }\n            }\n        }\n    }\n    throw new Error(\"Not data found in any block\");\n};\nvar rhoUnforgeableToJs = function (expr) {\n    var unforgeable = {};\n    Object.keys(expr.ExprUnforg.data).forEach(function (u) {\n        if (u === \"UnforgPrivate\") {\n            unforgeable.UnforgPrivate = expr.ExprUnforg.data[u].data;\n        }\n        else if (u === \"UnforgDeploy\") {\n            unforgeable.UnforgDeploy = expr.ExprUnforg.data[u].data;\n        }\n        else if (u === \"UnforgDeployer\") {\n            unforgeable.UnforgDeployer = expr.ExprUnforg.data[u].data;\n        }\n    });\n    return unforgeable;\n};\nvar rholangMapToJsObject = function (expr) {\n    var obj = {};\n    Object.keys(expr.ExprMap.data).forEach(function (k) {\n        obj[k] = exports.rhoValToJs(expr.ExprMap.data[k]);\n    });\n    return obj;\n};\nvar rhoIdsToJs = function (ids) {\n    return ids[0].id;\n};\nvar rhoExprStringToJs = function (expr) {\n    return expr.ExprString.data;\n};\nvar rhoExprUriToJs = function (expr) {\n    return expr.ExprUri.data;\n};\nvar rhoExprBoolToJs = function (expr) {\n    return expr.ExprBool.data;\n};\nvar rhoExprIntToJs = function (expr) {\n    return expr.ExprInt.data;\n};\nvar rhoExprListToJs = function (expr) {\n    return expr.ExprList.data.map(function (e) { return exports.rhoValToJs(e); });\n};\nvar rhoExprSetToJs = function (expr) {\n    return expr.ExprSet.data.map(function (e) { return exports.rhoValToJs(e); });\n};\nexports.rhoValToJs = function (expr) {\n    /* if (val.ids && val.ids[0]) {\n      return rhoIdsToJs(val.ids);\n    } else  */\n    if (expr.ExprUnforg) {\n        return rhoUnforgeableToJs(expr);\n    }\n    else if (expr.ExprMap) {\n        return rholangMapToJsObject(expr);\n    }\n    else if (expr.ExprString) {\n        return rhoExprStringToJs(expr);\n    }\n    else if (expr.ExprUri) {\n        return rhoExprUriToJs(expr);\n    }\n    else if (expr.ExprBool) {\n        return rhoExprBoolToJs(expr);\n    }\n    else if (expr.ExprInt) {\n        return rhoExprIntToJs(expr);\n    }\n    else if (expr.ExprList) {\n        return rhoExprListToJs(expr);\n    }\n    else if (expr.ExprSet) {\n        return rhoExprSetToJs(expr);\n    }\n    else {\n        console.warn(\"Not implemented\", expr);\n        return null;\n    }\n};\nexports.unforgeableWithId = function (id) {\n    return id.toString(\"hex\");\n};\nexports.getDeployData = function (timestamp, term, phloPrice, phloLimit, validAfterBlockNumber) {\n    if (phloPrice === void 0) { phloPrice = 1; }\n    if (phloLimit === void 0) { phloLimit = 10000000; }\n    if (validAfterBlockNumber === void 0) { validAfterBlockNumber = 0; }\n    return {\n        timestamp: timestamp,\n        term: term,\n        phloLimit: phloLimit,\n        phloPrice: phloPrice,\n        validAfterBlockNumber: validAfterBlockNumber\n    };\n};\nexports.getDeployDataToSign = function (payment) {\n    return rnodeProtos.casper.DeployDataProto.encode(payment).finish();\n};\nvar stringToRhoRepr = function (a) {\n    return { g_string: a };\n};\nvar intToRhoRepr = function (a) {\n    return { g_int: a };\n};\nvar boolToRhoRepr = function (a) {\n    return { g_bool: a };\n};\nvar listToRhoRepr = function (a) {\n    return {\n        ps: a.map(function (e) { return ({ exprs: [exports.varToRhoExpr(e)] }); })\n    };\n};\nexports.mapToRhoRepr = function (a) {\n    var map = {\n        kvs: []\n    };\n    Object.keys(a)\n        .sort() // alphabetical\n        .forEach(function (key) {\n        if (typeof a[key] !== \"undefined\" && a[key] !== null) {\n            map.kvs.push({\n                key: { exprs: [exports.varToRhoExpr(key)] },\n                value: { exprs: [exports.varToRhoExpr(a[key])] }\n            });\n        }\n        else {\n            map.kvs.push({\n                key: { exprs: [exports.varToRhoExpr(key)] }\n            });\n        }\n    });\n    return map;\n};\nexports.varToRhoExpr = function (a) {\n    if (typeof a === \"boolean\") {\n        return boolToRhoRepr(a);\n    }\n    if (typeof a === \"string\") {\n        return stringToRhoRepr(a);\n    }\n    if (typeof a === \"number\") {\n        return intToRhoRepr(a);\n    }\n    if (Array.isArray(a)) {\n        return { e_list_body: listToRhoRepr(a) };\n    }\n    if (typeof a === \"object\" && a !== null) {\n        return { e_map_body: exports.mapToRhoRepr(a) };\n    }\n    throw new Error(\"Unknown variable type\");\n};\nexports.toByteArray = function (a) {\n    var expr = exports.varToRhoExpr(a);\n    return rnodeProtos.Par.encode({\n        exprs: [expr]\n    }).finish();\n};\nexports.getBlake2Hash = function (toHash, length) {\n    if (length === void 0) { length = 32; }\n    var context = blakejs_1.blake2bInit(length, null);\n    blakejs_1.blake2bUpdate(context, toHash);\n    return blakejs_1.blake2bFinal(context);\n};\nexports.verifyPrivateAndPublicKey = function (privateKey, publicKey) {\n    var keyPair = ec.keyFromPrivate(privateKey);\n    if (keyPair.getPublic().encode(\"hex\", false) !== publicKey) {\n        throw new Error(\"Private key and public key do not match\");\n    }\n};\nexports.signSecp256k1 = function (hash, privateKey) {\n    var keyPair = ec.keyFromPrivate(privateKey);\n    var signature = keyPair.sign(Buffer.from(hash), { canonical: true });\n    var derSign = signature.toDER();\n    if (!ec.verify(Buffer.from(hash), signature, keyPair, \"hex\")) {\n        throw new Error(\"Failed to verify signature\");\n    }\n    return new Uint8Array(derSign);\n};\nexports.transferRevTerm = function (a) {\n    if (typeof a.from !== \"string\") {\n        throw new Error(\"from must be a REV address\");\n    }\n    if (typeof a.to !== \"string\") {\n        throw new Error(\"to must be a REV address\");\n    }\n    if (typeof a.amount !== \"number\") {\n        throw new Error(\"amount must be a number\");\n    }\n    return \"new\\n  rl(`rho:registry:lookup`),\\n  RevVaultCh,\\n  stdout(`rho:io:stdout`)\\nin {\\n\\nrl!(`rho:rchain:revVault`, *RevVaultCh) |\\nfor (@(_, RevVault) <- RevVaultCh) {\\n\\n  match (\\n    \\\"\" + a.from + \"\\\",\\n    \\\"\" + a.to + \"\\\",\\n    \" + a.amount + \"\\n  ) {\\n    (from, to, amount) => {\\n\\n      new vaultCh, revVaultkeyCh, deployerId(`rho:rchain:deployerId`) in {\\n        @RevVault!(\\\"findOrCreate\\\", from, *vaultCh) |\\n        @RevVault!(\\\"deployerAuthKey\\\", *deployerId, *revVaultkeyCh) |\\n        for (@(true, vault) <- vaultCh; key <- revVaultkeyCh) {\\n\\n          stdout!((\\\"Beginning transfer of \\\", amount, \\\"REV from\\\", from, \\\"to\\\", to)) |\\n\\n          new resultCh in {\\n            @vault!(\\\"transfer\\\", to, amount, *key, *resultCh) |\\n            for (@result <- resultCh) {\\n              stdout!((\\\"Finished transfer of \\\", amount, \\\"REV to\\\", to, \\\"result was:\\\", result))\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n}\";\n};\nexports.getDeployOptions = function (sigAlgorithm, timestamp, term, privateKey, publicKey, phloPrice, phloLimit, validAfterBlockNumber) {\n    if (phloPrice === void 0) { phloPrice = 1; }\n    if (phloLimit === void 0) { phloLimit = 10000; }\n    if (validAfterBlockNumber === void 0) { validAfterBlockNumber = 0; }\n    var deployData = exports.getDeployData(timestamp, term, phloPrice, phloLimit, validAfterBlockNumber);\n    var toSign = exports.getDeployDataToSign(deployData);\n    var hash = exports.getBlake2Hash(toSign);\n    var signature;\n    signature = exports.signSecp256k1(hash, privateKey);\n    return {\n        data: deployData,\n        deployer: publicKey,\n        signature: Buffer.from(new Uint8Array(signature)).toString(\"hex\"),\n        sigAlgorithm: sigAlgorithm\n    };\n};\n// Address and public key\n// Algorithm to generate ETH and REV address is taken from RNode source\n// https://github.com/rchain/rchain/blob/bf7a30e1d388d46aa9e5f4b8c04089fc8e31d771/rholang/src/main/scala/coop/rchain/rholang/interpreter/util/AddressTools.scala#L47\n// Prefix as defined in https://github.com/rchain/rchain/blob/c6721a6/rholang/src/main/scala/coop/rchain/rholang/interpreter/util/RevAddress.scala#L13\nvar prefix = { coinId: \"000000\", version: \"00\" };\nvar toBase58 = function (hexStr) {\n    var bytes = bytesFromHex(hexStr);\n    return base58.encode(bytes);\n};\nvar getAddrFromEth = function (ethAddr) {\n    if (!ethAddr || ethAddr.length !== 40) {\n        throw new Error(\"ETH address must contain 130 characters\");\n    }\n    // Hash ETH address\n    var ethAddrBytes = bytesFromHex(ethAddr);\n    var ethHash = js_sha3_1.keccak256(ethAddrBytes);\n    // Add prefix with hash and calculate checksum (blake2b-256 hash)\n    var payload = \"\" + prefix.coinId + prefix.version + ethHash;\n    var payloadBytes = bytesFromHex(payload);\n    var checksum = blakejs_1.blake2bHex(payloadBytes, void 666, 32).slice(0, 8);\n    // Return REV address\n    return toBase58(\"\" + payload + checksum);\n};\nvar bytesFromHex = function (hexStr) {\n    var byte2hex = function (_a, x) {\n        var arr = _a[0], bhi = _a[1];\n        return bhi ? [__spreadArrays(arr, [parseInt(\"\" + bhi + x, 16)])] : [arr, x];\n    };\n    var resArr = Array.from(hexStr).reduce(byte2hex, [[]])[0];\n    return Uint8Array.from(resArr);\n};\nexports.revAddressFromPublicKey = function (publicKey) {\n    if (!publicKey || publicKey.length !== 130) {\n        throw new Error(\"Public key must contain 130 characters\");\n    }\n    // Public key bytes from hex string\n    var pubKeyBytes = bytesFromHex(publicKey);\n    // Remove one byte from pk bytes and hash\n    var pkHash = js_sha3_1.keccak256(pubKeyBytes.slice(1));\n    // Take last 40 chars from hashed pk (ETH address)\n    var pkHash40 = pkHash.slice(-40);\n    // Return both REV and ETH address\n    return getAddrFromEth(pkHash40);\n};\nexports.publicKeyFromPrivateKey = function (privateKey) {\n    var keyPair = ec.keyFromPrivate(privateKey);\n    return keyPair.getPublic().encode(\"hex\", false);\n};\n","\"use strict\";\nexports.__esModule = true;\nvar _grpc = require(\"./grpc\");\nvar _http = require(\"./http\");\nvar _utils = require(\"./utils\");\nexports.grpc = _grpc;\nexports.http = _http;\nexports.utils = _utils;\n","import {\n  TransactionState,\n  Identification,\n  TransactionOriginDapp,\n} from '../models';\n\nexport const DAPP_INITIAL_SETUP = '[Common] dapp initial setup';\nexport const EXECUTE_TRANSACTION = '[Common] Execute transaction';\nexport const NAVIGATE = '[Common] Navigate';\n\nexport const SEND_RCHAIN_TRANSACTION_FROM_SANDBOX = '[Common] Send RChain transaction from sandbox';\nexport const SEND_RCHAIN_PAYMENT_REQUEST_FROM_SANDBOX = '[Common] Send RChain payment request from sandbox';\n\nexport const UPDATE_RCHAIN_TRANSACTION_STATUS = '[Common] Update RChain transaction status';\nexport const UPDATE_RCHAIN_TRANSACTION_VALUE = '[Common] Update RChain transaction value';\n\nexport const IDENTIFY_FROM_SANDBOX = '[Common] Identify from sandbox';\n\nexport const UPDATE_TRANSACTIONS = '[Common] Update transactions';\nexport const UPDATE_IDENTIFICATIONS = '[Common] Update identifications';\n\nexport interface DappInitialSetupPayload {\n  html: string;\n  title: string;\n  appPath: string; // path to load the resources from, will be \"file://....\" in dev , and \"/\" in prod\n  address: string;\n  path: string;\n  dappId: string;\n  randomId: string;\n}\nexport const dappInitialSetupAction = (values: DappInitialSetupPayload) => {\n  return {\n    type: DAPP_INITIAL_SETUP,\n    payload: values,\n  };\n};\n\nexport interface ExecuteTransactionPayload {\n  parameters: {\n    chainId?: string;\n    keyProvider?: string;\n    actions: any;\n  };\n  callId: string;\n  dappId: string;\n}\nexport interface ExecuteTransactionAction {\n  type: 'Execute transaction';\n  payload: ExecuteTransactionPayload;\n}\nexport const executeTransactionAction = (values: ExecuteTransactionPayload) => {\n  return {\n    type: EXECUTE_TRANSACTION,\n    payload: values,\n  };\n};\n\nexport interface SendRChainTransactionFromMiddlewarePayload {\n  parameters: {\n    term?: string;\n    signatures?: { [expr: string]: string };\n  };\n  dappId: string;\n  chainId: string;\n  id: string;\n  origin: TransactionOriginDapp;\n}\nexport interface SendRChainTransactionFromSandboxPayload {\n  parameters: {\n    term?: string;\n    signatures?: { [expr: string]: string };\n  };\n  callId: string;\n  dappId: string;\n  randomId: string;\n}\nexport interface SendRChainTransactionFromSandboxAction {\n  type: '[SandBox] Send RChain transaction from sandbox';\n  payload: SendRChainTransactionFromSandboxPayload;\n}\nexport const sendRChainTransactionFromSandboxAction = (values: SendRChainTransactionFromSandboxPayload) => {\n  return {\n    type: SEND_RCHAIN_TRANSACTION_FROM_SANDBOX,\n    payload: values,\n  };\n};\n\nexport interface RChainPaymentRequestParameters {\n  from?: string;\n  to: string | undefined;\n  amount: number | undefined;\n}\nexport interface SendRChainPaymentRequestFromMiddlewarePayload {\n  parameters: RChainPaymentRequestParameters;\n  dappId: string;\n  chainId: string;\n  id: string;\n  origin: TransactionOriginDapp;\n}\n\nexport interface SendRChainPaymentRequestFromSandboxPayload {\n  parameters: {\n    from?: string;\n    to: string;\n    amount: number;\n  };\n  callId: string;\n  dappId: string;\n  randomId: string;\n}\nexport interface SendRChainPaymentRequestFromSandboxAction {\n  type: '[Common] Send RChain payment request from sandbox';\n  payload: SendRChainPaymentRequestFromSandboxPayload;\n}\nexport const sendRChainPaymentRequestFromSandboxAction = (values: SendRChainPaymentRequestFromSandboxPayload) => {\n  return {\n    type: SEND_RCHAIN_PAYMENT_REQUEST_FROM_SANDBOX,\n    payload: values,\n  };\n};\n\nexport interface UpdateTransactionsPayload {\n  transactions: {\n    [transactionId: string]: TransactionState;\n  };\n}\nexport interface UpdateTransactionsAction {\n  type: '[Common] Update transactions';\n  payload: UpdateTransactionsPayload;\n}\nexport const updateTransactionsAction = (values: UpdateTransactionsPayload) => {\n  return {\n    type: UPDATE_TRANSACTIONS,\n    payload: values,\n  };\n};\n\nexport interface IdentifyFromSandboxPayload {\n  parameters: {\n    publicKey: undefined | string;\n  };\n  callId: string;\n  dappId: string;\n  randomId: string;\n}\nexport interface IdentifyFromSandboxAction {\n  type: '[SandBox] Identify from sandbox';\n  payload: IdentifyFromSandboxPayload;\n}\nexport const identifyFromSandboxAction = (values: IdentifyFromSandboxPayload) => {\n  return {\n    type: IDENTIFY_FROM_SANDBOX,\n    payload: values,\n  };\n};\n\nexport interface UpdateIdentificationsPayload {\n  identifications: {\n    [callId: string]: Identification;\n  };\n}\nexport interface UpdateIdentificationsAction {\n  type: '[Common] Update identifications';\n  payload: UpdateIdentificationsPayload;\n}\nexport const updateIdentificationsAction = (values: UpdateIdentificationsPayload) => {\n  return {\n    type: UPDATE_IDENTIFICATIONS,\n    payload: values,\n  };\n};\n","export * from './actions';\n","export const buildUnforgeableNameQuery = (unforgeableName: string) => {\n  return {\n    UnforgPrivate: { data: unforgeableName },\n  };\n};\n","import { blake2b } from 'blakejs';\nimport * as rchainToolkit from 'rchain-toolkit';\n\nexport const generateSignature = (nonce: string | Uint8Array, privateKey: string) => {\n  const bufferToSign = Buffer.from(nonce);\n  const uInt8Array = new Uint8Array(bufferToSign);\n\n  const blake2bHash = blake2b(uInt8Array, 0, 32);\n  const signature = rchainToolkit.utils.signSecp256k1(blake2bHash, privateKey);\n\n  return Buffer.from(signature).toString('hex');\n};\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","import uuidv4 from 'uuid/v4';\n\nexport const generateNonce = () => {\n  return uuidv4().replace(/-/g, '');\n};\n","import { createStore } from 'redux';\nimport * as rchainToolkit from 'rchain-toolkit';\n\nimport * as fromCommon from './common';\nimport {\n  sendRChainTransactionFromSandboxAction,\n  identifyFromSandboxAction,\n  sendRChainPaymentRequestFromSandboxAction,\n} from './common';\nimport { TransactionState, Identification } from './models';\nimport { buildUnforgeableNameQuery } from './utils/buildUnforgeableNameQuery';\nimport { generateSignature } from './utils/generateSignature';\nimport { generateNonce } from './utils/generateNonce';\n\nconst blockchainUtils = {\n  rhoValToJs: rchainToolkit.utils.rhoValToJs,\n  revAddressFromPublicKey: rchainToolkit.utils.revAddressFromPublicKey,\n  toByteArray: rchainToolkit.utils.toByteArray,\n  buildUnforgeableNameQuery: buildUnforgeableNameQuery,\n  generateNonce: generateNonce,\n  generateSignature: generateSignature,\n  uInt8ArrayToHex: (uint8array: Uint8Array): string => {\n    return uint8array.join(',');\n  },\n};\nwindow.blockchainUtils = blockchainUtils;\n\nconst sendMessageToHost = (m) => {\n  const interProcess2 = new XMLHttpRequest();\n  interProcess2.open('POST', 'interprocessdapp://message-from-dapp-sandboxed');\n  interProcess2.setRequestHeader(\n    'Data',\n    JSON.stringify({\n      randomId: randomId,\n      action: m,\n    })\n  );\n  interProcess2.send();\n};\n\ninterface State {\n  transactions: TransactionState[];\n  identifications: {\n    [callId: string]: Identification;\n  };\n}\nconst initialState: State = {\n  transactions: [],\n  identifications: {},\n};\n\nconst store = createStore((state = initialState, action: any) => {\n  switch (action.type) {\n    case fromCommon.UPDATE_TRANSACTIONS: {\n      const payload: fromCommon.UpdateTransactionsPayload = action.payload;\n\n      return {\n        ...state,\n        transactions: payload.transactions,\n      };\n    }\n\n    case fromCommon.UPDATE_IDENTIFICATIONS: {\n      const payload: fromCommon.UpdateIdentificationsPayload = action.payload;\n      return {\n        ...state,\n        identifications: {\n          ...state.identifications,\n          ...payload.identifications,\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}, initialState);\n\nwindow.dappyStore = store;\n\nlet dappId: undefined | string = undefined;\nlet randomId: undefined | string = undefined;\n\nclass DappyRChain {\n  identifications: {\n    [key: string]: {\n      resolve: (a: Identification) => void;\n      reject: (a: { error: string; identification?: Identification }) => void;\n    };\n  } = {};\n  transactions: {\n    [key: string]: {\n      resolve: (a: TransactionState) => void;\n      reject: (a: { error: string; transaction?: TransactionState }) => void;\n    };\n  } = {};\n\n  fetch(url: string) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.onreadystatechange = function (event) {\n        // XMLHttpRequest.DONE === 4\n        if (this.readyState === XMLHttpRequest.DONE) {\n          if (this.status === 200) {\n            resolve(this.responseText);\n          } else {\n            reject(this.status);\n          }\n        }\n      };\n\n      req.open('GET', url, true);\n      req.setRequestHeader('Accept', 'rholang/term');\n      req.send(null);\n    });\n  }\n\n  exploreDeploys(terms: string[]) {\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.onreadystatechange = function (event) {\n        // XMLHttpRequest.DONE === 4\n        if (this.readyState === XMLHttpRequest.DONE) {\n          if (this.status === 200) {\n            resolve(this.responseText);\n          } else {\n            reject(this.status);\n          }\n        }\n      };\n\n      req.open('GET', 'dappy://explore-deploys', true);\n      req.setRequestHeader('Explore-Deploys', JSON.stringify({ data: terms }));\n      req.setRequestHeader('Accept', 'rholang/term');\n      req.send(null);\n    });\n  }\n\n  identify(parameters: { publicKey: undefined | string }) {\n    const promise = new Promise((resolve, reject) => {\n      if (!dappId) {\n        const e = 'Cannot find dappId';\n        console.error(e);\n        reject(e);\n        return;\n      }\n      if (!randomId) {\n        const e = 'Cannot find randomId';\n        console.error(e);\n        reject(e);\n        return;\n      }\n\n      let params = parameters;\n      if (!params || !params.publicKey) {\n        params = {\n          publicKey: '',\n        };\n      }\n\n      const callId = new Date().valueOf().toString() + Math.round(Math.random() * 1000000).toString();\n\n      sendMessageToHost(\n        identifyFromSandboxAction({\n          parameters: params,\n          callId: callId,\n          dappId: dappId,\n          randomId: randomId,\n        })\n      );\n\n      this.identifications[callId] = {\n        resolve: resolve,\n        reject: reject,\n      };\n    });\n\n    return promise;\n  }\n\n  transaction(parameters: { term: string; signatures?: { [expr: string]: string } }) {\n    const promise = new Promise((resolve, reject) => {\n      if (!dappId) {\n        const e = 'Cannot find dappId';\n        console.error(e);\n        reject(e);\n        return;\n      }\n      if (!randomId) {\n        const e = 'Cannot find randomId';\n        console.error(e);\n        reject(e);\n        return;\n      }\n\n      const callId = new Date().valueOf().toString() + Math.round(Math.random() * 1000000).toString();\n\n      sendMessageToHost(\n        sendRChainTransactionFromSandboxAction({\n          parameters: parameters,\n          callId: callId,\n          dappId: dappId,\n          randomId: randomId,\n        })\n      );\n\n      this.transactions[callId] = {\n        resolve: resolve,\n        reject: reject,\n      };\n    });\n\n    return promise;\n  }\n\n  requestPayment(parameters: { from?: string; to: string; amount: number }) {\n    const promise = new Promise((resolve, reject) => {\n      if (!dappId) {\n        const e = 'Cannot find dappId';\n        console.error(e);\n        reject(e);\n        return;\n      }\n      if (!randomId) {\n        const e = 'Cannot find randomId';\n        console.error(e);\n        reject(e);\n        return;\n      }\n\n      const callId = new Date().valueOf().toString() + Math.round(Math.random() * 1000000).toString();\n\n      sendMessageToHost(\n        sendRChainPaymentRequestFromSandboxAction({\n          parameters: parameters,\n          callId: callId,\n          dappId: dappId,\n          randomId: randomId,\n        })\n      );\n\n      this.transactions[callId] = {\n        resolve: resolve,\n        reject: reject,\n      };\n    });\n\n    return promise;\n  }\n\n  requestTransactions = () => {\n    const io = navigator.userAgent.indexOf('randomId=');\n    randomId = navigator.userAgent.substring(io + 'randomId='.length);\n    const interProcess = new XMLHttpRequest();\n    interProcess.open('POST', 'interprocessdapp://get-transactions');\n    interProcess.setRequestHeader(\n      'Data',\n      JSON.stringify({\n        randomId: randomId,\n      })\n    );\n    interProcess.send();\n    interProcess.onload = (a: any) => {\n      try {\n        const r = JSON.parse(a.target.responseText);\n        const payload: fromCommon.UpdateTransactionsPayload = r;\n        if (payload.transactions) {\n          this.updateTransactions(payload.transactions);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  };\n\n  updateTransactions(transactions: { [transactionId: string]: TransactionState }) {\n    Object.keys(this.transactions).forEach((key) => {\n      const callTransaction = Object.values(transactions).find(\n        (t) => t.origin.origin === 'dapp' && t.origin.callId === key\n      );\n      if (callTransaction) {\n        if (callTransaction.status === 'aired') {\n          this.transactions[key].resolve(callTransaction);\n        } else if (callTransaction.status === 'abandonned' || callTransaction.status === 'failed') {\n          this.transactions[key].reject({\n            error: `transaction ${callTransaction.status}`,\n            transaction: callTransaction,\n          });\n        }\n      }\n\n      store.dispatch(fromCommon.updateTransactionsAction({ transactions: transactions }));\n    });\n  }\n\n  requestIdentifications = () => {\n    const io = navigator.userAgent.indexOf('randomId=');\n    randomId = navigator.userAgent.substring(io + 'randomId='.length);\n    const interProcess = new XMLHttpRequest();\n    interProcess.open('POST', 'interprocessdapp://get-identifications');\n    interProcess.setRequestHeader(\n      'Data',\n      JSON.stringify({\n        randomId: randomId,\n      })\n    );\n    interProcess.send();\n    interProcess.onload = (a: any) => {\n      try {\n        const r = JSON.parse(a.target.responseText);\n        const payload: fromCommon.UpdateIdentificationsPayload = r;\n        if (payload.identifications) {\n          this.updateIdentifications(payload.identifications);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  };\n\n  updateIdentifications(identifications: { [callId: string]: Identification }) {\n    Object.keys(this.identifications).forEach((key) => {\n      const callIdentification = identifications[key];\n      if (callIdentification) {\n        if (callIdentification.identified) {\n          this.identifications[key].resolve(callIdentification);\n        } else {\n          this.identifications[key].reject(callIdentification);\n        }\n      }\n\n      store.dispatch(fromCommon.updateIdentificationsAction({ identifications: identifications }));\n    });\n  }\n}\n\nconst dappyRChain = new DappyRChain();\nwindow.dappyRChain = dappyRChain;\n\nwindow.messageFromMain = (action) => {\n  if (action.type === fromCommon.DAPP_INITIAL_SETUP) {\n    const payload: fromCommon.DappInitialSetupPayload = action.payload;\n    console.log('[dappy] initial payload');\n    console.log(payload);\n    document.title = payload.title;\n    dappId = payload.dappId;\n    randomId = payload.randomId;\n    window.dappy = {\n      address: payload.address,\n      path: payload.path,\n      randomId: payload.randomId,\n      dappId: payload.dappId,\n    };\n\n    document.write(payload.html.replace(new RegExp('dappyl://', 'g'), payload.appPath));\n    document.close();\n\n    document.addEventListener('DOMContentLoaded', function () {\n      if (typeof window.initContextMenu !== 'undefined') {\n        window.initContextMenu();\n      }\n      setTimeout(() => {\n        var link = document.querySelector(\"link[rel*='icon']\");\n        if (link !== null) {\n          /*\n            Multiply tries because the event 'page-favicon-updated' is not\n            triggered if .appenChild is done too soon\n          */\n          setTimeout(() => {\n            document.getElementsByTagName('head')[0].appendChild(link.cloneNode());\n          }, 100);\n          setTimeout(() => {\n            document.getElementsByTagName('head')[0].appendChild(link.cloneNode());\n          }, 500);\n          setTimeout(() => {\n            document.getElementsByTagName('head')[0].appendChild(link.cloneNode());\n          }, 2000);\n          setTimeout(() => {\n            document.getElementsByTagName('head')[0].appendChild(link.cloneNode());\n          }, 5000);\n        }\n      }, 0);\n    });\n  }\n};\n\nlet DOMContentLoaded = false;\nlet initializePayload: any = undefined;\n\nconst io = navigator.userAgent.indexOf('randomId=');\nrandomId = navigator.userAgent.substring(io + 'randomId='.length);\nconst interProcess = new XMLHttpRequest();\ninterProcess.open('POST', 'interprocessdapp://hi-from-dapp-sandboxed');\ninterProcess.setRequestHeader(\n  'Data',\n  JSON.stringify({\n    randomId: randomId,\n  })\n);\ninterProcess.send();\ninterProcess.onload = (a) => {\n  try {\n    const r = JSON.parse(a.target.responseText);\n    initializePayload = r;\n    if (DOMContentLoaded) {\n      window.messageFromMain(r);\n    }\n  } catch (e) {\n    reject({ message: 'could not parse response' });\n  }\n};\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  DOMContentLoaded = true;\n  if (initializePayload) {\n    window.messageFromMain(initializePayload);\n  }\n  dappyRChain.requestIdentifications();\n  dappyRChain.requestTransactions();\n});\n"]}